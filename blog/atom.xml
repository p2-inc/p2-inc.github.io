<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://phasetwo.io/blog/</id>
    <title>Phase Two - Keycloak Hosting | Support | Migration | Customization Blog</title>
    <updated>2024-08-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://phasetwo.io/blog/"/>
    <subtitle>Phase Two - Keycloak Hosting | Support | Migration | Customization Blog</subtitle>
    <icon>https://phasetwo.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. FrontEgg, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/"/>
        <updated>2024-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus FrontEgg and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Keycloak and Frontegg are two prominent solutions in the identity and access management (IAM) space, each serving distinct needs. Keycloak is an open-source IAM solution with over eight years of development, known for its scalability and deep customization options, allowing organizations full control over user identity management. On the other hand, Frontegg is a cloud-native platform designed for quick deployment and integration, specifically tailored for SaaS applications, offering a user-friendly management experience. In this blog post, we will compare Keycloak and Frontegg based on cost structure, deployment options, customization, scalability, functionality, and support.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-structure">Cost Structure<a class="hash-link" aria-label="Direct link to Cost Structure" title="Direct link to Cost Structure" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#cost-structure">​</a></h3>
<p><strong>Keycloak</strong>
As an open-source solution, Keycloak is free to use, making it an attractive option for organizations of all sizes. While there are no licensing fees, organizations need to consider hosting costs and the resources required for system management. This cost model makes Keycloak particularly appealing for startups and enterprises that can manage their own infrastructure effectively.</p>
<p><strong>Frontegg</strong>
Frontegg operates on a subscription-based pricing model, starting with a free 30-day trial that unlocks all features. Following the trial, costs begin at $499 per month for the Growth Plan. While it simplifies IAM implementation and reduces developmental burden, organizations must weigh the recurring costs against the value gained from Frontegg's streamlined user management capabilities.<br>
<!-- -->Frontegg provides a nice “free forever” tier that gives you enough to play with the platform. You would not want to use this for a production application with serious user covenants. To move upward, it is based on features and requires sales contact to assess pricing. While the next tiers allow for “growth to unlimited users”, pricing is heavily dependent on that usage.</p>
<p><strong>Winner</strong></p>
<p>Keycloak stands out as a more economically advantageous option, particularly for organizations with the technical capability to manage their own infrastructure. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-options">Deployment Options<a class="hash-link" aria-label="Direct link to Deployment Options" title="Direct link to Deployment Options" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#deployment-options">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak offers flexibility in deployment, supporting both on-premises and cloud-based solutions. This capability allows organizations to maintain control over their identity management infrastructure, making it suitable for varying operational requirements and compliance needs.</p>
<p><strong>Frontegg</strong>
Frontegg is primarily a cloud-based solution designed for rapid deployment, offering a plug-and-play experience that facilitates quick integration into existing applications. While it doesn’t provide robust on-premises capabilities, it excels in cloud environments, catering particularly well to SaaS platforms aiming for fast time-to-market.</p>
<p><strong>Winner</strong></p>
<p>Keycloak offers superior deployment flexibility, accommodating both complex cloud and on-premises infrastructures. Frontegg, however, excels in ease of use for cloud-based deployments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#customization-and-branding">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is renowned for its extensive customization options, enabling organizations to tailor authentication flows, user interfaces, and security protocols to meet their specific needs. Its open-source nature allows for modifications that avoid vendor lock-in, facilitating a user experience that matches organizational needs. While branding and theming Keycloak is possible, the current ability to do so is not straightforward. Phase Two has made this easier through extending the Keycloak Admin UI (<a href="https://phasetwo.io/docs/getting-started/customizing-ui/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/docs/getting-started/customizing-ui/</a>) which is available in all its <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosted</a> offerings.</p>
<p><strong>Frontegg</strong>
Frontegg also provides customization capabilities but focuses on delivering a user-friendly interface that prioritizes speed and accessibility. It allows basic branding and minor adjustments but may not match the depth of customization available in Keycloak. The branding tool built by Frontegg is well done and prioritizes the user experience.</p>
<p><strong>Winner</strong></p>
<p>Keycloak takes the lead in customization and flexibility, providing organizations more granular control over user interfaces and workflows. While Frontegg leads with providing the a strong user experience for branding customization.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#scalability-and-performance">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is designed for high scalability, accommodating large user bases through horizontal scaling and clustered deployments. This architecture makes it suitable for extensive enterprise environments that require robust performance under varying loads.</p>
<p><strong>Frontegg</strong>
Frontegg is also built with scalability in mind, catering to growing SaaS applications through its multi-tenant architecture. While it's designed to manage increasing user volumes effectively, its performance may not yet match Keycloak's capabilities in extremely large-scale environments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the preferred option for larger applications requiring robust scalability. However, Frontegg is well-suited for rapidly growing applications, especially in the SaaS space.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#functionality-and-flexibility">​</a></h3>
<p><strong>Keycloak</strong>:Keycloak<!-- --> provides a comprehensive suite of IAM features, including various authentication methods, fine-grained access control, and advanced identity federation capabilities. Its versatility in integrating with existing infrastructures makes Keycloak a powerful solution for complex IAM scenarios.</p>
<p><strong>Frontegg</strong>
Frontegg focuses on user management, facilitating seamless authentication and role management. Its end-to-end user management platform integrates easily with existing applications, offering a robust alternative for companies seeking quick implementation without extensive customization.</p>
<p><strong>Winner</strong></p>
<p>Keycloak leads in functionality and versatility, offering a broader range of advanced IAM features, making it a better choice for diverse security needs. Phase Two can provide <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">expert enterprise help</a>, custom development, and migrations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#integration-capabilities">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak’s extensive integration capabilities include support for various identity providers and protocols like SAML, OAuth 2.0, and OpenID Connect. This allows organizations to leverage existing systems while enabling seamless authentication across applications.</p>
<p><strong>Frontegg</strong>
Frontegg also supports a wide range of integrations but primarily focuses on simplifying connections for SaaS applications. Its plug-and-play approach makes it easy to incorporate into existing products but may lack the depth of integration options available in Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak emerges as the more versatile option, providing greater flexibility for organizations with complex integration requirements. Frontegg offers a great and easy interface to integrate with things they have support for.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#community-and-support">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak benefits from a robust open-source community, with extensive documentation, forums, and active user contributions. Organizations can rely on community-driven support and resources to troubleshoot issues and share best practices.</p>
<p><strong>Frontegg</strong>
Frontegg provides dedicated customer support along with a library of resources. While still relatively new, it focuses on delivering good customer experiences and support for its users. Much of Frontegg’s Enterprise tier is focused on providing support.</p>
<p><strong>Winner</strong></p>
<p>Keycloak's established community offers a good way to get answers and help. Frontegg’s support channels are only available with the correct license. Phase Two helps to fill the gap between community help and Enterprise support (<a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/support/</a>).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-should-i-choose-iams">How Should I Choose IAMs?<a class="hash-link" aria-label="Direct link to How Should I Choose IAMs?" title="Direct link to How Should I Choose IAMs?" href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#how-should-i-choose-iams">​</a></h3>
<p>Choosing the right IAM solution depends on your organization's specific needs and strategic goals. Keycloak is ideal for those seeking a customizable, open-source platform with extensive features and deployment flexibility. Frontegg, with its focus on rapid implementation and simplicity for SaaS applications, is a compelling option for tech companies looking to reduce development time and overhead.</p>
<p>If you're looking to explore Keycloak further or have questions about <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">integrating</a> it into your organization, please <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">reach out for assistance</a>. The right IAM solution can help you secure your digital environment and streamline user management effectively.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="frontegg" term="frontegg"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. PingIdentity, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/"/>
        <updated>2024-08-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus PingIdentity and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an alternative to PingIdentity for Authentication Solutions</p>
<p>In the evolving landscape of identity and access management (IAM), organizations face critical decisions regarding the tools that will best meet their needs. Keycloak and <a href="https://www.pingidentity.com/" target="_blank" rel="noopener noreferrer">Ping Identity</a> are two noteworthy solutions, each exhibiting unique features that cater to different organizational requirements. This blog provides a detailed comparison of open-source Keycloak and the commercial offering of Ping Identity across essential aspects of IAM solutions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-model">Deployment Model<a class="hash-link" aria-label="Direct link to Deployment Model" title="Direct link to Deployment Model" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#deployment-model">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is an open-source IAM solution that can be deployed both <a href="https://phasetwo.io/product/onprem/" target="_blank" rel="noopener noreferrer">on-prem</a> and in cloud environments. This flexibility allows organizations to choose their preferred hosting option while maintaining control over their identity management infrastructure. Its ability to adapt quickly to new standards makes it particularly suitable for agile development environments.</p>
<p><strong>PingIdentity:</strong>
Ping Identity offers a hybrid deployment model that combines both cloud-based and on-premises options. This versatility is particularly beneficial for large enterprises where regulatory compliance dictates specific control over identity services.</p>
<p><strong>Winner</strong></p>
<p>Tie. Both solutions offer strong options for those seeking to deploy the way they want to and need to. Both provide enterprise-centric hybrid options that accommodate complex infrastructure needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-flexibility">Customization and Flexibility<a class="hash-link" aria-label="Direct link to Customization and Flexibility" title="Direct link to Customization and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#customization-and-flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak shines with its extensive customization features, allowing developers to modify everything from login pages to role-based access controls. Being open-source software, organizations have the freedom to make adjustments at any time without vendor lock-in, making it a powerful and cost-effective solution. It can be used as a standalone solution or integrated as an element of a broader IT infrastructure.</p>
<p><strong>PingIdentity:</strong>
Ping Identity also offers customization capabilities but often demands more technical effort to implement tailored solutions. While it is configurable, achieving significant customizations may be more challenging compared to Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak wins for its superior flexibility and ease of customization, particularly appealing to developers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-ease-of-use">User Experience and Ease of Use<a class="hash-link" aria-label="Direct link to User Experience and Ease of Use" title="Direct link to User Experience and Ease of Use" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#user-experience-and-ease-of-use">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is designed with usability in mind, featuring an intuitive interface and straightforward setup process. Its fast, agile nature allows it to adapt quickly to changing application landscapes, ensuring accessibility for users. It supports Single Sign-On (SSO), identity brokering, and various protocols (OAuth2, OpenID Connect, SAML), streamlining user experience.</p>
<p><strong>PingIdentity:</strong>
Ping Identity prioritizes a comprehensive user experience targeting both technical and non-technical users. Although it features a polished interface, the initial setup can be complex, resulting in a steeper learning curve for administrators.</p>
<p><strong>Winner</strong></p>
<p>Keycloak edges out in user-friendliness during initial setup and usability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#scalability-and-performance">​</a></h3>
<p><strong>Keycloak:</strong>
With its cloud-native adaptation and support for high-volume user bases, Keycloak scales effectively to meet organizational needs. However, the management of a scaled Keycloak system can require significant time and resources without <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">proper enterprise support</a>.</p>
<p><strong>PingIdentity:</strong>
Ping Identity is designed for large-scale environments with robust scalability features, ensuring seamless performance under heavy loads, making it particularly suited for large organizations.</p>
<p><strong>Winner</strong></p>
<p>Ping Identity excels in scalability and performance, proving its capability to manage large-scale authentication requests. However, this comes at a larger cost which could be offset by taking on the management of Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pricing-model">Pricing Model<a class="hash-link" aria-label="Direct link to Pricing Model" title="Direct link to Pricing Model" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#pricing-model">​</a></h3>
<p><strong>Keycloak:</strong>
Being open-source software, Keycloak has no licensing fees, making it highly cost-effective. However, organizations should consider potential indirect costs related to deployment and system management.</p>
<p><strong>PingIdentity:</strong>
Ping Identity operates on a traditional licensing model based on user count and features, which can lead to higher costs, particularly for larger deployments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the clear winner for pricing, offering a more budget-friendly option. Coupled with a cost-conscious hosting provider, this can save a corporation literal millions of dollars over the course of an implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-ecosystem">Integration Ecosystem<a class="hash-link" aria-label="Direct link to Integration Ecosystem" title="Direct link to Integration Ecosystem" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#integration-ecosystem">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak provides a strong API and powerful Admin portal, making it compatible with a wide range of frameworks like Spring Boot, Django, React, and more. Its supportive community extensions with integrations and continuous improvements, enhancing its adaptability.</p>
<p><strong>PingIdentity:</strong>
Ping Identity features a curated integration ecosystem focused on enterprise-level applications, providing documentation and support for integrations, but may lack the range of community-driven options available with Keycloak.</p>
<p><strong>Winner</strong>
Keycloak takes the lead for its extensive integration options and supportive community. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="advanced-features">Advanced Features<a class="hash-link" aria-label="Direct link to Advanced Features" title="Direct link to Advanced Features" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#advanced-features">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports fine-grained authorization and customizable themes, making it a flexible and cost-effective solution for diverse security needs. Its rapid adaptability to new technologies ensures organizations can stay relevant in a changing landscape.</p>
<p><strong>PingIdentity:</strong>
Ping Identity excels with advanced features such as fraud detection, identity verification, and robust orchestration capabilities, positioning it as a strong choice for larger enterprises requiring comprehensive security and compliance.</p>
<p><strong>Winner</strong>
Both Keycloak and Ping Identity offer valuable advanced features, with Keycloak providing flexibility for diverse environments, while Ping Identity delivers robust security measures suitable for complex enterprise needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which one is best for me?<a class="hash-link" aria-label="Direct link to Which one is best for me?" title="Direct link to Which one is best for me?" href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#which-one-is-best-for-me">​</a></h3>
<p>Both Keycloak and Ping Identity provide essential IAM solutions, but their strengths cater to different organizational needs. Keycloak excels in customization, user experience, cost-effectiveness, and flexibility, making it ideal for organizations prioritizing quick adaptation and flexibility. In contrast, Ping Identity stands out with its hybrid deployment capabilities, scalability, and advanced security functionalities, positioning it as a strong choice for larger enterprises. Ultimately, the decision should align with the specific requirements, resources, and strategic goals of your organization.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://app.simplymeet.me/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="pingidentity" term="pingidentity"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Angular Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/</id>
        <link href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/"/>
        <updated>2024-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Angular application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a Angular application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/angular" target="_blank" rel="noopener noreferrer">Angular example</a>.</p><p>If you want to see a live example, visit the <a href="https://phasetwo-angular-example.vercel.app/" target="_blank" rel="noopener noreferrer">Phase Two Angular example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-a-keycloak-instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to Off.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config " src="https://phasetwo.io/assets/images/capability-config-995c6bc68516bc541a9372f1bce7ad86.png" width="3000" height="2068" class="img_ev3q"></p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-angular-project">Setting up a Angular Project<a class="hash-link" aria-label="Direct link to Setting up a Angular Project" title="Direct link to Setting up a Angular Project" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-a-angular-project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two Angular example code here, but the logic could easily be applied to any existing application.</p></div></div>
<ol>
<li>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</li>
<li>Open the Angular <a href="https://github.com/p2-inc/examples/tree/main/frameworks/angular" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/angular</code>.</li>
<li>Run <code>npm install</code> and then <code>npm run start</code>. This example leverages <a href="https://github.com/manfredsteyer/angular-oauth2-oidc" target="_blank" rel="noopener noreferrer">angular-oauth2-oidc</a> OIDC methods.</li>
<li>We'll review where we configure out Keycloak instance. Open the <code>src/app/auth.config.ts</code> file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code.</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authCodeFlowConfig</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">AuthConfig</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Update this with the url and realm of your hosted Keycloak instance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  issuer</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://app.phasetwo.io/auth/realms/p2examples"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  redirectUri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">origin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/index.html"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Update this to the Client ID you created in the OIDC Client section</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"angular"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  responseType</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"code"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  scope</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"openid profile email offline_access"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  showDebugInformation</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Those are used to configure the <code>oauthService</code> in the <code>src/app/user/user.component.ts</code> file. In the constructor of the component, this is passed in.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">private</span><span class="token plain"> oauthService</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">OAuthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">configure</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authCodeFlowConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// required to initialize the client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">loadDiscoveryDocumentAndTryLogin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">setupAutomaticSilentRefresh</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">events</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">pipe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">type</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'token_received'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">subscribe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">loadUserProfile</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="6">
<li>The <code>UserActivation.component.ts</code> file contains additional methods that will assist with the interaction of the html template.</li>
</ol>
<p>For handling login and logout, the following methods are used:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">signIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">initLoginFlow</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">signOut</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">logOut</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>while we also define additional helper methods to get user information (username, email, etc) along with raw Token values. A couple are provided below as an example.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">get</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">userName</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> claims </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getIdentityClaims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'given_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">get</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">idToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> token </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getIdToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">decodeAndStringifyToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="7">
<li>Switching to the html template for the user component, <code>src/app/user/user.component.html</code>, we can see how the login and logout buttons are rendered. The buttons are conditionally rendered based on the user's authentication status based on the presence of the <code>idToken</code>.</li>
</ol>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">idToken</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show user data --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show logout button --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">!idToken</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show login button --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.</p>
<ol start="10">
<li>Open <a href="http://localhost:4200/" target="_blank" rel="noopener noreferrer">localhost:4200</a>. You will see the Phase Two example landing page. You current state should be <strong>Not authenticated</strong>. Click <strong>Log In</strong>. This will redirect you to your login page.</li>
</ol>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Use the non-admin user created in the previous section to sign in.</p></div></div>
<ol start="11">
<li>Enter the credentials of the non-admin user you created. Click <strong>Submit</strong>. You will then be redirected to the application. The Phase Two example landing page now loads your <strong>Authenticated</strong> state, displaying your user's email and name.</li>
<li>Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="angular" term="angular"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. OneLogin, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/"/>
        <updated>2024-07-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus OneLogin and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an alternative to OneLogin for Authentication Solutions</p>
<p>Keycloak and <a href="https://www.onelogin.com/" target="_blank" rel="noopener noreferrer">OneLogin</a> (by One Identity) are both important players in the identity and access management (IAM) space, each catering to different organizational needs. Keycloak is an open-source solution with over eight years of active development, known for its scalability and customization. OneLogin, on the other hand, is a commercial product emphasizing user-friendly interfaces and extensive integration options. This article compares Keycloak and OneLogin based on cost, deployment, customization, scalability, functionality, integration, and support.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-structure">Cost Structure<a class="hash-link" aria-label="Direct link to Cost Structure" title="Direct link to Cost Structure" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#cost-structure">​</a></h3>
<p><strong>Keycloak:</strong>
As an open-source platform, Keycloak is free to use, making it a cost-effective option for businesses of all sizes. While there are no licensing fees, users must be prepared to manage their own hosting and infrastructure, which can incur costs depending on resource needs.</p>
<p><strong>OneLogin:</strong>
OneLogin operates on a subscription model, with pricing starting at $2 per month per user for its basic services. Advanced features, such as multi-factor authentication (MFA), require higher-tier licenses, which can lead to increased costs, particularly for large enterprises with many users requiring advanced security features. Further pricing is opaque and requires engaging OneLogin sales.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is more economically advantageous and transparent, particularly for organizations equipped to manage their own hosting. Leverage Phase Two's <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Free Hosting</a> Tier to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-and-maintenance">Deployment and Maintenance<a class="hash-link" aria-label="Direct link to Deployment and Maintenance" title="Direct link to Deployment and Maintenance" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#deployment-and-maintenance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports on-premises and private cloud deployments. Organizations have full control over configurations, but they must also bear the responsibility of maintenance and updates.</p>
<p><strong>OneLogin:</strong>
OneLogin is primarily a cloud-based solution but also provides on-premises options. It is managed by the vendor, meaning organizations benefit from automatic updates and less internal maintenance.</p>
<p><strong>Winner</strong></p>
<p>OneLogin simplifies deployment and reduces maintenance tasks for IT teams.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#customization-and-branding">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak allows extensive customization, enabling organizations to tailor authentication workflows and user interfaces according to specific needs. When unifying login from multiple systems to a single one, that means Keycloak and adapt and support as necessary. However, this level of customization may require more technical expertise.</p>
<p><strong>OneLogin:</strong>
While OneLogin offers a customizable interface, its options are more limited compared to Keycloak. It focuses on providing a unified experience without deep customization. Specific business use-cases may not be supported.</p>
<p><strong>Winner</strong></p>
<p>Keycloak wins in customization and flexibility; OneLogin provides some simplicity without the ability to adapt to specific needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#scalability-and-performance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is designed to scale efficiently, accommodating large user bases through horizontal scaling and clustered deployments, making it suitable for extensive enterprise environments.</p>
<p><strong>OneLogin:</strong>
As a cloud solution, OneLogin is also scalable, but is typically geared towards medium-sized enterprises. It can handle multiple applications but may not perform optimally under very high user loads.</p>
<p><strong>Winner</strong></p>
<p>Both will likely be able to scale, but Keycloak is the better choice for large-scale applications requiring high concurrency and user sessions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#functionality-and-flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak provides a comprehensive suite of features, including diverse authentication methods, fine-grained access control, and strong identity federation capabilities (OpenID Connect, OAuth 2.0, SAML 2.0). It allows for deeper integration with existing systems.</p>
<p><strong>OneLogin:</strong>
OneLogin is built using Ruby on Rails and includes essential features such as SSO and MFA, using artificial intelligence to assess user risk scores, enhancing security functionality. However, it may not match Keycloak in offering a wide array of advanced features for complex IAM scenarios.</p>
<p><strong>Winner</strong></p>
<p>Keycloak holds an advantage with its broader range of functionalities and flexibility of integration.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#integration-capabilities">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports integration with various Identity Providers and protocols, enabling flexible authentication across systems. It also has built-in support for many Social Identity Providers, like Google, Twitter, Facebook, Stack Overflow. These can be configured in an advanced manner.</p>
<p><strong>OneLogin:</strong>
OneLogin features a well-developed library of pre-built integrations for third-party applications, providing a straightforward way to manage user access across different systems. It also integrates with HR systems and supports directory integrations, which can be particularly useful for SMEs relying on a variety of SaaS applications.</p>
<p><strong>Winner</strong></p>
<p>The choice depends on specific needs; OneLogin is easier for basic integrations, while Keycloak offers greater versatility for complex requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#community-and-support">​</a></h3>
<p><strong>Keycloak:</strong>
<a href="https://github.com/keycloak" target="_blank" rel="noopener noreferrer">Keycloak</a> has a supportive open-source community, with extensive documentation and user forums for troubleshooting and guidance. Phase Two offers <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a> for hosted and on-prem customers, or those with their own Keycloak deployment.</p>
<p><strong>OneLogin:</strong>
OneLogin provides dedicated customer support, along with comprehensive documentation and professional services for additional assistance.</p>
<p><strong>Winner</strong></p>
<p>Keycloak’s community offers robust support for users, while OneLogin provides more direct, vendor-driven help.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which one is best for me?<a class="hash-link" aria-label="Direct link to Which one is best for me?" title="Direct link to Which one is best for me?" href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#which-one-is-best-for-me">​</a></h3>
<p>When selecting an IAM solution, it’s essential to evaluate your organization’s specific needs. Keycloak is ideal for those seeking an open-source, highly customizable platform that can scale to meet complex requirements. In contrast, OneLogin is well-suited for enterprises looking for an easy-to-use, managed service with a focus on integrations. As one’s implementation grows in size, the cost may become too high to entertain.</p>
<p>Working with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://app.simplymeet.me/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="onelogin" term="onelogin"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. WorkOS, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/"/>
        <updated>2024-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus WorkOS and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an Alternative to WorkOS for Authentication Solutions</p>
<p>Keycloak and WorkOS are both identity and access management (IAM) solutions that offer various features for authentication, authorization, and user management. While they serve similar purposes, there are key differences between the two platforms that make them unique and suitable for different use cases. Keycloak is an open source platform under active development for over 8 years and known for its scalability and customization options. WorkOS is a closed-source platform that can quickly integrate SSO to an application. In this blog post, we'll explore the key differences between Keycloak and WorkOS, focusing on factors such as cost of ownership, scalability, deployments, and maintenance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-ownership">Cost of Ownership<a class="hash-link" aria-label="Direct link to Cost of Ownership" title="Direct link to Cost of Ownership" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#cost-of-ownership">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is an open-source solution and is available for free, making it a cost-effective choice for startups, small businesses, and enterprises alike. It allows organizations to save on licensing fees and scale without worrying about escalating SSO, authentication, and other costs. It does, however, require infrastructure to host and run the application, which can run up costs if a business does not have the proper internal resources or external support. This provides a more predictable cost model when bringing together multiple applications, knowing that as additional connections are created, costs will not increase. The biggest factor in cost becomes the scale of needed infrastructure.</p>
<p><strong>WorkOS:</strong>
WorkOS operates on a subscription-based model, where pricing is tied to the number of monthly active users. While the first million users are included (at time of publishing), WorkOs charges for Custom domains, SSO connections, SCIM, and Audit logs. The more enterprise customers you have, the more your costs will grow. This approach allows customers to scale their identity management solution as needed, while also gaining access to additional features and support based on their chosen plan. Organizations must keep in mind that with every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket, becoming a large financial piece of the overall IT spend.</p>
<p><strong>Winner</strong></p>
<p>With the proper hosting solution, Keycloak is a far more cost-effective choice. Since cost isn't driven by features or users, the ongoing cost is fixed, enabling organizations to allocate funds to other resources. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-and-maintenance">Deployment and Maintenance<a class="hash-link" aria-label="Direct link to Deployment and Maintenance" title="Direct link to Deployment and Maintenance" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#deployment-and-maintenance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is a solution that can be deployed on-premises or in a private cloud. It provides complete control over the infrastructure and allows customization and integration with existing systems. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.</p>
<p>Due to Keycloak’s self-hosted nature, however, organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure.</p>
<p><strong>WorkOS:</strong>
WorkOS is a cloud-based identity platform that is hosted and managed by WorkOS. It offers a simpler deployment process as there is no need to set up or maintain any infrastructure.
Organizations benefit from reduced internal IT burden, as WorkOS handles updates, security patches, and system maintenance.</p>
<p><strong>Winner</strong></p>
<p>WorkOS provides a more hassle-free identity management experience by offloading infrastructure responsibilities through a fully managed service.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#customization-and-branding">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak offers unparalleled customization and extensibility -- from authentication flows and user federation to role-based access control (RBAC) and fine-grained permission -- enabling organizations to tailor the user experience, login screens, and authentication process to their specific needs. This level of customization requires working in and gaining knowledge of the capabilities of Keycloak.</p>
<p><strong>WorkOS:</strong>
WorkOS on the other hand, offers limited customization options and focuses more on providing a unified user experience across different identity providers. We certainly tip our hats to WorkOS for the fantastic job they’ve done at creating a wonderful user experience from a design and user experience perspective.</p>
<p><strong>Winner</strong></p>
<p>Keycloak by a nose. Keycloak offers complete control over the look and feel of the authentication and authorization process. However, WorkOS has done a strong job at simplifying and constraining the world for quick implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#scalability-and-performance">​</a></h3>
<p><strong>Keycloak:</strong>
With its robust architecture, Keycloak is designed to handle large-scale user bases, making it an ideal choice for enterprises. It can be easily scaled horizontally by adding more instances or running in a clustered mode, ensuring high performance and reliability. Keycloak offers a great platform to unify on for companies that find themselves with a burgeoning number of applications that have each gone their own way of IAM implementation.</p>
<p><strong>WorkOS:</strong>
While WorkOS offers scalable infrastructure, it's better suited for smaller to medium-sized applications with moderate to high traffic volumes. Its architecture is optimized for efficient performance, but may not be as well-equipped to handle extremely high volumes of user traffic or a ballooning of connected enterprises. It’s better at working with a specific application rather than connecting multiple applications.</p>
<p><strong>Winner</strong></p>
<p>Depends. Keycloak is a strong contender for large-scale applications looking to scale, but WorkOS may deliver stronger performance for small-mediums sized apps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#functionality-and-flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak offers a comprehensive suite of features to meet the needs of modern apps. It provides secure authentication methods, including username/password, social logins, and MFA, as well as fine-grained authorization controls through RBAC and ABAC. Keycloak excels in identity federation with support for SAML and OpenID Connect, and its SSO feature offers a seamless user experience across apps. It also offers robust user management capabilities, customization options, self-registration, and active community support. For any functionality that might be missing, extensions to Keycloak can be written and deployed. This allows for Keycloak to bend and mold to the needs of its developers.</p>
<p><strong>WorkOS:</strong>
WorkOS offers robust authentication and authorization capabilities, including role-based access control, policy management, and support for multiple identity standards. Its single sign-on feature provides a seamless user experience across apps and services. WorkOS also features self-service registration, account recovery, and a comprehensive user directory. Integration with third-party apps is simplified through APIs and pre-built integrations, while analytics and logging tools help with monitoring and compliance.</p>
<p><strong>Winner</strong></p>
<p>Both WorkOS and Keycloak offer robust functionality, but Keycloak's advanced identity federation capabilities, fine-grained authorization controls, and ability to customize and extend give it an edge over WorkOS.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#integration-capabilities">​</a></h3>
<p><strong>Keycloak:</strong>
The identity brokering capability of Keycloak enables delegation authentication to external Identity Providers (IdPs), applications, and protocols such as LDAP, SAML, OAuth, OpenID Connect. Managing internal permissions and roles, security checks, login experiences across different systems can be done seamlessly.</p>
<p>If you’re switching from WorkOS, for example, Keycloak can be configured to act as a broker that sits between WorkOS and your applications to leverage the strengths of both platforms. For example, WorkOS can be used for external user management, while Keycloak can handle more sensitive, internal authentication needs.</p>
<p><strong>WorkOS:</strong>
There is a narrower focus on authentication, but WorkOS provides a uniform API to integrate with popular identity providers like Google, Microsoft, and Okta. The unified interface reduces the complexity and development time.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the most versatile choice for organizations with complex requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#community-and-support">​</a></h3>
<p><a href="https://github.com/keycloak" target="_blank" rel="noopener noreferrer">Keycloak</a> has a large and active community of developers and contributors, ensuring continuous development, bug fixes, and updates. It has extensive documentation, forums, and <a href="https://keycloak.discourse.group/" target="_blank" rel="noopener noreferrer">community support channels</a> where users can seek help and share knowledge. WorkOS also provides support but may have limitations in terms of community contributions and public resources. It offers dedicated support channels and resources to its users for assistance and issue resolution.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which One Is Best for Me?<a class="hash-link" aria-label="Direct link to Which One Is Best for Me?" title="Direct link to Which One Is Best for Me?" href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#which-one-is-best-for-me">​</a></h3>
<p>In determining the most suitable identity and access management solution for your organization, it is essential to consider the specific requirements and priorities of your enterprise. In summary, Keycloak is an open-source identity and access management solution that offers extensive customization and integration capabilities, making it suitable for organizations with complex requirements. WorkOS, on the other hand, is a cloud-based identity platform that simplifies integration and deployment but may have limitations in terms of scalability and customization options.</p>
<p>Working with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://app.simplymeet.me/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="workos" term="workos"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phase Two Organizations now support shared Identity Providers (IdPs)]]></title>
        <id>https://phasetwo.io/blog/phase-two-organizations-shared-idps/</id>
        <link href="https://phasetwo.io/blog/phase-two-organizations-shared-idps/"/>
        <updated>2024-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two Organizations now support shared Identity Providers (IdPs) for mapping multiple organizations to a single IDP.]]></summary>
        <content type="html"><![CDATA[<p>An exciting new feature has been added to <a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Phase Two Organizations Extension</a>! Organizations now support <a href="https://github.com/p2-inc/keycloak-orgs/issues/249" target="_blank" rel="noopener noreferrer">shared Identity Providers</a> (IdPs) for mapping multiple organizations to a single IDP. This feature is especially useful for organizations that have multiple organizations that need to share the same IDP.</p>
<p>Often asked for by customers, this feature will now allow organizations to share the same IDP across multiple organizations. This will allow for a more streamlined user experience and easier management of users across multiple organizations. Meaning that admins can still keep organizations logically separated, but support the same IdP for authentication and authorization. The primary use case for this is applications that support both <strong>Google social login and Google Workspace enterprise SSO login</strong>. Some of our customers have 100's of organizations that use Google Workspace SSO. This change allows you to use a single OIDC integration with Google, rather than configuring 100's of SAML integrations.</p>
<p>Configuration is fully supported in the Keycloak Admin UI, is up-to-date with the latest Keycloak version, and is fully tested. This feature is available now to any Phase Two hosted customers and can be adopted by anyone leveraging the Phase Two Keycloak Organization Extension.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="organizations" term="organizations"/>
        <category label="idp" term="idp"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. Okta, a Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/"/>
        <updated>2024-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus Okta and why Keycloak offers a strong and compelling alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-keycloak-as-an-alternative-to-okta-for-authentication-solutions">Exploring Keycloak as an Alternative to Okta for Authentication Solutions<a class="hash-link" aria-label="Direct link to Exploring Keycloak as an Alternative to Okta for Authentication Solutions" title="Direct link to Exploring Keycloak as an Alternative to Okta for Authentication Solutions" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#exploring-keycloak-as-an-alternative-to-okta-for-authentication-solutions">​</a></h2>
<p>In today's rapidly evolving digital landscape, securing and managing user identities has become more critical than ever. Organizations are faced with the challenge of choosing the right Identity and Access Management (IAM) solution that balances cost, ease of implementation, and robust feature sets. Two popular contenders in this space are Keycloak and Okta. Keycloak, an open-source solution developed by Red Hat, offers extensive customizability and a community-driven support model. On the other hand, Okta, a leading cloud-based IAM provider, promises quick deployment and comprehensive security features through its subscription-based service. In this blog post, we will delve into a detailed comparison of Keycloak and Okta, examining their costs, total cost of ownership, implementation processes, and the rich array of features and capabilities each brings to the table. Whether you're a small startup or a large enterprise, understanding these key differences will help you make an informed decision for your identity management needs.</p>
<p>We've compared <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Keycloak to Auth0</a> and it's worth noting that Auth0 is owned by Okta. The differences between the offerings are subtle, where Auth0 bills it more as the "developer" tool while Okta is for "SSO". They are separate subscriptions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-ownership">Cost of Ownership<a class="hash-link" aria-label="Direct link to Cost of Ownership" title="Direct link to Cost of Ownership" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#cost-of-ownership">​</a></h3>
<p>When evaluating Identity and Access Management (IAM) solutions, both upfront cost and total cost of ownership (TCO) are critical considerations. There are many factors to think about with a total cost-of-ownership. We've written extensively about <a href="https://phasetwo.io/blog/open-source-iam/">choosing an Open-Source IAM</a> over a managed service.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta">Okta:<a class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta">​</a></h4>
<p>Okta operates on a subscription-based pricing model, with costs varying based on the number of users and selected features. This SaaS solution tries to simplify cost management by bundling infrastructure, maintenance, and support into its subscription fees. Organizations benefit from reduced internal IT burden, as Okta handles updates, patches, and system maintenance. However, the per-user costs can add up, especially for larger organizations, potentially leading to higher ongoing expenses compared to an open-source alternative like Keycloak. While Okta provides scalability, allowing businesses to grow without worrying about infrastructure investments, the costs that are incurred can quickly balloon far out of the original projections. With every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket in multi $100K+, becoming a large financial piece of the overall IT spend.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak">Keycloak:<a class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak">​</a></h4>
<p>Keycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures.</p>
<p>Keycloak, being an open-source solution, stands out with its zero licensing fees, regardless of the number of users or the scale of the project. This makes it an attractive option for organizations looking to minimize expenditures. However, it's important to note that while Keycloak is free to use, it does require infrastructure to <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">host</a> and run the application. This could involve costs related to cloud services or on-premises hardware. Additionally, maintaining and updating Keycloak, as well as implementing customizations, may necessitate dedicated internal resources or external support, which can add to the overall expenses. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Leveraging Phase Two's <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">managed hosting</a> provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application's needs grow for users and integrations, Keycloak quickly becomes a far more cost-effective choice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="maintenance">Maintenance<a class="hash-link" aria-label="Direct link to Maintenance" title="Direct link to Maintenance" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#maintenance">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta-1">Okta:<a class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta-1">​</a></h4>
<p>A strong advantage of Okta is that it is a managed service. From a Dev Ops perspective, it requires minimal maintenance. The Okta team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date. This comes at a cost though since customization of Okta is limited.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-1">Keycloak:<a class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak-1">​</a></h4>
<p>Conversely, Keycloak requires more attention since it's self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.</p>
<p><strong>Winner</strong></p>
<p>Okta.</p>
<p>As a fully managed service, Okta abstracts away this work.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#functionality-and-flexibility">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta-2">Okta:<a class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta-2">​</a></h4>
<p>Okta’s authentication mechanisms support multiple methods for enhanced security and user convenience. The platform’s authorization capabilities include role-based access control (RBAC) and policy management, allowing organizations to enforce detailed security policies. Okta supports identity federation through SAML, OpenID Connect, and other standards, facilitating integration with various identity providers. Its single sign-on (SSO) functionality ensures a seamless user experience across different applications and services. Okta’s user management features are extensive, offering self-service registration, account recovery, and a comprehensive user directory. Additionally, Okta’s APIs and pre-built integrations with numerous third-party applications simplify the implementation process. The platform also provides detailed analytics, logging, and reporting features for monitoring and compliance, as well as automated user provisioning, deprovisioning, and workflow management through its lifecycle management capabilities.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-2">Keycloak:<a class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak-2">​</a></h4>
<p>Keycloak offers a comprehensive suite of features designed to meet the needs of modern applications that are at parity (or better) in many ways with Okta. Keycloak provides various authentication methods, including username/password, social logins, and multi-factor authentication (MFA), ensuring secure access for users. It also supports fine-grained authorization capabilities through role-based access control (<a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">RBAC</a>) and attribute-based access control (<a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">ABAC</a>), enabling precise management of user permissions. Keycloak excels in identity federation, supporting protocols like SAML and OpenID Connect, which allows seamless integration with other identity providers. Additionally, Keycloak’s single sign-on (<a href="https://phasetwo.io/product/sso/" target="_blank" rel="noopener noreferrer">SSO</a>) feature facilitates a smooth user experience across multiple applications, while its extensive <a href="https://phasetwo.io/product/adminportal/" target="_blank" rel="noopener noreferrer">user management</a> capabilities, including user registration, password policies, and account linking, ensure comprehensive control over user identities. The platform is highly customizable, offering themes, custom code, and extensive configuration options, and benefits from strong community support and a wide range of extensions and plugins.</p>
<p>A main point is that the features that Okta and Auth0 try to cover (somewhat separately) are all covered by why Keycloak can do.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Okta and Keycloak offer much of the same functionality for Authentication and Authorization, however Keycloak is extremely flexible to extend and configure. It's a system that can adjust and grow with an application. In addition, there is no distinction in capabilities between different products, meaning Keycloak centralizes more use-cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-keycloak-with-external-systems-like-okta">Integrating Keycloak with External Systems like Okta<a class="hash-link" aria-label="Direct link to Integrating Keycloak with External Systems like Okta" title="Direct link to Integrating Keycloak with External Systems like Okta" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#integrating-keycloak-with-external-systems-like-okta">​</a></h3>
<p>For organizations looking to transition from Okta to Keycloak or integrate Keycloak with systems that are already using Okta, Keycloak's flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Okta and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Okta for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.</p>
<p>The identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Okta. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Okta simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-iam-solution-is-best-for-me">Which IAM Solution Is Best for Me?<a class="hash-link" aria-label="Direct link to Which IAM Solution Is Best for Me?" title="Direct link to Which IAM Solution Is Best for Me?" href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#which-iam-solution-is-best-for-me">​</a></h3>
<p>Choosing between Okta and Keycloak largely depends on your organization’s specific needs and capabilities. Okta is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.</p>
<p>Both platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.</p>
<p>Ultimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust Keyloak <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosting</a>, migration, and support options that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control in SSO, authenication, authorization, user management, and other areas. <strong>Leveraging Keycloak means that ongoing costs are relatively fixed</strong>, since concerns about user growth or feature needs don't have to factor into every decision.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="okta" term="okta"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phase Two's Organizations, a Keycloak Multi-Tenant Extension and Keycloak's Upcoming Organization's Feature]]></title>
        <id>https://phasetwo.io/blog/organgizations-multi-tenant-update/</id>
        <link href="https://phasetwo.io/blog/organgizations-multi-tenant-update/"/>
        <updated>2024-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two's Organization extensions bring single-realm multi-tenancy to Keycloak. Keycloak is officially developing a native version, but it's not a one-to-one replacement.]]></summary>
        <content type="html"><![CDATA[<p>Since we first released our (most) popular Keycloak extension, Keycloak <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organizations</a> (Orgs) and made it available as open source on <a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Github</a>, the Keycloak maintainers have decided to build into native organization support.</p>
<p>This begs the question? What is different between Keycloak's upcoming organizations feature and the Phase Two Organization Extension?</p>
<p>To understand the difference it's important to first understand what the Phase Two Organization extension is. When we initially built this extension, we were struggling to solve the problem of "multi-tenant" Keycloak. During that process we learned a lot.</p>
<p>Other approaches that we tried and decided against were:</p>
<ul>
<li>One Realm for each tenant</li>
<li>Using existing Keycloak Groups to model Organizations, Roles and Memberships</li>
</ul>
<p>Each of these approaches had trade-offs of scale or frailty we found undesirable or unacceptable to meet our requirements. We proceeded to create the Organization extension now in use by hundreds of companies.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-you-get-in-phase-twos-organization-extension">What you get in Phase Two's Organization Extension<a class="hash-link" aria-label="Direct link to What you get in Phase Two's Organization Extension" title="Direct link to What you get in Phase Two's Organization Extension" href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#what-you-get-in-phase-twos-organization-extension">​</a></h3>
<p>Within the extension, the following are treated in a first-class manner</p>
<ol>
<li><strong>Organizations</strong>: "tenants" or "customers" as commonly used. A Realm can have multiple Organizations.</li>
<li><strong>Memberships</strong>: the relationship of Users to Organizations. Users may be members of multiple Organizations.</li>
<li><strong>Roles</strong>: mechanisms of role-based security specific to an Organization, much like Keycloak Realm Roles and Client Roles. In addition to a set of standard roles related to Organization data visibility and management, administrators can create Roles unique to an organization. Users who are Members of Organizations can be granted that Organization's Roles.</li>
<li><strong>Invitations</strong>: allow Users and non-Users to be invited to join an Organization. Invitations can be created by administrators or Organization members with permission.</li>
<li><strong>Domains</strong>: email domains that are used to automatically select Organization IdPs using the optional authenticators. Included is a facility to validate customer domain ownership using DNS records.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-that-translate-to-for-my-workflow-and-business-use-cases">What does that translate to for my workflow and business use-cases?<a class="hash-link" aria-label="Direct link to What does that translate to for my workflow and business use-cases?" title="Direct link to What does that translate to for my workflow and business use-cases?" href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#what-does-that-translate-to-for-my-workflow-and-business-use-cases">​</a></h3>
<p>Organizations are about empowering your customers and developers. They are about being able to segment customers into the right logical unit for interaction with your application. Effectively, they allow much more fine-grained ability to mimic the structure of a business in real-life within Keycloak, including permissions (roles, authorization).</p>
<ol>
<li>Self-management for your customers through the <a href="https://phasetwo.io/product/adminportal/" target="_blank" rel="noopener noreferrer">Admin Portal</a> to enable <a href="https://phasetwo.io/docs/organizations/membership/" target="_blank" rel="noopener noreferrer">membership management</a> and <a href="https://phasetwo.io/docs/organizations/invitations/" target="_blank" rel="noopener noreferrer">invitations</a>.</li>
<li>Self-management for your developers via strong <a href="https://phasetwo.io/api/category/organizations/" target="_blank" rel="noopener noreferrer">API capabilities</a></li>
<li>Enterprise <a href="https://phasetwo.io/docs/sso/" target="_blank" rel="noopener noreferrer">SSO</a> Login for each customer</li>
<li>Enhanced <a href="https://phasetwo.io/docs/organizations/roles/" target="_blank" rel="noopener noreferrer">roles</a>, permissions and authorization per customer.</li>
<li><a href="https://phasetwo.io/docs/sso/setup/#associating-organizations" target="_blank" rel="noopener noreferrer">Domain-based association</a> for registration and sign-up.</li>
<li>Attribute management to apply and manage metadata to members of the organization.</li>
<li><a href="https://github.com/p2-inc/keycloak-orgs/blob/main/docs/active-organization.md" target="_blank" rel="noopener noreferrer">Active organization</a> for the ability to switch between organizations (when part of many organizations).</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="main-differences-between-keycloaks-organization-feature-and-phase-twos-organzation-extension">Main differences between Keycloak's Organization feature and Phase Two's Organzation extension<a class="hash-link" aria-label="Direct link to Main differences between Keycloak's Organization feature and Phase Two's Organzation extension" title="Direct link to Main differences between Keycloak's Organization feature and Phase Two's Organzation extension" href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#main-differences-between-keycloaks-organization-feature-and-phase-twos-organzation-extension">​</a></h3>
<p>The Keycloak team at RedHat has <a href="https://github.com/keycloak/keycloak/discussions/23948" target="_blank" rel="noopener noreferrer">announced</a> that they will be building an Organizations feature into the core product. We have previously offered to change our license and donate our extension to the project, but this was not considered. We participated in some of the public discussions around this feature, as well as provided feedback on their product features privately.</p>
<p>Work has begun, and they plan to <a href="https://github.com/keycloak/keycloak/issues/28609" target="_blank" rel="noopener noreferrer">release</a> some base features with <code>experimental</code> support in Keycloak <code>25</code>. They expect a full feature set and promotion to <code>preview</code> by Keycloak <code>26</code>. There are a few GitHub issues that indicate the features they plan to release, but there is not a comprehensive requirements or product feature plan available publicly.</p>
<p>It has been our goal since building this extension to have this approach to multi-tenancy built into Keycloak, and we have proven through many customers/user that is serves a real need. We're excited to see what they will build, and are flattered they have used our extension for inspiration.</p>
<p>We have several hundred customers and users of this extension, and there have been many asking about the future of this extension, given the above. We've put together these notes, and will continue to update them as we learn more.</p>
<ul>
<li>First of all, <strong>this extension is not going away</strong>. In addition to the fact we have long-term support agreements with many of our customers, we also don't currently have a picture of what Keycloak's implementation will ultimately look like.</li>
<li>We continue to believe that our (Phase Two's) value is in <strong>making Keycloak easy to use</strong>, primarily for an audience that is using it as a <strong>CIAM tool for enterprise SaaS applications</strong>. We have tailored the feature set to that audience, and will continue to build out tools on top of our own organizations extension, such as the <a href="https://github.com/p2-inc/phasetwo-admin-portal" target="_blank" rel="noopener noreferrer">admin portal</a> and <a href="https://github.com/p2-inc/idp-wizard" target="_blank" rel="noopener noreferrer">IdP wizards</a> to facilitate making your app enterprise-ready quickly.</li>
<li>We plan <strong>not to enable native Keycloak organizations</strong> in our hosted product, and it will be set (in env vars) off in our Docker images.</li>
<li>We have initiated a project to <strong>move our organizations (and other) admin UI tools outside of the Keycloak Admin UI</strong>. In addition to proving very time consuming because of the pace of breaking changes, we realized that we can iterate faster for customer value by building our own admin UI. More information on that coming soon.</li>
<li>We will continue to <strong>participate in discussions with RedHat</strong> and the Keycloak maintainers to advocate for our customers' needs and the features we have proven over &gt;3 years.</li>
<li>If there is <strong>eventually sufficient feature parity</strong> between native Keycloak organizations and this extension, <strong>we will provide a migration path</strong>.</li>
</ul>
<p>This will probably cause a lot of confusion as native Keycloak organizations is released. We appreciate the patience and support that customers and users have shown us, and we hope to continue to support you with <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">great Keycloak extensions and tools</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="open_source" term="open_source"/>
        <category label="release" term="release"/>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="organizations" term="organizations"/>
        <category label="multi_tenant" term="multi_tenant"/>
        <category label="multi_tenancy" term="multi_tenancy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing an Angular and Spring Boot Application with Keycloak]]></title>
        <id>https://phasetwo.io/blog/secure-spring-boot/</id>
        <link href="https://phasetwo.io/blog/secure-spring-boot/"/>
        <updated>2024-05-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to secure resources and access of an Angular and Spring Boot application using Keycloak for Authentication and Authorizationusing the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a> is a open-source tool which uses Java-based frameworks for building web applications.</p>
<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to secure an <a href="https://angular.io/" target="_blank" rel="noopener noreferrer">Angular</a> application and access secured resources from a Spring Boot Web application.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak" target="_blank" rel="noopener noreferrer">Spring Boot example</a>. We are also building <a href="https://github.com/p2-inc/examples" target="_blank" rel="noopener noreferrer">Keycloak examples</a> for other frameworks.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-spring-boot-project">Setting up a Spring Boot project<a class="hash-link" aria-label="Direct link to Setting up a Spring Boot project" title="Direct link to Setting up a Spring Boot project" href="https://phasetwo.io/blog/secure-spring-boot/#setting-up-a-spring-boot-project">​</a></h2>
<p>In order to setup a Spring Boot project, a JDK version must be chosen. As of the time of writing, to be inline with the latest changes from Keycloak 24, the Java 17 baseline will be used. Other JDK versions can also be used for developing the resource server according to the preference of the developer.</p>
<p>Starting with Spring Boot 2.x the Keycloak client adapters were deprecated. In Spring Boot 3.x we will use native functionalities of the <a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html" target="_blank" rel="noopener noreferrer"><code>spring-boot-oauth2-resource-server</code></a> to be able to configure the application security context.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="quick-start">Quick Start<a class="hash-link" aria-label="Direct link to Quick Start" title="Direct link to Quick Start" href="https://phasetwo.io/blog/secure-spring-boot/#quick-start">​</a></h3>
<p>To get this project up and running locally on your computer you can clone the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak" target="_blank" rel="noopener noreferrer">Spring Boot example</a> or follow the instructions below to generate a project from scratch.</p>
<ol>
<li>
<p>Set up the Spring Boot project.</p>
<p>To kickstart a project, we will use (and recommend) using the Spring Boot <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">Initializr</a>, a Web-based tool that provides a simple UI to generate the project.</p>
<p>Provide the following values to spring initializr for the project metadata:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Group: com.example</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Artifact: spring-boot-keycloak</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Name: spring-boot-keycloak</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Description: Demo project for Spring Boot</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Package name: com.example.spring-boot-keycloak</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" alt="Spring Boot Initializr" src="https://phasetwo.io/assets/images/2024-05-10-create-spring-boot-project-template-5b21d7b893781dfb86087822643d2f20.png" width="1850" height="1003" class="img_ev3q"></p>
</li>
<li>
<p>Add the required dependencies in spring initializr.</p>
<p>For the purpose of this project we will add the following dependencies:</p>
<ul>
<li>Oauth2 Resource Server</li>
<li>Spring Web</li>
<li>Spring Security</li>
</ul>
<p>This will result in the following lines within <code>build.gradle</code>.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">implementation 'org.springframework.boot:spring-boot-starter-security'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">implementation 'org.springframework.boot:spring-boot-starter-web'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Generate the project with those settings. Open the .zip in your preferred text editor.</p>
</li>
<li>
<p>Setup JDK 17 for the project. Follow instructions on the <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/" target="_blank" rel="noopener noreferrer">JDK setup</a> page.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/secure-spring-boot/#setting-up-a-keycloak-instance">​</a></h2>
<p>Before customizing the Spring Boot app, we need to set up and configure our Keycloak instance.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/secure-spring-boot/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/secure-spring-boot/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/secure-spring-boot/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="install-and-configure-spring-boot">Install and configure Spring Boot<a class="hash-link" aria-label="Direct link to Install and configure Spring Boot" title="Direct link to Install and configure Spring Boot" href="https://phasetwo.io/blog/secure-spring-boot/#install-and-configure-spring-boot">​</a></h2>
<p>Now that we've setup and configured Keycloak using <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">Phase Two</a> and cloned or created our Spring Boot application template, we will need to configure the project to leverage the capabilities provided by Keycloak.</p>
<ol>
<li>
<p>Configure application settings</p>
<p>Update your <code>application.yaml</code> configuration file with the Keycloak security configuration (it's possible your download includes a <code>application.properties</code> file instead).</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token key atrule">spring</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token key atrule">application</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> spring</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">boot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">keycloak</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token key atrule">security</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">oauth2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token key atrule">resourceserver</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token key atrule">issuer-uri</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> $http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">url/auth/realms/$your</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">realm</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token key atrule">jwk-set-uri</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">spring.security.oauth2.resourceserver.jwt.issuer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">uri</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain">/protocol/openid</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">connect/certs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Replace</p>
<ul>
<li><code>$http-keycloak-url</code> with the Keycloak URL from the Phase Two hosted Keycloak instance.</li>
<li><code>$your-realm</code> with the Keycloak realm created earlier in this tutorial.</li>
</ul>
<p>If you are using the local Keycloak instance from the cloned example, use the local address for <code>$http-keycloak-url</code>.</p>
<p>The below Java code omits any imports, reference our example for necessary imports or use your text editor to assist with populating the imports.</p>
</li>
<li>
<p>Configure Spring Boot resource server</p>
<p>Under <code>src.main.java.com.springbootkeycloak</code> create a new package, <code>config</code>, and create a class <code>SecurityConfig.java</code>. In this class, add the <code>HttpSecurity</code> settings:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@EnableWebSecurity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@EnableMethodSecurity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">SecurityConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">final</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">JwtClaimsConverter</span><span class="token plain"> jwtAuthConverter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">SecurityConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">JwtClaimsConverter</span><span class="token plain"> jwtAuthConverter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">jwtAuthConverter </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> jwtAuthConverter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@Bean</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">SecurityFilterChain</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">securityFilterChain</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">HttpSecurity</span><span class="token plain"> http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">throws</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Exception</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">authorizeHttpRequests</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authz </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                authz</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">requestMatchers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/api/**"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">authenticated</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">oauth2ResourceServer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">oauth2ResourceServer </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                oauth2ResourceServer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">jwtAuthenticationConverter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwtAuthConverter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">csrf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">AbstractHttpConfigurer</span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token function" style="color:rgb(130, 170, 255)">disable</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">sessionManagement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">session </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> session</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">sessionCreationPolicy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">SessionCreationPolicy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">STATELESS</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">build</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This configuration will make the Spring Boot act as an OAuth2 Resource Server's with JWT authentication. This configuration is part of the functionality provided by the <code>spring-boot-starter-oauth2-resource-server</code> dependency. Read more about it's configuration <a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-sansboot" target="_blank" rel="noopener noreferrer">here</a>.</p>
</li>
<li>
<p>Add JWT token convert configuration</p>
<p>In the same <code>config</code> package, create another class, <code>JwtClaimsConverter.java</code>. Add a converter for extracting the security context attributes from the <code>access_token</code> received from Keycloak.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@Component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">JwtClaimsConverter</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">implements</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Converter</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">Jwt</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:rgb(255, 203, 107)">AbstractAuthenticationToken</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">AbstractAuthenticationToken</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">convert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">Jwt</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> authorities </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">extractRealmRoles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">JwtAuthenticationToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> authorities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getPrincipalFromClaim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">private</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getPrincipalFromClaim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">Jwt</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> claimName </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"preferred_username"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">getClaim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">claimName</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">private</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Collection</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">GrantedAuthority</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">extractRealmRoles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">Jwt</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token class-name" style="color:rgb(255, 203, 107)">Map</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">String</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:rgb(255, 203, 107)">Object</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> resource </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">getClaim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"realm_access"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token class-name" style="color:rgb(255, 203, 107)">Collection</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">String</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> roles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">resource </span><span class="token operator" style="color:rgb(137, 221, 255)">==</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">null</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token operator" style="color:rgb(137, 221, 255)">||</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">roles </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">Collection</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">String</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> resource</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"roles"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">==</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Set</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">of</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> roles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">stream</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">role </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">SimpleGrantedAuthority</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"ROLE_"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> role</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">collect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token class-name" style="color:rgb(255, 203, 107)">Collectors</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">toSet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The provided example uses the <code>preferred_username</code> claim for populating the <em>principal</em> of the security context and the <code>realm_access.roles</code> to populate the <em>authorities</em>.</p>
<p>This configuration is part of the functionality provided by the <code>spring-boot-starter-oauth2-resource-server</code> dependency. Read more about it's configuration <a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-authorization-extraction" target="_blank" rel="noopener noreferrer">here</a>.</p>
</li>
<li>
<p>Create the secured API resources:</p>
<p>In <code>src.main.java.com.springbootkeycloak</code> create a new package, <code>web</code>, and create a new class <code>TestController.java</code>.</p>
<p>To test the security integration two resource endpoints are defined:</p>
<ul>
<li><code>/api/test/anonymous</code></li>
<li><code>/api/test/user</code></li>
</ul>
<p>Implemented with this code:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@RequestMapping</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/api/test"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">TestController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@RequestMapping</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">value </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/anonymous"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> method </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">RequestMethod</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">GET</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ResponseEntity</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">String</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getAnonymous</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ResponseEntity</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">ok</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"Hello Anonymous"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@PreAuthorize</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"hasRole('ROLE_user')"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token annotation punctuation" style="color:rgb(199, 146, 234)">@RequestMapping</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">value </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/user"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> method </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">RequestMethod</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">GET</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ResponseEntity</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token generics class-name" style="color:rgb(255, 203, 107)">String</span><span class="token generics punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getUser</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ResponseEntity</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">ok</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"Hello Secured with user role."</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because both endpoints have the prefix <code>/api</code> they will require a secure context in order to access them. Furthermore, the <code>/api/test/user</code> endpoint is secured using a predefined authority <code>ROLE_user</code>. This is a Realm role that can be created and applied to your example user from earlier in this tutorial.</p>
<p>This logic can be used to extend access and authorization to any part of the application.</p>
<p>Start the application running with <code>./gradlew bootRun</code>.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="testing-the-secured-endpoints">Testing the secured endpoints<a class="hash-link" aria-label="Direct link to Testing the secured endpoints" title="Direct link to Testing the secured endpoints" href="https://phasetwo.io/blog/secure-spring-boot/#testing-the-secured-endpoints">​</a></h3>
<p>The secured endpoints can be tested using <code>curl</code> with the <code>Authorization</code> header. The <code>Authorization</code> header must contain the <code>access_token</code>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl --location 'http://localhost:8080/api/test/anonymous' \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    --header 'Authorization: Bearer {{$access_token}}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl --location 'http://localhost:8080/api/test/user' \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    --header 'Authorization: Bearer {{$access_token}}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To generate an access token, you can use the <code>openid-connect/token</code> endpoint from Keycloak.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -X POST \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --location "https://$http-keycloak-url/auth/realms/$keycloak-realm/protocol/openid-connect/token" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  -H 'Content-Type: application/x-www-form-urlencoded' \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  -d 'username=$test-user&amp;password=$password&amp;grant_type=password&amp;client_id=$client-name&amp;client_secret=$client-secret'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Substitute the values from your Keycloak instance and test user for <code>$http-keycloak-url</code>, <code>$keycloak-realm</code>, <code>$test-user</code>, <code>$password</code>, <code>$client-name</code>, and <code>$client-secret</code>.</p>
<p>In the returned HTTP response, the <code>access_token</code> will be present. Use this token to test the secured endpoints in the example curl's above.</p>
<p>At this point, your Spring Boot application is secured with Keycloak, but there is no "Frontend" to the application. In the next section, we will add an Angular SPA to demonstrate sign-in with Keycloak.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integration-with-angular">Integration with Angular<a class="hash-link" aria-label="Direct link to Integration with Angular" title="Direct link to Integration with Angular" href="https://phasetwo.io/blog/secure-spring-boot/#integration-with-angular">​</a></h2>
<p>In order to access the secured resources of the Spring Boot server, we will create a client application which will authenticate our users. After Authentication, that user will then have access to the secured resources via their JWT token.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="generate-angular-application">Generate Angular Application<a class="hash-link" aria-label="Direct link to Generate Angular Application" title="Direct link to Generate Angular Application" href="https://phasetwo.io/blog/secure-spring-boot/#generate-angular-application">​</a></h3>
<p>Our <a href="https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak" target="_blank" rel="noopener noreferrer">Spring Boot example</a> already has a basic Angular application setup. We will use that for the rest of this setup.</p>
<p>In the example folder, open the <code>angularclient</code> folder.</p>
<p>If you do want to start your own Application, follow the instructions below:</p>
<ul>
<li>Setup a new Angular application following these <a href="https://angular.io/start" target="_blank" rel="noopener noreferrer">instructions</a></li>
<li>Use the Angular Oauth2 OIDC <a href="https://github.com/manfredsteyer/angular-oauth2-oidc" target="_blank" rel="noopener noreferrer">library</a> to integrate authentication and authorization.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="securing-views">Securing views<a class="hash-link" aria-label="Direct link to Securing views" title="Direct link to Securing views" href="https://phasetwo.io/blog/secure-spring-boot/#securing-views">​</a></h3>
<p>In the <code>/angularclient/src/app</code> folder, the <code>app.module.ts</code> file is the entry point for the Angular application. The Angular application will need to be configured in order to access user information only after authentication.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">@</span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">NgModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">declarations</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">AppComponent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">MainpageComponent</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">imports</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">BrowserModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">AppRoutingModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">FormsModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">HttpClientModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">OAuthModule</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">forRoot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">providers</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">provide</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">APP_INITIALIZER</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">useFactory</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> applicationInitializerFactory</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">deps</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">OAuthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">multi</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token literal-property property">provide</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">LOCAL_STORAGE_TOKEN</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">useFactory</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> localStorageFactory</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token literal-property property">provide</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">OAuthStorage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">useFactory</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> localStorageFactory</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">bootstrap</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">AppComponent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">AppModule</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The app is initialized with the <code>OAuthService</code> as a dependency. Tokens from the <code>OAuthService</code> are stored in the browser's <code>localStorage</code>.</p>
<p>To configure the <code>OAuthService</code>'s <code>authorization code</code> login flow with the <code>angular-oauth2-oidc</code> library add the following configuration:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">configure</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">configure</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// URL of the SPA to redirect the user to after login</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">redirectUri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">origin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/index.html"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// The SPA's id. The SPA is registered with this id at the auth-server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"$your-public-keycloak-client"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// set the scope for the permissions the client should request</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">scope</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"openid"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// url for  /.well-known/openid-configuration endpoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">issuer</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"http://$http-keycloak-url:8888/auth/realms/$your-keycloak-realm"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">disablePKCE</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//initialize the code flow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">responseType</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"code"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">showDebugInformation</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Replace <code>http-keycloak-url</code>, <code>$your-public-keycloak-client</code>, and <code>$your-keycloak-realm</code> with your actual Keycloak configurations.</p>
<p>Start the application with <code>npm run start</code></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="user-authentication">User Authentication<a class="hash-link" aria-label="Direct link to User Authentication" title="Direct link to User Authentication" href="https://phasetwo.io/blog/secure-spring-boot/#user-authentication">​</a></h4>
<p>In the <code>user.component.html</code> file, we authenticate the user to the logged in state and conditionally render the login and logout buttons.</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">isLoggedIn</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- Content for logged-in users --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-2 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Authenticated</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-md</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">userInfo</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">font-bold</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Username</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">: {{ userInfo.username }}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">font-bold</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Email</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">: {{ userInfo.email }}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">font-bold</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Roles</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">: {{ userInfo.roles }}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">p</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">[class]</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">buttonClasses</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">(click)</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">signOut()</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Sign Out</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">!isLoggedIn</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">class</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Not authenticated.</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">[class]</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">buttonClasses</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">(click)</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">signIn()</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">Sign In</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>the <code>isLoggedIn</code> function can be found in the <code>user.component.ts</code> file.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isLoggedIn</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">hasValidAccessToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Clicking the Log In or Log Out buttons will redirect to the Keycloak login page or log the user out.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-angular-guards-to-secure-routes">Use Angular guards to secure routes<a class="hash-link" aria-label="Direct link to Use Angular guards to secure routes" title="Direct link to Use Angular guards to secure routes" href="https://phasetwo.io/blog/secure-spring-boot/#use-angular-guards-to-secure-routes">​</a></h4>
<p>We can achieve route restriction by using guards. If the access token is not valid the guard will initiate the login flow. You could optionally apply this at the router level to enforce a full page login.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">AuthGuard</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">implements</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">CanActivate</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter keyword" style="font-style:italic">private</span><span class="token parameter"> </span><span class="token parameter literal-property property">oauthService</span><span class="token parameter operator" style="color:rgb(137, 221, 255)">:</span><span class="token parameter"> </span><span class="token parameter maybe-class-name">OAuthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">canActivate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">route</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">ActivatedRouteSnapshot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">state</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">RouterStateSnapshot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Observable</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">boolean </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token maybe-class-name">UrlTree</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">hasValidAccessToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">initLoginFlow</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">of</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/secure-spring-boot/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="spring_boot" term="spring_boot"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. Auth0, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/"/>
        <updated>2024-05-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus Auth0 and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-keycloak-as-an-alternative-to-auth0-for-authentication-solutions">Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions<a class="hash-link" aria-label="Direct link to Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions" title="Direct link to Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#exploring-keycloak-as-an-alternative-to-auth0-for-authentication-solutions">​</a></h2>
<p>When it comes to implementing authentication and authorization in web applications, Auth0 and Keycloak are two prominent solutions that offer robust security features. While Auth0 is a popular choice for many developers due to its comprehensive, cloud-based platform, Keycloak presents a compelling alternative, especially in terms of cost and flexibility. This blog post will delve into how Keycloak stacks up against Auth0, focusing on cost of ownership, architecture and deployment, maintenance, functionality, community and support.</p>
<p>In searching for information about Keycloak in relation to Auth0, many of the limitations brought up about Keycloak have been rapidly addressed over the last couple of years. Those articles will call out things brought up by G2 reviews that are over four years old. In terms of <a href="https://github.com/keycloak/keycloak/releases" target="_blank" rel="noopener noreferrer">Keycloak versions</a>, that is over 10 major versions behind. Be mindful when doing research about Keycloak and understanding what versions are being discussed. We do our best to make sure that information below reflects the most recent Keycloak versions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-ownership">Cost of Ownership<a class="hash-link" aria-label="Direct link to Cost of Ownership" title="Direct link to Cost of Ownership" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#cost-of-ownership">​</a></h3>
<p>There are many factors to think about with a total cost-of-ownership. We've written extensively about <a href="https://phasetwo.io/blog/open-source-iam/">choosing an Open-Source IAM</a> over a managed service.</p>
<p><strong>Auth0:</strong>
Auth0 operates on a subscription model, which can be quite enticing for startups or small projects with minimal authentication needs. It offers a free tier limited by the number of authentications per month, active users, MFA setups, and more. As needs quickly increase for a business to setup a modest number of IDP connections, include minimal additional "users" (which could be people or devices), extract logs, customize deployments, and more, those bills can quickly spiral into $100K+. For SMB's to Enterprise, dedicating that amount of resources to your Auth solution can be untenable.</p>
<p>Additionally, as the need to add more connections and functionality grows, so will one's cost. Features like SAML, LDAP, AD, the ability for customers to manage their own employees through the Okta identity cloud, or even the simple use of <a href="https://phasetwo.io/blog/set-up-magic-links/" target="_blank" rel="noopener noreferrer">magic link</a>, all necessitate instant shift to the Enterprise plan. Introducing basic features like immediately shift Auth0 accounts into a much pricier band. When building an application, having to continuously reevaluate the pricing for your vendor is cumbersome from a financial and process standpoint.</p>
<p>Recently, price-per-user (MAU) of Auth0 went up by 300% from $0.023 to $0.07. The financial burden this is placing on existing customers and new customers is extremely high.</p>
<p><strong>Keycloak:</strong>
Keycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Leveraging Phase Two's managed hosting provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application's needs grow, Keycloak quickly becomes a far more cost-effective choice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="architecture-and-deployment">Architecture and Deployment<a class="hash-link" aria-label="Direct link to Architecture and Deployment" title="Direct link to Architecture and Deployment" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#architecture-and-deployment">​</a></h3>
<p><strong>Auth0:</strong></p>
<p>Auth0 primarily functions as a cloud-based service, providing a hassle-free setup without the need for managing infrastructure. This approach favors organizations looking for quick deployment and minimal maintenance efforts. However, enterprises often require on-premise solutions due to strict regulatory and data residency requirements.</p>
<p>Auth0 is a cloud-based service, which can provide less initial setup and configuration of infrastructure. This helps with doing a quick deployment and relieving organizations of the DevOps burden of a system.</p>
<p><strong>Keycloak</strong></p>
<p>Keycloak can be deployed as an on-premise solution or via a <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">cloud service</a>. Because it provides full control over the deployment environment, it conforms to any compliance and data sovereignty needs. Enterprises needing to adapt the solution to their environments, can adopt Keycloak knowing it will work. From an infrastructure standpoint, Keycloak may initially take more time but it also provides a very straightforward way to integrate applications.</p>
<p><strong>Winner</strong></p>
<p>Depends. If you need on-premise, Keycloak is a better option. For a hosted option, either is a strong choice. Keycloak has some flexibility allowing you to host yourself or leverage a service like Phase Two's [hosting]((<a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/hosting/</a>).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="maintenance">Maintenance<a class="hash-link" aria-label="Direct link to Maintenance" title="Direct link to Maintenance" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#maintenance">​</a></h3>
<p><strong>Auth0:</strong>
One of the main advantages of Auth0 is that being a managed service, it requires minimal maintenance from the user's side. The Auth0 team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date.</p>
<p><strong>Keycloak:</strong>
Conversely, Keycloak requires more attention since it's self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.</p>
<p><strong>Winner</strong></p>
<p>Auth0.</p>
<p>As a fully managed service, Auth0 abstracts away this work.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#functionality-and-flexibility">​</a></h3>
<p><strong>Auth0:</strong>
Auth0 offers a wide range of authentication features out-of-the-box, including social logins, enterprise federation, database connections, and more. It supports a variety of standards like OAuth2, OpenID Connect, and SAML, making it highly versatile for modern web applications. The platform also provides robust analytics and real-time monitoring tools that can be crucial for understanding user behavior and mitigating potential security threats.</p>
<p>While Auth0 offer customization through its Actions framework, it can quickly become difficult to manage additional logic outside of the main application via API interaction.</p>
<p><strong>Keycloak:</strong>
Keycloak matches Auth0 in terms of functionality, supporting similar authentication protocols and user federation. It also offers customizable user interfaces for login, registration, and account management, which can be tailored to match the specific needs of a business. Being open-source, Keycloak allows developers to modify the codebase and integrate with other systems more freely than Auth0, offering a higher degree of customization at the cost of additional developer effort.</p>
<p>A key feature of keycloak is it's ability to be <a href="https://phasetwo.io/product/onprem/">hosted on-premise</a> in a variety of ways. This means that as you choose to deploy something within your own systems, you'll be able to do this with Keycloak. If your requirements include an on-premise solution, <a href="https://phasetwo.io/blog/identity-brokering-on-prem/">learn more</a> about this how Keycloak can help with user management and identity brokering for on-premise.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Auth0 and Keycloak offer much of the same functionality for Authentication and Authorization, however Keycloak is extremely flexible to extend and configure. It's a system that can adjust and grow with an application. Lastly, the ability to host Keycloak on-premise makes it a strong option for companies.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-keycloak-with-external-systems-like-auth0">Integrating Keycloak with External Systems like Auth0<a class="hash-link" aria-label="Direct link to Integrating Keycloak with External Systems like Auth0" title="Direct link to Integrating Keycloak with External Systems like Auth0" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#integrating-keycloak-with-external-systems-like-auth0">​</a></h3>
<p>For organizations looking to transition from Auth0 to Keycloak or integrate Keycloak with systems that are already using Auth0, Keycloak's flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Auth0 and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Auth0 for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.</p>
<p>The identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Auth0. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Auth0 simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which One Is Best for Me?<a class="hash-link" aria-label="Direct link to Which One Is Best for Me?" title="Direct link to Which One Is Best for Me?" href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/#which-one-is-best-for-me">​</a></h3>
<p>Choosing between Auth0 and Keycloak largely depends on your organization’s specific needs and capabilities. Auth0 is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.</p>
<p>Both platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.</p>
<p>Ultimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosting options</a> that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control. <strong>Leveraging Keycloak means that ongoing costs are relatively fixed</strong>, since concerns about user growth or feature needs don't have to factor into every decision.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="auth0" term="auth0"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing SvelteKit Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/</id>
        <link href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/"/>
        <updated>2024-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a SvelteKit application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a SvelteKit application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/sveltekit" target="_blank" rel="noopener noreferrer">SvelteKit example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#setting-up-a-keycloak-instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-sveltekit-project">Setting up a SvelteKit Project<a class="hash-link" aria-label="Direct link to Setting up a SvelteKit Project" title="Direct link to Setting up a SvelteKit Project" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#setting-up-a-sveltekit-project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two SvelteKit example code here, but the logic could easily be applied to any existing application.</p></div></div>
<ol>
<li>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</li>
<li>Open the SvelteKit <a href="https://github.com/p2-inc/examples/tree/main/frameworks/sveltekit" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/sveltekit</code>.</li>
<li>Run <code>npm install</code> and then <code>npm run dev</code>. This example leverages <a href="https://github.com/nextauthjs/next-auth" target="_blank" rel="noopener noreferrer">@auth/sveltekit</a> to provide HOC support.</li>
<li>The project makes use of the following SvelteKit items: hooks, components, layout, and <code>@auth/sveltekit</code> module. We'll review each in kind.</li>
<li>We'll review where we configure out Keycloak instance. Open the <code>src/auth.ts</code> file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the <strong>Client secret</strong> from the OIDC client creation section for the value of <code>clientSecret</code>.</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Use Environment Variables AUTH_SECRET in prod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authjsSecret </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token string" style="color:rgb(195, 232, 141)">"f18d48ce9bea32e44b5591b2c89185729d4559435f77ca76872a83a0850563a4"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> realm </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shared-deployment-001"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> kcConfig </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Use Environment Variables AUTH_KEYCLOAK_ISSUER in prod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  issuer</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">https://usw2.auth.ac/auth/realms/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">realm</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Paste "Client id" here. Use Environment Variables AUTH_KEYCLOAK_ID in prod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reg-example-1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Paste "Client secret" here. Use Environment Variables AUTH_KEYCLOAK_ISSUER in prod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientSecret</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"CLIENT_SECRET"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Those are used to popluate the config for the provider <code>Keycloak</code>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> handle</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> signIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> signOut </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">SvelteKitAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  trustHost</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  secret</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> authjsSecret</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  providers</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token function" style="color:rgb(130, 170, 255)">Keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">kcConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="6">
<li>Next, let's review the hooks (<code>src/hooks.server.ts</code>) file. This imports the <code>handle</code> method by the <code>src/auth.ts</code> and re-exports it. This allows the hooks to act as a middleware and include the authentication status of the user in each request.</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token exports"> handle </span><span class="token exports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./auth.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="7">
<li>To retrieve the authentication status of the user in server-side rendering on the index route, it's using the <code>+layout.server.ts</code> file. It retrieves the authentication status via the <code>getSession</code> function from <a href="https://kit.svelte.dev/docs/types#app-locals" target="_blank" rel="noopener noreferrer">SvelteKit Locals</a> set by <code>src/hook.server.ts</code>.</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token maybe-class-name">LayoutServerLoad</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./$types.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> load</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">LayoutServerLoad</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> session </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">locals</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getSession</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    session</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="8">
<li>The server-side authentication data is then accessed inside the <code>+page.svelte</code>, and then passed onto the user (<code>src/components/user.svelte</code>) component as follows:</li>
</ol>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">script</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">lang</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">ts</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token script language-javascript">  </span><span class="token script language-javascript keyword module" style="font-style:italic">import</span><span class="token script language-javascript"> </span><span class="token script language-javascript imports maybe-class-name">User</span><span class="token script language-javascript"> </span><span class="token script language-javascript keyword module" style="font-style:italic">from</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:rgb(195, 232, 141)">"$components/user.svelte"</span><span class="token script language-javascript punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token script language-javascript">  </span><span class="token script language-javascript keyword module" style="font-style:italic">import</span><span class="token script language-javascript"> type </span><span class="token script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token script language-javascript"> </span><span class="token script language-javascript maybe-class-name">LayoutServerData</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token script language-javascript"> </span><span class="token script language-javascript keyword module" style="font-style:italic">from</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:rgb(195, 232, 141)">"./$types.js"</span><span class="token script language-javascript punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token script language-javascript" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token script language-javascript">  </span><span class="token script language-javascript keyword module" style="font-style:italic">export</span><span class="token script language-javascript"> </span><span class="token script language-javascript keyword" style="font-style:italic">let</span><span class="token script language-javascript"> </span><span class="token script language-javascript literal-property property">data</span><span class="token script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript maybe-class-name">LayoutServerData</span><span class="token script language-javascript punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token script language-javascript"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">script</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">// ... Rest of the index route ... // </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">User</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">data</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">{{</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name namespace" style="color:rgb(178, 204, 214)">user:</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">data?.session?.user,</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)"></span><span class="token tag attr-name namespace" style="color:rgb(178, 204, 214)">status:</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Boolean(data?.session),</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">}}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The props, <strong>user</strong> and <strong>status</strong> represent the user information object and whether the user is signed in, respectively.</p>
<ol start="9">
<li>At this point our entire application will be able to access all information and methods needed to perform authentication. View <code>src/components/user.svelte</code> for exactly how the code is authenticating your user. The sections rendering the <strong>Log in</strong> and <strong>Log out</strong> buttons are conditional areas based on the authenticated context. The buttons invoke server-side APIs provided by <code>@auth/sveltekit</code>.</li>
</ol>
<p>The logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.</p>
<ol start="10">
<li>Open <a href="http://localhost:3000/" target="_blank" rel="noopener noreferrer">localhost:3000</a>. You will see the Phase Two example landing page. You current state should be <strong>Not authenticated</strong>. Click <strong>Log In</strong>. This will redirect you to your login page.</li>
</ol>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Use the non-admin user created in the previous section to sign in.</p></div></div>
<ol start="11">
<li>Enter the credentials of the non-admin user you created. Click <strong>Submit</strong>. You will then be redirected to the application. The Phase Two example landing page now loads your <strong>Authenticated</strong> state, displaying your user's email and name.</li>
<li>Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-sveltekit/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="sveltekit" term="sveltekit"/>
        <category label="svelte" term="svelte"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Remix Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/</id>
        <link href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/"/>
        <updated>2024-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Remix application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a Remix application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/remix" target="_blank" rel="noopener noreferrer">Remix example</a>. We also have a plain <a href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs" target="_blank" rel="noopener noreferrer">React example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#setting-up-a-keycloak-instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-remix-project">Setting up a Remix Project<a class="hash-link" aria-label="Direct link to Setting up a Remix Project" title="Direct link to Setting up a Remix Project" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#setting-up-a-remix-project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two Remix example code here, but the logic could easily be applied to any existing application.</p></div></div>
<ol>
<li>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</li>
<li>Open the Remix <a href="https://github.com/p2-inc/examples/tree/main/frameworks/remix" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/remix</code>.</li>
<li>Run <code>npm install</code> and then <code>npm run dev -- --port 3000</code>. This example leverages <a href="https://github.com/sergiodxa/remix-auth" target="_blank" rel="noopener noreferrer">remix-auth</a> and <a href="https://github.com/marsmars0x01/remix-keycloak" target="_blank" rel="noopener noreferrer">remix-keycloak</a> to provide HOC support.</li>
<li>Open the <code>app/services/keycloak.server.ts</code> file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the <strong>Client secret</strong> from the OIDC client creation section for the value of <code>clientSecret</code>:</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> kcConfig </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  useSSL</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  domain</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"usw2.auth.ac/auth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  realm</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shared-deployment-001"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientID</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reg-example-1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientSecret</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"CLIENT_SECRET"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Paste "Client secret" here. Use Environment variables in prod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  callbackURL</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"http://localhost:3000/auth/keycloak/callback"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Those are used to popluate the config for the <code>KeycloakStrategy</code>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">KeycloakStrategy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">kcConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> profile </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> profile</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The config is then used with the Authenticator instance in the <code>app/services/auth.server.ts</code> file. The authenticator instance uses the Session Storage to manage the state of authentication via a cookie.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Authenticator</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"remix-auth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">keycloakServer</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./keycloak.server"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> </span><span class="token imports dom variable" style="color:rgb(191, 199, 213)">sessionStorage</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"~/services/session.server"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authenticator </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Authenticator</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token dom variable" style="color:rgb(191, 199, 213)">sessionStorage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">authenticator</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">use</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">keycloakServer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At this point our entire application will be able to access all information and methods needed to perform authentication. View the <code>session.server.ts</code> file for additional information about how the <code>SessionStorage</code> is used. The <code>SessionStorage</code> stores the Keycloak token and is used to derive the authenticated state. View <code>user.tsx</code> for exactly how the code is authenticating your user. The sections rendering the <strong>Log in</strong> and <strong>Log out</strong> buttons are conditional areas based on the authenticated context. The buttons invoke server-side APIs provided by <code>remix-auth</code>.</p>
<p>The logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.</p>
<ol start="5">
<li>
<p>Open <a href="http://localhost:3000/" target="_blank" rel="noopener noreferrer">localhost:3000</a>. You will see the Phase Two example landing page. You current state should be <strong>Not authenticated</strong>. Click <strong>Log In</strong>. This will redirect you to your login page.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Use the non-admin user created in the previous section to sign in.</p></div></div>
</li>
<li>
<p>Enter the credentials of the non-admin user you created. Click <strong>Submit</strong>. You will then be redirected to the application. The Phase Two example landing page now loads your <strong>Authenticated</strong> state, displaying your user's email and name.</p>
</li>
<li>
<p>Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/instant-user-management-and-sso-for-remix/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="remix" term="remix"/>
        <category label="react" term="react"/>
        <category label="reactjs" term="reactjs"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Presentation on Multi-Tenancy within a Single Realm in Keycloak]]></title>
        <id>https://phasetwo.io/blog/keycloak-orgs-presentation/</id>
        <link href="https://phasetwo.io/blog/keycloak-orgs-presentation/"/>
        <updated>2024-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A detailed talk on how the Phase Two Organization Keycloak extension provides a single realm multi-tenancy solution for modern Saas Applications.]]></summary>
        <content type="html"><![CDATA[<p>We recently gave a talk at the <a href="https://www.keycloak-day.dev/" target="_blank" rel="noopener noreferrer">Keycloak DevDay 2024</a> conference in Frankfurt on our <a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Organizations</a> extension which provides single Realm multi-tenancy to Keycloak for modern SaaS applications. The hosts of the conference have posted the <a href="https://www.youtube.com/watch?v=DNq51wWw3F4" target="_blank" rel="noopener noreferrer">video of the talk</a> on Youtube.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DNq51wWw3F4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>
<p>Take a look, and try it out today with our <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">free hosted Keycloak</a> instances that run all of our <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">open source Keycloak extensions</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="release" term="release"/>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="organizations" term="organizations"/>
        <category label="multi_tenancy" term="multi_tenancy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Customize Email Templates in Keycloak]]></title>
        <id>https://phasetwo.io/blog/customizing-email-templates/</id>
        <link href="https://phasetwo.io/blog/customizing-email-templates/"/>
        <updated>2024-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Customize email templates and branding for use in Keycloak]]></summary>
        <content type="html"><![CDATA[<p>Keeping your brand consistent across user touch-points is important to modern Saas companies. Just like customizing <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">Login Pages</a>, customizing your email templates is just as important. Keycloak has a number of <a href="https://phasetwo.io/docs/getting-started/email#content-templates" target="_blank" rel="noopener noreferrer">templates</a> which can be customized.</p>
<p>Keycloak starts out with simple text templates, but unless you like spending your days looking at Unix terminals, you probably prefer some color and images in your emails.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="template-customization">Template Customization<a class="hash-link" aria-label="Direct link to Template Customization" title="Direct link to Template Customization" href="https://phasetwo.io/blog/customizing-email-templates/#template-customization">​</a></h2>
<p>Phase Two exposes an interface in the Admin UI to adjust the HTML and Text template. In the Styles &gt; <em>Emails</em> tab, select a template to edit.</p>
<p><img decoding="async" loading="lazy" alt="Customizing Email Template Example" src="https://phasetwo.io/assets/images/2024-04-08-email-templates-c50c9cb2331197e3d5aa918692ca2861.png" width="2064" height="1674" class="img_ev3q"></p>
<p>Enter the new HTML for the HTML template along with a matching Text template.</p>
<p>Using a test user, visit the flow of the templates you changed to have those emails sent to you and confirm you're happy with your changes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example-template">Example Template<a class="hash-link" aria-label="Direct link to Example Template" title="Direct link to Example Template" href="https://phasetwo.io/blog/customizing-email-templates/#example-template">​</a></h2>
<p>The Attributes theme in our Phase Two deployment automatically make use of these themes. The <a href="https://github.com/p2-inc/keycloak-themes" target="_blank" rel="noopener noreferrer">sample template</a> can be customized to fit your need. All you have to do is adjust the CSS colors and inject a link to your hosted logo file somewhere. There is a content section which you can copy/paste the default content from Keycloak into and customize. A simple HTML preview of the template lets you get an idea of how it will look.</p>
<p><img decoding="async" loading="lazy" alt="Email example template" src="https://phasetwo.io/assets/images/2024-04-08-email-example-phaseII-b6cde8898bbf96df764fe118abdb046d.png" width="1682" height="1162" class="img_ev3q"></p>
<h1>Success</h1>
<p>Kaboom! Done. We challenge you to tell us the last time a change in Keycloak was that easy 💪</p>
<p>As always, our success is based on the success of our customers. We hope this extension and guide has helped you update the default Keycloak email branding to match that of your needs. If you have suggestions for further improvement of this feature, please reach out on <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">GitHub</a>!</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="idp_wizard" term="idp_wizard"/>
        <category label="on_prem" term="on_prem"/>
        <category label="private_cloud" term="private_cloud"/>
        <category label="email" term="email"/>
        <category label="customization" term="customization"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[User Management and Identity Brokering for On-Prem Apps]]></title>
        <id>https://phasetwo.io/blog/identity-brokering-on-prem/</id>
        <link href="https://phasetwo.io/blog/identity-brokering-on-prem/"/>
        <updated>2024-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A deep-dive into the process to use an open-source software, Keycloak, to solve an important need of Identity Brokering within modern Saas applications.]]></summary>
        <content type="html"><![CDATA[<p>With many companies racing into the cloud, very little is written about the huge opportunity, and potential pitfalls of building software for on-prem and private cloud deployments. With the growing Kubernetes and CNCF ecosystems, the balance point to justify self-hosting is constantly shifting. This is great news for companies that must host data and applications inside the enterprise. For software vendors looking to serve this exploding market, authentication can be a blind spot.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-story-inspired-by-customer-use-cases">A story, inspired by customer use cases:<a class="hash-link" aria-label="Direct link to A story, inspired by customer use cases:" title="Direct link to A story, inspired by customer use cases:" href="https://phasetwo.io/blog/identity-brokering-on-prem/#a-story-inspired-by-customer-use-cases">​</a></h3>
<blockquote>
<p>You’ve built a successful enterprise SaaS product, and your cloud offering has taken off. Recently, you’ve been getting inquiries from government agencies, large companies in regulated industries, and foreign companies – all of which have legal, compliance or regulatory requirements that prohibit them from using your product in the cloud.</p>
<p>Given the size of the opportunity, you’ve decided to go for it. Your team has packaged your application up as a set of Kubernetes manifests, making changes, replacing cloud services with open source alternatives, and even built out a runbook to help your devops peers at the customer operate it themselves.</p>
<p>The big day comes, and you’re installing at your first customer. You expect that there will be some minor bumps along the way, but their first question just flattens you: “How do we connect this to our in-house identity provider?” It was a question that was never on your radar, but now it’s the most important thing for the customer.</p>
<p>Like most SaaS companies, you’re probably either hand-rolling your authentication and user management using something like Passport.js, Devise, Django, etc., using some social login options, or using a cloud-only service like Auth0 or WorkOS. If you had implemented SAML, the most common protocol for just-in-time user provisioning with enterprise identity providers, you probably went for a basic approach. You wrongly assumed that user management and identity brokering would be easier for on-prem.</p>
<p>You throw some engineering and customer success resources at the problem, but quickly realize it’s not a scalable solution. The customer wants to map their groups, and manage access and authorization through <em>their</em> IdP. Just the overhead of connecting to every possible type of IdP, and supporting that for every customer, will eat up your margin before they start using your application.</p>
</blockquote>
<p>The <strong>good news</strong> is that you’re not alone in missing this key enterprise need. Many companies who are new to on-prem and private cloud deployments learn this the hard way, many without losing customers.</p>
<p>However, the reality is that for an application that is used by an entire enterprise, who can use it (authentication) and how (authorization) is equally as important for on-prem applications as cloud. And, being hosted and operated by your customer, simplicity of management and transparency is more important than cloud.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="an-open-source-solution-to-the-rescue">An open source solution to the rescue<a class="hash-link" aria-label="Direct link to An open source solution to the rescue" title="Direct link to An open source solution to the rescue" href="https://phasetwo.io/blog/identity-brokering-on-prem/#an-open-source-solution-to-the-rescue">​</a></h3>
<p>Fortunately, there is feature complete identity and access management system that is equally at home both on-premise and in the cloud. It can easily facilitate identity brokering with the customer identity provider, as well as give their IT staff access to critical access and operational information.</p>
<p>At Phase Two, we’ve had a front row seat in solving this problem. Our customers have deployed <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a>, bundled with their application to over 300 of their customer sites. In these deployments, Keycloak is used for identity brokering to the customer identity provider, SSO authentication for all of their deployed applications, and role and access management to broker and manage authorization within their applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tools-to-empower-the-customer">Tools to empower the customer<a class="hash-link" aria-label="Direct link to Tools to empower the customer" title="Direct link to Tools to empower the customer" href="https://phasetwo.io/blog/identity-brokering-on-prem/#tools-to-empower-the-customer">​</a></h3>
<p>In addition to solving these core challenges, Phase Two has built <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">tools</a> to extend enterprise <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">use-cases</a> and facilitate <a href="https://phasetwo.io/product/adminportal" target="_blank" rel="noopener noreferrer">customer onboarding</a>, one of the biggest drags on Customer Success hours, and ultimately a huge margin drain.</p>
<p>To this end, the most valuable tool, from our customers’ perspectives is our <a href="https://github.com/p2-inc/idp-wizard" target="_blank" rel="noopener noreferrer">Identity Provider Setup Wizard</a>. This tool is meant as a guide for customers’ initial IdP connection, turning an esoteric form into a clear step-by-step process for specific IDPs (what keys to get, where to store them, and so on). This had previously been the long pole in the onboarding tent. By giving the customers a tool to self-configure and manage their own IdP connection, Phase Two has gifted back valuable Customer Success hours and margin dollars.</p>
<p><img decoding="async" loading="lazy" src="https://github.com/p2-inc/idp-wizard/assets/244253/e9b421c0-b487-4c07-9eed-87ea89fc574b" alt="idp-wizard-video-gif" class="img_ev3q"></p>
<p>We conveniently bundle all of these tools in <a href="https://github.com/p2-inc/phasetwo-containers" target="_blank" rel="noopener noreferrer">Docker images</a> for easy deployment.</p>
<p>Does the above story sound familiar, or something you might be stumbling into? <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">Contact sales</a> to find out how we can help your journey to on-prem be as painless as possible and supercharge your customer identity onboarding process.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="idp_wizard" term="idp_wizard"/>
        <category label="on_prem" term="on_prem"/>
        <category label="private_cloud" term="private_cloud"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...]]></title>
        <id>https://phasetwo.io/blog/open-source-iam/</id>
        <link href="https://phasetwo.io/blog/open-source-iam/"/>
        <updated>2024-03-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Keycloak is a financially sustainable, open source alternative to many paid identity and access management providers.]]></summary>
        <content type="html"><![CDATA[<p>In today's digital landscape, managing user identities and securing access to applications and services is paramount for businesses of all sizes. As the demand for robust identity and access management (IAM) solutions grows, so does the market, with various commercial options vying for attention. When we first started using <a href="https://keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> over 7 years ago, we were surprised that there was a relatively unknown, but completely open-source alternative to commercial offerings in the Identity and Access Management market.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="commercial-offerings">Commercial offerings<a class="hash-link" aria-label="Direct link to Commercial offerings" title="Direct link to Commercial offerings" href="https://phasetwo.io/blog/open-source-iam/#commercial-offerings">​</a></h3>
<p>Companies such as <a href="https://www.auth0.com/" target="_blank" rel="noopener noreferrer">Auth0</a>, <a href="https://www.okta.com/" target="_blank" rel="noopener noreferrer">Okta</a>, Microsoft (through <a href="https://www.microsoft.com/en-us/security/business/microsoft-entra" target="_blank" rel="noopener noreferrer">AzureAD</a>) had created cloud authentication services, and helped bring standardization to the market through implementation of standards, such as OIDC, SAML, SCIM, LDAP, etc. However, there was little differentiation among them, and despite their pricing models, were essentially commodities that were the same.</p>
<p>Amazon released <a href="https://aws.amazon.com/cognito" target="_blank" rel="noopener noreferrer">AWS Cognito</a>, which did price it as a commodity, but failed so miserably in UI and developer ergonomics, that it failed to reach a dominant market position despite its de minimis cost.</p>
<p>More recently, nascent companies such as <a href="https://workos.com/" target="_blank" rel="noopener noreferrer">WorkOS</a> and <a href="https://www.frontegg.com/" target="_blank" rel="noopener noreferrer">Frontegg</a>, while casting themselves as CIAM and “SSO made easy” to enterprise SaaS customers, are really just repackaging the same IAM features and protocol implementations that have been available in Keycloak for years. Furthermore, the pricing models have tilted back towards predatory on your company’s business model.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-advantages">Keycloak advantages<a class="hash-link" aria-label="Direct link to Keycloak advantages" title="Direct link to Keycloak advantages" href="https://phasetwo.io/blog/open-source-iam/#keycloak-advantages">​</a></h3>
<p>Amidst this landscape, open-source alternatives like Keycloak are emerging as powerful contenders, offering unique advantages over their commercial counterparts. Because the market has settled on standard protocols, it opened the door for superior open-source implementations to emerge with feature parity and standards compliance. Keycloak stands out as an alternative to commercial IAM solutions, enabling your business to unlock both flexibility and control.</p>
<ol>
<li><strong>Open Source Foundation:</strong> At the heart of Keycloak lies its open-source nature. Developed by Red Hat, Keycloak provides a fully-fledged IAM solution that is freely available for anyone to use, modify, and extend according to their requirements. This open ethos empowers organizations with unparalleled flexibility and control over their identity infrastructure, without being tied to proprietary vendors or licensing agreements. Furthermore, given the core security requirements of the protocol implementations, developing in the open gives customers the reassurance that the code has been audited by others, unlike closed source, buggy, commercial implementations that come with zero transparency or guarantees.</li>
<li><strong>Cost-Effectiveness:</strong> One of the most significant advantages of Keycloak is its cost-effectiveness. Unlike commercial IAM solutions that operate on subscription-based pricing models, Keycloak eliminates licensing fees, enabling organizations to allocate resources more efficiently. With Keycloak, businesses can scale their identity infrastructure without worrying about escalating SSO, authentication, and other costs, making it an attractive option for startups, small businesses, and enterprises alike.</li>
<li><strong>Customization and Extensibility:</strong> Keycloak stands out for its robust customization and extensibility capabilities. From authentication flows and user federation to role-based access control (RBAC) and fine-grained permissions, Keycloak provides a plethora of features that can be tailored to suit specific use cases and compliance requirements. Moreover, its modular architecture and comprehensive API support facilitate seamless integration with existing systems and third-party services, empowering developers to build bespoke identity solutions with ease.</li>
<li><strong>On-Premise and Cloud Deployment:</strong> Whether organizations prefer on-premise deployment for enhanced security and compliance or cloud-based solutions for scalability and convenience, Keycloak offers the flexibility to meet diverse deployment needs. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.</li>
<li><strong>Active Community and Support:</strong> Backed by a vibrant community of developers and contributors, Keycloak benefits from ongoing enhancements, bug fixes, and feature additions. This active ecosystem fosters innovation and collaboration, with users sharing best practices, troubleshooting tips, and extensions through forums, mailing lists, and code repositories. Additionally, organizations seeking professional support and services can leverage expertise of a growing ecosystem of companies providing support, ensuring reliable deployment and ongoing maintenance of their Keycloak instances.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-disadvantages">Keycloak disadvantages<a class="hash-link" aria-label="Direct link to Keycloak disadvantages" title="Direct link to Keycloak disadvantages" href="https://phasetwo.io/blog/open-source-iam/#keycloak-disadvantages">​</a></h3>
<p>So, given Keycloak's inherent advantages, while solving all of the same problems, why has it failed to receive broad market adoption? Looking back, and polling our customer base, it seems that Keycloak has suffered from a couple of barriers:</p>
<ol>
<li><strong>Awareness:</strong> Other than a couple of markets (e.g. Germany) Keycloak is still relatively unknown. Because it’s not a commercial entity, there isn’t a content marketing engine that focuses on discovery for common use cases.</li>
<li><strong>Onboarding</strong>: Documentation for getting successful for common use cases is fragmented and often hard to find. When solving a new problem, examples are a great way to get a developer “hooked”, but these are largely missing from official Keycloak documentation.</li>
<li><strong>Community</strong>: Because the core Keycloak developers have largely been working for one customer (RedHat) and not the community at large, developers who are exploring Keycloak for the first time can find it hard to know where to ask question. While the Discourse, GitHub, Slack and mailing lists are a good direction, there’s not a definitive way to get support.</li>
<li><strong>UI</strong>: The Keycloak Admin UI, while complete, is intimidating to new users. Unlike the commercial alternatives, that have invested resources in building and measuring customer success into their UIs, while Keycloak’s attitude has been "<a href="https://en.wikipedia.org/wiki/RTFM" target="_blank" rel="noopener noreferrer">RTFM</a>". Furthermore, the user facing UIs of Keycloak are notoriously “rough edged”, commercial alternatives are beautiful, modern, and capable of easy customization and branding.</li>
</ol>
<p>Obviously, we think that the barriers are something that can be solved, and <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two</a> has been working hard in its <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">open source extensions</a> and <a href="https://phasetwo.io/#pricing" target="_blank" rel="noopener noreferrer">cloud offerings</a> to overcome these barriers. We've already made great strides, and believe that we're at the point where customers can realize the above advantages, while compromising relatively little -- All while achieving tremendous cost savings in SSO, authentication, and user manangement.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="migrating-to-keycloak-from-your-current-identity-provider">Migrating to Keycloak from your current identity provider<a class="hash-link" aria-label="Direct link to Migrating to Keycloak from your current identity provider" title="Direct link to Migrating to Keycloak from your current identity provider" href="https://phasetwo.io/blog/open-source-iam/#migrating-to-keycloak-from-your-current-identity-provider">​</a></h3>
<p>Already using one of the commercial systems? Keycloak is a complete, robust and mature identity solution that can replace your identity provider and user management systems <strong>today</strong>. It has complete parity with all of the major features of commercial IAM systems, and because of reliance on standards, migration is easier than you think. By migrating to Keycloak, you gain full control over your authentication and authorization processes, enabling seamless integration, customization, and scalability tailored to your organization's unique needs.</p>
<p>Phase two has implemented <a href="https://phasetwo.io/docs/user-migration/" target="_blank" rel="noopener noreferrer">user migration</a> support in the product for all tiers. This is meant to ease your transition from your existing user management system so that migration can occur incrementally with a complete fallback plan.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-support">Keycloak Support<a class="hash-link" aria-label="Direct link to Keycloak Support" title="Direct link to Keycloak Support" href="https://phasetwo.io/blog/open-source-iam/#keycloak-support">​</a></h3>
<p>Configuring, integrating, and operating an Identity and Access Management (IAM) system can be a daunting task, especially for those new to Keycloak. For Premium and Enterprise subscribers, we include migration support. Whether you're a hosted or on-prem customer, or have your own Keycloak deployment, Phase Two can support your goals from configuration and integration to operation and maintenance. Don't let the complexities of IAM hold you back. <a href="email:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">Contact us today</a> to learn more about how we can support your Keycloak journey and take your organization to the next level.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://phasetwo.io/blog/open-source-iam/#conclusion">​</a></h3>
<p>In a landscape dominated by commercial IAM solutions, Keycloak shines as a compelling alternative that combines the power of open source with enterprise-grade features and flexibility. With its cost-effectiveness, customization capabilities, deployment flexibility, and active community support, Keycloak empowers organizations to take control of their identity infrastructure, unlock new possibilities, and adapt to evolving security and compliance requirements. Whether you're a startup looking to bootstrap your identity management or an enterprise seeking to streamline operations, Keycloak offers a compelling solution that puts you in the driver's seat of your IAM journey.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="auth0" term="auth0"/>
        <category label="workos" term="workos"/>
        <category label="okta" term="okta"/>
        <category label="cognito" term="cognito"/>
        <category label="keycloak_support" term="keycloak_support"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management]]></title>
        <id>https://phasetwo.io/blog/keycloak-on-cockroachdb/</id>
        <link href="https://phasetwo.io/blog/keycloak-on-cockroachdb/"/>
        <updated>2023-12-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two's CockroachDB multi-region Database support for Keycloak provides a scalable, resilient, open-source identity and access management solution.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Keycloak Phase Two CockroachDb Logos" src="https://phasetwo.io/assets/images/2023-12-06-keycloak-on-cockroachdb-kcpluscrdb-7f7d695702b7bfdf50100646b7133da8.png" width="500" height="256" class="img_ev3q"></p>
<p><a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> has been a leader in the Identity and Access Management (IAM) world since its launch almost 9 years ago. The market for IAM tools had several commercial offerings that failed to meet many business model and price needs, and Keycloak filled the hole with an open-source offering.</p>
<p>Fast-forward to today, Keycloak still leads with mature protocol implementations, hardened security, and a reliable architecture that has been battle-tested for years, under the stewardship of the maintainers at <a href="https://www.redhat.com/" target="_blank" rel="noopener noreferrer">Red Hat</a>. Whether deploying an in-house identity provider, or a user management system for a SaaS offering, Keycloak is an obvious choice.</p>
<p>With time, customer needs have evolved to include greater resiliency, expanded database selection, deploying in multiple regions, and operating across clouds. Because of operational complexity and architectural barriers, the Keycloak team decided to embark on a project to build a new underlying storage architecture. While promising, the project has taken longer than expected, and has yet to produce a production-ready result.</p>
<p>One of the great aspects of open source, is that it allows anyone to participate. About 18 months ago, <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two</a> decided to implement support for CockroachDB for the existing storage architecture in order to meet this growing customer demand.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="remind-me-what-is-phase-two">Remind me, what is Phase Two?<a class="hash-link" aria-label="Direct link to Remind me, what is Phase Two?" title="Direct link to Remind me, what is Phase Two?" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#remind-me-what-is-phase-two">​</a></h2>
<p>Phase Two helps SaaS builders accelerate time-to-market and enterprise adoption with powerful SSO, identity and user management features. To that end, Phase Two has created an enhanced distribution of Keycloak that bundles several essential <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">open source extensions</a> for modern SaaS use cases. Phase Two supports hosted and on-premise customers for a variety of use cases.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-built-support-for-cockroachdb">How we built support for CockroachDB<a class="hash-link" aria-label="Direct link to How we built support for CockroachDB" title="Direct link to How we built support for CockroachDB" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#how-we-built-support-for-cockroachdb">​</a></h2>
<p>We eagerly dove into the challenge of adding CockroachDB support, but we quickly encountered a few key issues:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-sql">1. SQL<a class="hash-link" aria-label="Direct link to 1. SQL" title="Direct link to 1. SQL" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#1-sql">​</a></h4>
<p>Keycloak internally uses the <a href="https://hibernate.org/" target="_blank" rel="noopener noreferrer">Hibernate ORM framework</a>, which generates the SQL for the database type selected (called a "dialect" by them). Fortunately for us, the <a href="https://www.cockroachlabs.com/" target="_blank" rel="noopener noreferrer">Cockroach Labs</a> team had already built a custom <a href="https://www.cockroachlabs.com/blog/building-support-for-java-orm-hibernate-in-cockroachdb/" target="_blank" rel="noopener noreferrer">CockroachDB Hibernate dialect</a> that we were able to use without modification.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-migrations">2. Migrations<a class="hash-link" aria-label="Direct link to 2. Migrations" title="Direct link to 2. Migrations" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#2-migrations">​</a></h4>
<p>The <a href="https://www.liquibase.org/" target="_blank" rel="noopener noreferrer">Liquibase</a> library is used by Keycloak for tracking, managing, and applying database schema changes. However, the authors had not anticipated adding support for entirely new database types without making code changes. We had to add CRDB, the Hibernate dialect, and the correct JDBC driver classes to the code to enable first-class support.</p>
<p>We ported the migrations that were incompatible with CRDB. This was required because of a few SQL semantics that are not supported in CRDB the same way they are in PostgreSQL.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-transactions">3. Transactions<a class="hash-link" aria-label="Direct link to 3. Transactions" title="Direct link to 3. Transactions" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#3-transactions">​</a></h4>
<p>Because CRDB uses <a href="https://www.cockroachlabs.com/docs/stable/transactions#serializable-isolation" target="_blank" rel="noopener noreferrer">serializable isolation</a> by default, it was incompatible with Keycloak's use of distributed ("XA") or two-phase commit ("JTA") transaction managers. However, because the use of these is not necessary outside of an environment where other applications are using the same resources, it was possible to disable them. The Keycloak team was helpful in adding some environment variables to disable these, as they had also seen other database use cases that required it.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-an-incredible-team">4. An <strong>Incredible</strong> Team<a class="hash-link" aria-label="Direct link to 4-an-incredible-team" title="Direct link to 4-an-incredible-team" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#4-an-incredible-team">​</a></h4>
<p>It also wouldn't have been possible to complete the changes without tireless support from the Cockroach Labs engineering team. They patiently helped us understand how CRDB is different, wrote code examples and tests, and were never shy about giving us access to everyone in the organization, regardless of level and how busy they were.</p>
<p>A <strong>HUGE</strong> thank you to the whole Cockroach team!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-it-work">How does it work?<a class="hash-link" aria-label="Direct link to How does it work?" title="Direct link to How does it work?" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#how-does-it-work">​</a></h2>
<p>About 12 months ago, we launched our self-service, free product, built on our CRDB port and running on Cockroach Labs' managed serverless product. Over that period, we've provided over 900 free deployments, without a single production incident for both CockroachDB serverless and Phase Two enhanced Keycloak.</p>
<p>Furthermore, we've built out a test system that we run prior to releasing new versions in order to ensure that there are no regressions compared to the main Keycloak distributions. We run that test system and several benchmarks prior to releasing each new version of our fork.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-this-important-now">Why is this important now?<a class="hash-link" aria-label="Direct link to Why is this important now?" title="Direct link to Why is this important now?" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#why-is-this-important-now">​</a></h2>
<p>The Keycloak team had embarked on an ambitious project over 2 years ago to completely overhaul the storage architecture. The so-called "map store" was designed, among other things, to provide a basis for high-availability by replicating data with multiple data centers. However, after that time period, there was still a lot of uncertainty and risk involved in getting to the point where the store was production ready. Thus the team decided to drop the project. <a href="https://www.keycloak.org/2023/10/map-store-removal" target="_blank" rel="noopener noreferrer">See the announcement</a>.</p>
<p>That leaves Phase Two's CRDB support in a unique position, as it is the only version of Keycloak that will support Cockroach's multi-region database.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="take-me-to-it">Take me to it!<a class="hash-link" aria-label="Direct link to Take me to it!" title="Direct link to Take me to it!" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#take-me-to-it">​</a></h2>
<p>We get it! Here are a few links to help you jump-start your work:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-keycloak-managed-hosting">1. Keycloak Managed Hosting<a class="hash-link" aria-label="Direct link to 1. Keycloak Managed Hosting" title="Direct link to 1. Keycloak Managed Hosting" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#1-keycloak-managed-hosting">​</a></h4>
<p>Phase Two provides self-service deployments of Keycloak hosted on multiple clouds. <a href="https://phasetwo.io/#pricing" target="_blank" rel="noopener noreferrer">Plans</a> start with a free version for testing and small production use cases. Dedicated clusters are available for customers requiring an SLA, isolated resources, and the ability to grow into larger use cases.</p>
<p>The database tier for our shared and dedicated clusters uses the <a href="https://www.cockroachlabs.com/lp/serverless-database-p" target="_blank" rel="noopener noreferrer">CockroachDB serverless</a> service. Working with Cockroach Labs gives us the expertise and reliability of hosting thousands of customer clusters at a massive scale.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-community-distribution">2. Community Distribution<a class="hash-link" aria-label="Direct link to 2. Community Distribution" title="Direct link to 2. Community Distribution" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#2-community-distribution">​</a></h4>
<p>If you're more DIY, and you're planning to run everything yourself, the base distribution image that contains our changes to Keycloak to enable CockroachDB support is available in the Phase Two <a href="https://quay.io/repository/phasetwo/keycloak-crdb?tab=info" target="_blank" rel="noopener noreferrer">Keycloak CockroachDB docker repository</a>. It's a drop-in replacement for Keycloak that doesn't require much configuration beyond the <a href="https://www.keycloak.org/guides" target="_blank" rel="noopener noreferrer">official guides</a>. We generally release a version within 1-2 days of the official Keycloak release.</p>
<p>For the impatient, we've also put together a complete <a href="https://github.com/p2-inc/phasetwo-containers/blob/main/examples/cockroach/docker-compose.yml" target="_blank" rel="noopener noreferrer">docker compose</a> example that includes a single node CockroachDB instance. You can also modify the configuration to use your own CockroachDB dedicated or serverless database.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-future">The Future<a class="hash-link" aria-label="Direct link to The Future" title="Direct link to The Future" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#the-future">​</a></h2>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-on-crdb">Keycloak on CRDB<a class="hash-link" aria-label="Direct link to Keycloak on CRDB" title="Direct link to Keycloak on CRDB" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#keycloak-on-crdb">​</a></h4>
<p>Because of the uncertainty around the direction of the Keycloak storage architecture, Phase Two is committed to maintaining support for the "legacy store" and our port to CRDB for the long term.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="phase-two-and-cockroach-labs">Phase Two and Cockroach Labs<a class="hash-link" aria-label="Direct link to Phase Two and Cockroach Labs" title="Direct link to Phase Two and Cockroach Labs" href="https://phasetwo.io/blog/keycloak-on-cockroachdb/#phase-two-and-cockroach-labs">​</a></h4>
<p>Many of our on-premise, support customers with large use cases asked us to build out a solution for massive-scale, fault-tolerant, multi-region use cases. One of the great parts of building support for Keycloak's existing storage architecture for CRDB is that we've been able to explore use cases that were previously impossible using the standard Keycloak distribution. For use cases with these requirements, plus global proximity to users and regional failover, we built global clusters, backed by CRDB multi-region database, for which we are now in Beta.</p>
<p>We're excited to see what you build with Keycloak and CRDB!</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="cockroach" term="cockroach"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Vue Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/</id>
        <link href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/"/>
        <updated>2023-09-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Vue application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a Vue application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/vue" target="_blank" rel="noopener noreferrer">Vue example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#setting-up-a-keycloak-instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-vuejs-project">Setting up a Vue.js Project<a class="hash-link" aria-label="Direct link to Setting up a Vue.js Project" title="Direct link to Setting up a Vue.js Project" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#setting-up-a-vuejs-project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two Vue example code here, but the logic could easily be applied to any existing application.</p></div></div>
<p>This example uses <a href="https://vuejs.org/" target="_blank" rel="noopener noreferrer">Vue.js</a>. We're going to leverage <a href="https://www.npmjs.com/package/oidc-client-ts" target="_blank" rel="noopener noreferrer"><code>oidc-client-ts</code></a> to integrate OIDC authentication with the Vue app. The <a href="https://www.npmjs.com/package/oidc-client-ts" target="_blank" rel="noopener noreferrer"><code>oidc-client-ts</code></a> package is a well-maintained and used library. It provides a lot of utilities for building out a fully production app.</p>
<ol>
<li>
<p>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</p>
</li>
<li>
<p>Open the Vue <a href="https://github.com/p2-inc/examples/tree/main/frameworks/vue" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/vue</code> and open the <code>/nuxt/oidc-client-ts</code> folder.</p>
</li>
<li>
<p>Run <code>npm install</code> and then <code>npm run dev</code>.</p>
</li>
<li>
<p>We'll review where we configure out Keycloak instance. First open <code>/auth.ts</code>. In this file you will want to update it with the values for the Keycloak instance we set-up earlier in the tutorial. Update the <code>clientSecret</code> with the value. Use and environment variable here if you wish.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">export const keycloakConfig = {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  authorityUrl: "https://euc1.auth.ac",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  applicationUrl: "http://localhost:3000",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  realm: "shared-deployment-001",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId: "reg-example-1",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientSecret: "CLIENT_SECRET",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">};</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After the config, you can see how the OIDC instance is started.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> settings </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">authority</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">keycloakConfig</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">authorityUrl</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/auth/realms/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">keycloakConfig</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">realm</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">client_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> keycloakConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">clientId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">client_secret</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> keycloakConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">clientSecret</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/auth</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">silent_redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/silent-refresh</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">post_logout_redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">response_type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"code"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">userStore</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">WebStorageStateStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">loadUserInfo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">userManager</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">UserManager</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">settings</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>With the Keycloak instance defined, we attach this to the app instance for Vue. Switch to <code>/main.ts</code></p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Auth</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@/auth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">app</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">globalProperties</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token maybe-class-name">Auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We pull in the <code>Auth</code> instance then expose it through the <code>$auth</code> variable.</p>
</li>
<li>
<p>There are a few main pages in play here that we define to create paths the library can leverage. The <code>/view/auth</code> and <code>/view/silent-refresh</code> create paths at the same name. These are used to do the redirection during authentication. From within these we use the <code>Auth</code> instance to direct the user around within the app. For instance in <code>/views/AuthView</code>:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"AuthAuthenticated"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">mounted</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signinCallback</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">push</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>router.push</code> naively sends someone to the home page. This could be updated to go to any number of places, including the page one started the login flow from if you were to store that information to be retrieved.</p>
</li>
<li>
<p>Now that we have all the things setup, we can define the user component <code>/components/User</code> to easily pull information about the user's state and display the appropriate UI.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"UserComponent"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">user</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword null nil" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">signIn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signinRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">logout</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signoutRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">created</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getUser</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With this, the user object is now easily available. A simple <code>v-if="user"</code> allows the app to determine what UI to show.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-vue/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="nuxt" term="nuxt"/>
        <category label="vue" term="vue"/>
        <category label="vuejs" term="vuejs"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Nuxt Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/</id>
        <link href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/"/>
        <updated>2023-09-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Nuxt application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a Nuxt application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/nuxt" target="_blank" rel="noopener noreferrer">Nuxt example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#setting-up-a-keycloak-instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-nuxt-project">Setting up a Nuxt Project<a class="hash-link" aria-label="Direct link to Setting up a Nuxt Project" title="Direct link to Setting up a Nuxt Project" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#setting-up-a-nuxt-project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two Nuxt example code here, but the logic could easily be applied to any existing application.</p></div></div>
<p>This example uses Nuxt3. There are a couple methods by which you can integrate Keycloak to your Nuxt application. We're going to explore two methods here, one uses <a href="https://www.npmjs.com/package/keycloak-js" target="_blank" rel="noopener noreferrer"><code>keycloak-js</code></a> and the other leverages <a href="https://www.npmjs.com/package/oidc-client-ts" target="_blank" rel="noopener noreferrer"><code>oidc-client-ts</code></a>. The <code>keycloak-js</code> library provides a simple, client-only method, but lacks some of the sophistication provided by the <code>oidc-client</code> library that is heavily supported and more widely used.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-keycloak-js">Using <code>keycloak-js</code><a class="hash-link" aria-label="Direct link to using-keycloak-js" title="Direct link to using-keycloak-js" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#using-keycloak-js">​</a></h3>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>For this example, we need to disable "Client Authentication" in the OIDC client that was setup earlier. This is available under Client &gt; Settings &gt; Capability config &gt; Client authentication to OFF.</p></div></div>
<ol>
<li>
<p>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</p>
</li>
<li>
<p>Open the Nuxt <a href="https://github.com/p2-inc/examples/tree/main/frameworks/nuxt" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/nuxt</code> and open the <code>keycloak-js</code> folder within <code>/frameworks/nuxt/keycloak-js</code>.</p>
</li>
<li>
<p>Run <code>npm install</code> and then <code>npm run dev</code>. <a href="https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter" target="_blank" rel="noopener noreferrer"><code>keycloak-js</code></a> is a Javascript library that provides a fast way to secure an application.</p>
</li>
<li>
<p>The project makes use of the following Nuxt items: components, composables, layouts, and plugins. We'll review each in kind.</p>
</li>
<li>
<p>The main component that shows the User's authenticated state is in <code>/components/User</code>. In this component we call the <code>useKeycloak</code> composable, which let's us key into the <code>keycloak-js</code> functions that we've wrapped to make easily availble.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> authState </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useKeycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">login</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">login</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">logout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">logout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Lower in the file the component leverages <code>v-if</code> checks to determine if the <code>authState</code> is <code>authenticated</code> or not. Depending on the state, a Log in or Log out button is available.</p>
</li>
<li>
<p>Let's take a look at the setup for the composable next. Our composable is in <code>/composables/keycloak-c</code>. A composable is a function defined that can be called anywhere in the Nuxt application. It's a good way to abstract logic to be reused. In our case we use it to wrap a <code>keycloak-js</code> plugin (more on that in the next step) and help provided a state value for the authenticated state.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">useKeycloak</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> nuxtApp </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useNuxtApp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> keycloak </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> nuxtApp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$keycloak</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">as</span><span class="token plain"> </span><span class="token maybe-class-name">Keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authState </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"authState"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"unAuthenticated"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method-variable function-variable method function property-access" style="color:rgb(130, 170, 255)">onAuthSuccess</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">value</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"authenticated"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method-variable function-variable method function property-access" style="color:rgb(130, 170, 255)">onAuthError</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">value</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"error"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    authState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>In the plugin, <code>/plugins/keycloak.client.ts</code> we instantiate the <code>keycloak-js</code> library. We can then attach that instance to the <code>NuxtApp</code> instance. Substitute the correct values for your Keycloak instance that we created earlier in the tutorial.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">defineNuxtPlugin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">nuxtApp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token literal-property property">initOptions</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">KeycloakConfig</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">url</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://euc1.auth.ac/auth/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">realm</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shared-deployment-001"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reg-example-1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> keycloak </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">initOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  nuxtApp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$keycloak</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  keycloak</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">init</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">onLoad</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"check-sso"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>The logic for checking the <code>authenticated</code> state can be used to expand in ways to secure your site in a number of ways.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-oidc-client">Using <code>oidc-client</code><a class="hash-link" aria-label="Direct link to using-oidc-client" title="Direct link to using-oidc-client" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#using-oidc-client">​</a></h3>
<p>The <a href="https://www.npmjs.com/package/oidc-client-ts" target="_blank" rel="noopener noreferrer"><code>oidc-client-ts</code></a> package is a well-maintained and used library. It provides a lot of utilities for building out a fully production app.</p>
<ol>
<li>
<p>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</p>
</li>
<li>
<p>Open the Nuxt <a href="https://github.com/p2-inc/examples/tree/main/frameworks/nuxt" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/nuxt</code> and open the <code>/nuxt/oidc-client-ts</code> folder.</p>
</li>
<li>
<p>Run <code>npm install</code> and then <code>npm run dev</code>.</p>
</li>
<li>
<p>The structure of the project is similar to the <code>keycloak-js</code> version but with a the use of services, stores, and middleware.</p>
</li>
<li>
<p>We'll review where we configure out Keycloak instance. First open <code>/services/keycloak-config.ts</code>. In this file you will want to update it with the values for the Keycloak instance we set-up earlier in the tutorial. Make sure you are using the one with Client Authentication enabled. Update the <code>clientSecret</code> with the value. Use and environment variable here if you wish.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">export const keycloakConfig = {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  authorityUrl: "https://euc1.auth.ac",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  applicationUrl: "http://localhost:3000",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  realm: "shared-deployment-001",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId: "reg-example-1",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientSecret: "CLIENT_SECRET",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">};</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Switch over to the <code>/services/auth-service</code> now to see how the Oidc instance is started. The class pulls in values from the <code>keycloakConfig</code> to use in the constructor. The other functions are wrappers around methods provided by the <code>oidc-client</code> library. This allows us to key into things like <code>signInRedirect</code> and <code>signoutRedirect</code>.</p>
<p>How the settings are integrated:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> settings </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">authority</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">keycloakConfig</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">authorityUrl</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/auth/realms/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">keycloakConfig</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">realm</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">client_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> keycloakConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">clientId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">client_secret</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> keycloakConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">clientSecret</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/auth</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">silent_redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">/silent-refresh</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">post_logout_redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">location</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">origin</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">response_type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"code"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">userStore</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">WebStorageStateStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">loadUserInfo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">userManager</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">UserManager</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">settings</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Example function wrapper:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">public</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">signInRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">userManager</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signinRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>With the <code>AuthService</code> defined, we can now expose that through a composable. Switch to the <code>/composables/useServices</code> file. The file is simple but provides a way for any component to hook into the service instance.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">AuthService</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@/services/auth-service"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">ApplicationService</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@/services/application-service"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useAuth </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@/stores/auth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">useServices</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authStore </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">$auth</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">AuthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">$application</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">ApplicationService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">access_token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We pull in the <code>AuthService</code> then expose it through the <code>$auth</code> variable. The <code>$application</code> variable exposes the <code>ApplicationService</code> which is provided as an example of how you could secure API calls.</p>
</li>
<li>
<p>We leverage the <a href="https://pinia.vuejs.org/" target="_blank" rel="noopener noreferrer"><code>pinia</code></a> library to make store User information to make it easily accessible. Open <code>/stores/auth/index</code>. From within this file, we can wrap the <code>User</code> object exposed by the <code>oidc-client</code> package. This can then be leveraged in the middleware function we want to define or to pull information quickly about the user.</p>
</li>
<li>
<p>There are a few main pages in play here that we define to create paths the library can leverage. The <code>/pages/auth</code>, <code>/pages/logout</code>, <code>/pages/silent-refresh</code> create paths at the same name. These are used to do the redirection during authentication or log out. From within these we use the <code>AuthService</code> to direct the user around within the app. For instance in <code>/auth</code>:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">authenticateOidc</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> services</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signInCallback</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">push</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">authenticateOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>router.push</code> naively sends someone to the home page. This could be updated to go to any number of places, including the page one started the login flow from if you were to store that information to be retrieved.</p>
</li>
<li>
<p>We have also created a middleware file in <code>/middleware/auth.global</code> to be used in a couple of ways. It checks if the user is authenticated and based on that knowledge, stores the user information in the store (if not there) or could be used to send someone to login. For our example, we created buttons to initiate that but there is a comment which shows how you could force a set of paths to require login.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authFlowRoutes </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">"/auth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/silent-refresh"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/logout"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">defineNuxtRouteMiddleware</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">to</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> </span><span class="token parameter keyword module" style="font-style:italic">from</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authStore </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> services </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useServices</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> services</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getUser</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">as</span><span class="token plain"> </span><span class="token maybe-class-name">User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">user </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">authFlowRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">includes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">to</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">path</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// use this to automatically force a sign in and redirect</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// services.$auth.signInRedirect();</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    authStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">setUpUserCredentials</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Now that we have all the things setup, we can define the user component <code>/components/User</code> to easily pull information about the user's state and display the appropriate UI.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authStore </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> authStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">signIn</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> services</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signInRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">signOut</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> services</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">$auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">logout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With this, the user object is now easily available. A simple <code>v-if="user"</code> allows the app to determine what UI to show.</p>
</li>
<li>
<p>A bit more complicated of a setup, but more elegant in the handling of the logged in flow. The <code>oidc-client</code> allows for much better fine-tuning of the experience.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-nuxt/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="nuxt" term="nuxt"/>
        <category label="vue" term="vue"/>
        <category label="vuejs" term="vuejs"/>
        <category label="nuxt" term="nuxt"/>
        <category label="nuxtjs" term="nuxtjs"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Web Authentication with Keycloak]]></title>
        <id>https://phasetwo.io/blog/secure-django/</id>
        <link href="https://phasetwo.io/blog/secure-django/"/>
        <updated>2023-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Django application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener noreferrer">Django</a> is a high-level, open-source web framework for building web applications using the Python programming language. It follows the Model-View-Controller (MVC) architectural pattern.</p>
<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to secure a Django Web application.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/django" target="_blank" rel="noopener noreferrer">Django example</a>. We are also building <a href="https://github.com/p2-inc/examples" target="_blank" rel="noopener noreferrer">Keycloak examples</a> for other frameworks.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-django-project">Setting up a Django Project<a class="hash-link" aria-label="Direct link to Setting up a Django Project" title="Direct link to Setting up a Django Project" href="https://phasetwo.io/blog/secure-django/#setting-up-a-django-project">​</a></h2>
<p>The following could be applied to an existing Django application, but we have chosen to use the excellent tutorial application built by <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django" target="_blank" rel="noopener noreferrer">Mozilla</a> as our example. If you aren't yet familiar with Django, we encourage you to follow the tutorial there.</p>
<p>The completed code for that tutorial is available in their GitHub repository. We'll clone it to get started.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="quick-start">Quick Start<a class="hash-link" aria-label="Direct link to Quick Start" title="Direct link to Quick Start" href="https://phasetwo.io/blog/secure-django/#quick-start">​</a></h3>
<p>To get this project up and running locally on your computer:</p>
<ol>
<li>Set up the <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/development_environment" target="_blank" rel="noopener noreferrer">Python development environment</a>.
We recommend using a Python virtual environment.</li>
<li>Assuming you have Python setup, run the following commands (if you're on Windows you may use <code>py</code> or <code>py -3</code> instead of <code>python</code> to start Python):<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">pip install -r requirements.txt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py makemigrations</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py migrate</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py collectstatic</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py test # Run the standard tests. These should all pass.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py createsuperuser # Create a superuser</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">python manage.py runserver</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>Open a browser to <code>http://127.0.0.1:8000/admin/</code> to open the admin site</li>
<li>Create a few test objects of each type.</li>
<li>Open tab to <code>http://127.0.0.1:8000</code> to see the main site, with your new objects.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance" href="https://phasetwo.io/blog/secure-django/#setting-up-a-keycloak-instance">​</a></h2>
<p>Before customizing the Django app, we need to set up and configure our Keycloak instance.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client" href="https://phasetwo.io/blog/secure-django/#setting-up-an-oidc-client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to On.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config with Authentication" src="https://phasetwo.io/assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png" width="3000" height="1909" class="img_ev3q"></p>
<p>Click <strong>Next</strong>.</p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config" href="https://phasetwo.io/blog/secure-django/#oidc-config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
<li>
<p>You also need to copy the <strong>Client secret</strong> in the <strong>Credential</strong> tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Client Secret" src="https://phasetwo.io/assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png" width="3492" height="2212" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User" href="https://phasetwo.io/blog/secure-django/#adding-a-non-admin-user">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="install-and-configure-the-django-oidc-library">Install and configure the Django OIDC library<a class="hash-link" aria-label="Direct link to Install and configure the Django OIDC library" title="Direct link to Install and configure the Django OIDC library" href="https://phasetwo.io/blog/secure-django/#install-and-configure-the-django-oidc-library">​</a></h2>
<p>Now that we've installed and configured Keycloak, we need to setup Django to replace the native authentication method provided by the framework. The first task is to install a library that is compatible with Keycloak's OIDC implementation.</p>
<p>The <a href="https://mozilla-django-oidc.readthedocs.io/" target="_blank" rel="noopener noreferrer">mozilla-django-oidc</a> library provides an easy way to integrate Keycloak (or any OpenID Connect-compliant identity provider) with your Django app. It abstracts many of the complexities of integrating authentication and authorization. Here's how you can set it up:</p>
<ol>
<li>
<p><strong>Install the Package</strong>:
Install the <code>mozilla-django-oidc</code> package using pip:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">pip install mozilla-django-oidc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p><strong>Configure Django Settings</strong>:
Update your Django app's <code>settings.py</code> to include the necessary configurations for <code>mozilla-django-oidc</code>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">INSTALLED_APPS </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'django.contrib.auth'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'mozilla_django_oidc'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Load after django.contrib.auth</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">AUTHENTICATION_BACKENDS </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'mozilla_django_oidc.auth.OIDCAuthenticationBackend'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_RP_CLIENT_ID </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'your-client-id'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_RP_CLIENT_SECRET </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'your-client-secret'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_OP_AUTHORIZATION_ENDPOINT </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/auth'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_OP_TOKEN_ENDPOINT </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/token'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_OP_USER_ENDPOINT </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/userinfo'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_OP_JWKS_ENDPOINT </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/certs'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_RP_SIGN_ALGO </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'RS256'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LOGIN_URL </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'oidc_authentication_init'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LOGOUT_REDIRECT_URL </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'/'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LOGIN_REDIRECT_URL </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'/'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Replace <code>your-client-id</code>, <code>your-client-secret</code>, and the Keycloak URLs with your actual Keycloak configurations.</p>
</li>
<li>
<p><strong>Add URLs</strong>:
Update your Django app's <code>urls.py</code> to include the authentication URLs provided by <code>mozilla-django-oidc</code>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">urlpatterns </span><span class="token operator" style="color:rgb(137, 221, 255)">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    path</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'oidc/'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> include</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'mozilla_django_oidc.urls'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-it-in-your-app">Using it in your app<a class="hash-link" aria-label="Direct link to Using it in your app" title="Direct link to Using it in your app" href="https://phasetwo.io/blog/secure-django/#using-it-in-your-app">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="protect-your-views">Protect your views<a class="hash-link" aria-label="Direct link to Protect your views" title="Direct link to Protect your views" href="https://phasetwo.io/blog/secure-django/#protect-your-views">​</a></h3>
<p>Use Decorators for Access Control. You can now use the <code>@oidc_protected</code> decorator to protect views that require authentication and potentially specific roles:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> mozilla_django_oidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">decorators </span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> oidc_protected</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(199, 146, 234)">@oidc_protected</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">protected_view</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">request</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Your view logic</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="accessing-user-information">Accessing user information<a class="hash-link" aria-label="Direct link to Accessing user information" title="Direct link to Accessing user information" href="https://phasetwo.io/blog/secure-django/#accessing-user-information">​</a></h3>
<p>You can access user information after authentication using the <code>request.oidc_user</code> attribute. For example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">profile_view</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">request</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    user_info </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> request</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">oidc_user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">userinfo</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Access user_info['sub'], user_info['email'], etc.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Your view logic</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By default, <code>mozilla-django-oidc</code> looks up a Django user matching the email field to the email address returned in the user info data from Keycloak.</p>
<p>If a user logs into your site and doesn’t already have an account, by default, <code>mozilla-django-oidc</code> will create a new Django user account. It will create the User instance filling in the username (hash of the email address) and email fields.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-username-rather-than-email">Use Username rather than Email<a class="hash-link" aria-label="Direct link to Use Username rather than Email" title="Direct link to Use Username rather than Email" href="https://phasetwo.io/blog/secure-django/#use-username-rather-than-email">​</a></h4>
<p><code>mozilla-django-oidc</code> defaults to setting up Django users using the email address as the user name from keycloak was required. Fortunately, <code>preferred_username</code> is set up by default in Keycloak as a claim. The claim can used by overriding the <code>OIDCAuthenticationBackend</code> class in <code>mozilla_django_oidc.auth</code> and referring to this in <code>AUTHENTICATION_BACKENDS</code> as below:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Classes to override default OIDCAuthenticationBackend (Keycloak authentication)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> mozilla_django_oidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">auth </span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> OIDCAuthenticationBackend</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">KeycloakOIDCAuthenticationBackend</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">OIDCAuthenticationBackend</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> </span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">create_user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">""" Overrides Authentication Backend so that Django users are</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">         created with the keycloak preferred_username.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">         If nothing found matching the email, then try the username.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">     """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">super</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">KeycloakOIDCAuthenticationBackend</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">create_user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">first_name </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'given_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">last_name </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'family_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">email </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'email'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">username </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'preferred_username'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">save</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> user</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> </span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">filter_users_by_claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">""" Return all users matching the specified email.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">         If nothing found matching the email, then try the username</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">     """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     email </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'email'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     preferred_username </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'preferred_username'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">not</span><span class="token plain"> email</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">UserModel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">objects</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">none</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     users </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">UserModel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">objects</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token builtin" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">email__iexact</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">email</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">len</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">users</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">not</span><span class="token plain"> preferred_username</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">             </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">UserModel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">objects</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">none</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         users </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">UserModel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">objects</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token builtin" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">username__iexact</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">preferred_username</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> users</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> </span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">update_user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">first_name </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'given_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">last_name </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'family_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">email </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'email'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">username </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'preferred_username'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">save</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> user</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In settings.py, overide the new library you have just added in AUTHENTICATION_BACKENDS :</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># mozilla_django_oidc - Keycloak authentication</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"fragalysis.auth.KeycloakOIDCAuthenticationBackend"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="logging-out">Logging out<a class="hash-link" aria-label="Direct link to Logging out" title="Direct link to Logging out" href="https://phasetwo.io/blog/secure-django/#logging-out">​</a></h3>
<p>You can use the <code>@oidc_logout</code> decorator to log the user out of both your app and Keycloak:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> mozilla_django_oidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">decorators </span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> oidc_logout</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(199, 146, 234)">@oidc_logout</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">logout_view</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">request</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Your logout view logic</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="add-support-for-django-rest-framework">Add support for Django Rest Framework<a class="hash-link" aria-label="Direct link to Add support for Django Rest Framework" title="Direct link to Add support for Django Rest Framework" href="https://phasetwo.io/blog/secure-django/#add-support-for-django-rest-framework">​</a></h2>
<p>Django Rest Framework (DRF) is a flexible toolkit built on top of Django, specifically designed for building RESTful APIs.</p>
<p>If you want DRF to authenticate users based on an OAuth access token provided in the Authorization header, you can use the DRF-specific authentication class which ships with the package.</p>
<p>Add this to your settings:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">REST_FRAMEWORK </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">'mozilla_django_oidc.contrib.drf.OIDCAuthentication'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">'rest_framework.authentication.SessionAuthentication'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># other authentication classes, if needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that this only takes care of authenticating against an access token, and provides no options to create or renew tokens.</p>
<p>If you’ve created a custom Django OIDCAuthenticationBackend and added that to your AUTHENTICATION_BACKENDS, the DRF class should be smart enough to figure that out. Alternatively, you can manually set the OIDC backend to use:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">OIDC_DRF_AUTH_BACKEND </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'mozilla_django_oidc.auth.OIDCAuthenticationBackend'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more" href="https://phasetwo.io/blog/secure-django/#learning-more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="django" term="django"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
</feed>