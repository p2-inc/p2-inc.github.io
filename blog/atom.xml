<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://phasetwo.io/blog/</id>
    <title>Phase Two - Managed Keycloak Hosting and Enterprise Support Blog</title>
    <updated>2025-02-25T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://phasetwo.io/blog/"/>
    <subtitle>Phase Two - Managed Keycloak Hosting and Enterprise Support Blog</subtitle>
    <icon>https://phasetwo.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Keycloak SAML Identity Provider Idp-initiated flow with Okta]]></title>
        <id>https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/</id>
        <link href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/"/>
        <updated>2025-02-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you just want to skip to the code, visit the Phase Two IdP-initiated example.]]></summary>
        <content type="html"><![CDATA[<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated" target="_blank" rel="noopener noreferrer">IdP-initiated example</a>.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="idp-initiated-flow">IdP Initiated Flow<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-flow" class="hash-link" aria-label="Direct link to IdP Initiated Flow" title="Direct link to IdP Initiated Flow">​</a></h3>
<p>When implementing SAML for the establishment of an Identity Provider, two primary options are available: Service Provider (SP) initiated and Identity Provider (IdP) initiated flows. The SP initiated flow is widely recognized by users due to its straightforward configuration, which is merely the exchange of some metadata. In contrast, the IdP-initiated flow is less intuitive and involves an additional step that may not be readily apparent to many users. The purpose of this blog is to elucidate the steps necessary to successfully execute the IdP-initiated flow.</p>
<p>A fundamental understanding of <a href="https://en.wikipedia.org/wiki/SAML_2.0" target="_blank" rel="noopener noreferrer">SAML 2.0</a> and <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> is required to effectively follow the provided instructions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="components">Components<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#components" class="hash-link" aria-label="Direct link to Components" title="Direct link to Components">​</a></h3>
<p>The components involved in this flow are as follows:</p>
<p><strong>Identity Provider:</strong>
Any identity provider(IdP) that supports SAML 2.0 may be selected. The process begins by accessing the Identity Provider dashboard, where the user is prompted to authenticate. Upon successful authentication, the user may then request a service.</p>
<p><strong>Keycloak SAML 2.0 Identity Provider:</strong>
The Keycloak Identity Provider will be used for identity brokering and will process the SAML Response received from the Identity Provider. It is responsible for operations such as provisioning, signature verification, decryption etc.</p>
<p><strong>Keycloak Realm Client:</strong>
The Keycloak SAML client function is to maintain the authenticated user session within Keycloak. Another function of this generic client is to forward the authenticated user to the Service Provider.</p>
<p><strong>Service Provider:</strong>
The Service Provider refers to the application that the user seeks to access. Once the user has been authenticated in Keycloak, a new SAML Response is generated by the realm client and subsequently consumed by the Service Provider.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#setting-up-a-keycloak-instance" class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="okta-setup-example">Okta setup example<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#okta-setup-example" class="hash-link" aria-label="Direct link to Okta setup example" title="Direct link to Okta setup example">​</a></h3>
<p>To facilitate a smoother setup process, we will provide a complete example. The setup will utilize Okta as the identity provider:</p>
<p><strong>Okta:</strong></p>
<p>Login in your Okta tenant and configure a new application.</p>
<p><img decoding="async" loading="lazy" alt="Okta Application Start" src="https://phasetwo.io/assets/images/okta-application-start-dcb3c461ebb5edaa2420e055bb29b920.png" width="1393" height="748" class="img_ev3q"></p>
<p>You will need to specify two things:</p>
<p><code>Single sign-on URL</code>: <a href="http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client" target="_blank" rel="noopener noreferrer">http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client</a> <br>
<code>Audience URI</code>: <a href="http://localhost:8080/realms/test-realm" target="_blank" rel="noopener noreferrer">http://localhost:8080/realms/test-realm</a></p>
<p><img decoding="async" loading="lazy" alt="Okta Application Setup" src="https://phasetwo.io/assets/images/okta-application-setup-8e11380d39e1e6c9a325035ef9ef4388.png" width="1393" height="748" class="img_ev3q"></p>
<p>The identity provider <code>redirect url</code> differs from what we typically observe in Identity Provider from the Keycloak console. Based on the documentation for <a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a>, the path <code>{brokerRedirectUrl}/clients/okta-client</code> indicates the <code>client-id</code> that is intended to maintain the service-provider application session. This will make more sense in the following steps.</p>
<p><strong>SAML 2.0 Identity provider:</strong></p>
<p>The SAML identity provider (e.g: <code>okta-broker</code>) from the example above can be created by importing the <code>metadata.xml</code> from the application you just created in Okta. For this example we need the alias: <code>okta-broker</code>.</p>
<p><img decoding="async" loading="lazy" alt="Identity Provider Setup" src="https://phasetwo.io/assets/images/identity-provider-setup-aacdd5fc7a934b3efb6681520e61734d.png" width="1689" height="843" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="service-provider-application"><strong>Service Provider Application</strong><a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-application" class="hash-link" aria-label="Direct link to service-provider-application" title="Direct link to service-provider-application">​</a></h4>
<p>For this we created a simple SpringBoot app which has a <code>ACS</code> endpoint: <code>/login/saml2/sso</code> and a <code>entityId</code>: <code>/saml2/metadata</code> . We have an example <a href="https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated" target="_blank" rel="noopener noreferrer">application</a> that can be used.</p>
<p><strong>Keycloak Realm Client</strong></p>
<p>We need to create new SAML 2.0 client in <code>test-realm</code>. This can be done by importing the metadata from the Service Provider application. To check if the data was successfully imported in the <code>Advance</code> check the Assertion Consumer Service POST Binding URL, should contain the endpoint mentioned above.</p>
<p><img decoding="async" loading="lazy" alt="Generic client advance" src="https://phasetwo.io/assets/images/generic-client-advance-651923735124e7fd4758640adcb5f0a2.png" width="1932" height="1418" class="img_ev3q"></p>
<p>Now we need to return to the documentation: <a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a>. In order to configure the IdP-initiated flow, a special field needs to be specified <code>IdP-Initiated SSO URL</code>. <br>
<!-- -->IdP-Initiated SSO URL name: <code>okta-client</code></p>
<p><img decoding="async" loading="lazy" alt="Generic client" src="https://phasetwo.io/assets/images/generic-client-4d14870a294bf221038b24cf6ccb6d52.png" width="1689" height="843" class="img_ev3q"></p>
<p>The field is part of the <code>{brokerRedirectUrl}/clients/okta-client</code> url. As we can see the value is different from that of the <code>clientId</code> of the client we just created.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="testing"><strong>Testing</strong><a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#testing" class="hash-link" aria-label="Direct link to testing" title="Direct link to testing">​</a></h4>
<p>To test this, please visit the Okta end user dashboard and select the application we created in the first step.</p>
<p><img decoding="async" loading="lazy" alt="Okta flow start" src="https://phasetwo.io/assets/images/okta-init-flow-f5a0e0251ac836ef7c6b2272f5afc8eb.png" width="1393" height="748" class="img_ev3q"></p>
<p>For debugging purposes, you might consider using the <a href="https://support.okta.com/help/s/article/How-to-troubleshoot-with-SAML-Tracer?language=en_US" target="_blank" rel="noopener noreferrer">SAML Tracer</a>) browser extension. If you take a moment to check the requests from the flow, you'll notice that it contains only SAMLResponse messages. This is a specific characteristic of the IdP-initiated flow.</p>
<p><img decoding="async" loading="lazy" alt="Okta SAML response" src="https://phasetwo.io/assets/images/okta-saml-response-4021759732d86f61be478f00a022591a.png" width="1118" height="661" class="img_ev3q"> <img decoding="async" loading="lazy" alt="Client SAML response" src="https://phasetwo.io/assets/images/client-saml-response-35299ca71eaa4684bec43702c46c0813.png" width="1118" height="661" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-just-happened">What just happened?<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#what-just-happened" class="hash-link" aria-label="Direct link to What just happened?" title="Direct link to What just happened?">​</a></h3>
<p>We have successfully secured a web application using the SAML protocol and IdP-initiated flow with Okta. Great work!</p>
<p>It is important to consider that the IdP-initiated flow does present certain security concerns, such as the potential for replay attacks, spoofing, or data tampering. To ensure we uphold security, it is essential that we take all necessary precautions, including implementing assertion encryption to protect sensitive data, utilizing signing to mitigate the risk of data tampering, and proper configuration for issuer validation.</p>
<p>However, it is worth noting that there is still a risk that a SAML assertion could be compromised, allowing an attacker to gain access to the service provider as the affected user. While the service provider can recognize and validate the assertion because it was issued by the expected issuer and signed with the correct key, it cannot confirm whether a malicious party was involved in sending it. Given these concerns about the IdP-initiated flow and its vulnerability to certain security threats, there may be circumstances in which we find it necessary to implement it based on our specific context.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="idp-initiated-flow-redirects-to-a-oidc-application">IdP-initiated flow redirects to a OIDC application<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-flow-redirects-to-a-oidc-application" class="hash-link" aria-label="Direct link to IdP-initiated flow redirects to a OIDC application" title="Direct link to IdP-initiated flow redirects to a OIDC application">​</a></h3>
<p>In the example above we configured the IdP-initiated flow to act as a identity broker and redirect to a client application which consumes SAML. Another interesting use case involves redirecting a user authenticated in the Keycloak realm to an OIDC client application.</p>
<p>Although this setup may not function seamlessly out of the box, an illustrative example can be found here: <a href="https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak" target="_blank" rel="noopener noreferrer">IdP Initiated Login with Keycloak</a>.</p>
<p>I will also attempt to create a local setup for this use case. To do this we will follow the exact same steps from the <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#okta-setup-example">section</a> above, until we reach the step <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-application">Service Provider Application</a>.</p>
<p><strong>Service Provider Application</strong></p>
<p>In this case the service provider application will 'talk' OIDC. As a simple example we can use the realm <code>security-admin-console</code> as the final client since it uses OIDC. A important thing to keep in mind is that for the client we will need to set a <code>Home URL</code>. In our case is the realm provisioned <code>http://localhost:8080/admin/test-realm/console/</code>.</p>
<p><a href="https://phasetwo.io/assets/files/security-admin-console-client-14dbfb54ff1a4211700153a1f649bc05.png/" target="_blank">Security-admin-console-client</a></p>
<p><strong>Keycloak Realm Client</strong></p>
<p>We need to create new SAML 2.0 client in <code>test-realm</code>. Same as the configuration above we will set IdP-Initiated SSO URL name: <code>okta-client</code></p>
<p><img decoding="async" loading="lazy" alt="Generic client" src="https://phasetwo.io/assets/images/generic-client-4d14870a294bf221038b24cf6ccb6d52.png" width="1689" height="843" class="img_ev3q"></p>
<p>Now comes the interesting part. Since the SAML client we created will initialize the user session in Keycloak, we will need a mechanism to attach this session to an OIDC client. We can accomplish this with a simple redirect to the OIDC application. For that, we may consider using the <code>SAML Redirect Binding</code>, which uses a <code>GET</code> request instead of a <code>POST</code> to forward the SAML assertion.
We can associate our client application <code>Home URL</code> with this configuration.</p>
<p><img decoding="async" loading="lazy" alt="Client redirect binding" src="https://phasetwo.io/assets/images/saml-client-redirect-binding-07c2fb3b92b7ea7b73edf70fc1995b35.png" width="2426" height="1282" class="img_ev3q"></p>
<p>Do not forget to turn of the <code>Force POST binding</code> toggle in the SAML client general settings.</p>
<p>After doing all these configs we can proceed with the <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#testing">Testing</a> phase. What we are going to observe is that Keycloak created a twin session in the  <code>security-admin-console</code> client for our user.</p>
<p><img decoding="async" loading="lazy" alt="Twin session oidc client" src="https://phasetwo.io/assets/images/twin-session-oidc-client-97dfcf362ef6030b0861d867fd354061.png" width="2348" height="586" class="img_ev3q"></p>
<p>Behind this configuration stands one magic piece which ensure the flow is going to work, the 'Cookie' authenticator. It ensures that the session for any <code>client</code> we request is first lookup in the Keycloak cookie. If the Authenticator is turned of the flow will no longer work. My advice is not to really on this configuration if your application will not allow Keycloak cookies.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>In this post, we explored the setup of an IdP-initiated flow with support for both SAML and OIDC applications. We also discussed some of the challenges associated with using the IdP-initiated flow and ways to address them.</p>
<p>I hope this has shed some light on the intricate world of Keycloak configuration and assisted you in finding a solution to your problems. Cheers!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h3>
<ul>
<li><a href="https://www.lisenet.com/2020/keycloak-with-okta-idp-initiated-sso-login/" target="_blank" rel="noopener noreferrer">Keycloak with Okta IdP Initiated Login</a></li>
<li><a href="https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak" target="_blank" rel="noopener noreferrer">IdP Initiated Login with Keycloak</a></li>
<li><a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">Server Administration Guide</a></li>
<li><a href="https://groups.google.com/g/keycloak-user/c/s_sVxPGLhCs?pli=1" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a></li>
</ul>]]></content>
        <author>
            <name>Phase Two</name>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="okta" term="okta"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="keycloak" term="keycloak"/>
        <category label="sso" term="sso"/>
        <category label="idp-initiated" term="idp-initiated"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Managed Keycloak Hosting - Picking a Provider]]></title>
        <id>https://phasetwo.io/blog/managed-keycloak-hosting/</id>
        <link href="https://phasetwo.io/blog/managed-keycloak-hosting/"/>
        <updated>2024-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Picking a provider for Managed Keycloak Hosting should be about more that price, it should be about picking a partner to help you and your app succeed.]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-consider-phase-two-for-your-managed-keycloak-provider">Why consider Phase Two for your Managed Keycloak Provider<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#why-consider-phase-two-for-your-managed-keycloak-provider" class="hash-link" aria-label="Direct link to Why consider Phase Two for your Managed Keycloak Provider" title="Direct link to Why consider Phase Two for your Managed Keycloak Provider">​</a></h3>
<p>When it comes to identity and access management, Keycloak has established itself as the go-to open-source solution for authentication, authorization, and user management. However, successfully integrating and maintaining Keycloak requires more than just hosting—it requires expertise. That’s where the difference between Phase Two and other hosting providers becomes clear.</p>
<p>In this post, we’ll explore why Phase Two should be in strong consideration for your Managed Keycloak provider, especially when compared to providers like CloudIAM, Elest.io, and Servana, who focus solely on hosting the standard build of Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-managed-keycloak-landscape">The Managed Keycloak Landscape<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#the-managed-keycloak-landscape" class="hash-link" aria-label="Direct link to The Managed Keycloak Landscape" title="Direct link to The Managed Keycloak Landscape">​</a></h3>
<p>The demand for hosted Keycloak solutions has given rise to providers like <a href="https://www.cloud-iam.com/" target="_blank" rel="noopener noreferrer">Cloud IAM</a>, <a href="https://elest.io/open-source/keycloak" target="_blank" rel="noopener noreferrer">Elest.io</a>, and <a href="https://servanamanaged.com/products/managed-keycloak-service/" target="_blank" rel="noopener noreferrer">Servana</a>. These companies offer hosting services for the standard version of Keycloak, typically focusing only on infrastructure and uptime.</p>
<p>However, while these providers excel in devops, they lack the specialized Keycloak development expertise to go beyond hosting. This is where their limitations become apparent, as businesses often require customization, extensibility, and advanced support for their identity systems.</p>
<p>At Phase Two we started as Keycloak experts first. A large portion of our business is focused on <a href="https://phasetwo.io/support/">Support</a> of large Enterprises and helping them be successful with complex Keycloak deployments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-phase-two-stands-out">Why Phase Two Stands Out<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#why-phase-two-stands-out" class="hash-link" aria-label="Direct link to Why Phase Two Stands Out" title="Direct link to Why Phase Two Stands Out">​</a></h3>
<p>At Phase Two, we do more than host Keycloak—we help you get the most out of it. Here’s how we differentiate ourselves:</p>
<ol>
<li><strong>Keycloak Development Expertise and Community Maintainers</strong></li>
</ol>
<p>Unlike generic hosting providers, Phase Two is a team of Keycloak <a href="https://phasetwo.io/blog/keycloak-extensions-presentation/" target="_blank" rel="noopener noreferrer">experts</a>. We actively develop advanced features and extensions that enhance Keycloak’s capabilities. For instance, our <a href="https://phasetwo.io/product/organizations/">Organizations Extension</a> allows <a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/">multi-tenant</a> support out of the box, a feature not available in the standard Keycloak build.</p>
<p>This level of expertise ensures that your Keycloak deployment isn’t just functional, it’s optimized and future-proofed for your unique needs.</p>
<p>In addition, while these providers may suggest you can customize something, the reality is once you enter the realm of needing to add an extension for migration, organizations, theming or more, you will need more control.</p>
<p>We are active contributors to the Keycloak Project for bugs and features.</p>
<ol start="2">
<li><strong>Beyond Hosting – Full-Service Management</strong></li>
</ol>
<p>Phase Two provides comprehensive management of your Keycloak deployment. From custom configurations, region deployments, to integration with your existing systems, we tailor every deployment to fit your requirements.</p>
<p>With Phase Two, you’re not just getting a host, you’re gaining a partner who actively ensures your identity solution is robust, scalable, and secure.</p>
<p>On the other end of the email are real people, if you have a problem and reach out, we're there to quickly respond.</p>
<ol start="3">
<li><strong>Focus on Extensibility</strong></li>
</ol>
<p>Many businesses need to extend Keycloak to meet specific requirements, such as custom authentication flows or integrations with third-party systems. At Phase Two, we specialize in making Keycloak extensible, helping you unlock its full potential.</p>
<p>In contrast, standard hosting providers can only offer “out-of-the-box” Keycloak functionality, leaving you to navigate complex customizations alone.</p>
<p>For instance, we are the original implementers and continued maintainers of <a href="https://phasetwo.io/blog/keycloak-on-cockroachdb/">CockroachDB build</a>, which is a fantastic database for distributed SQL.</p>
<ol start="4">
<li><strong>Enterprise-Grade Support and Reliability</strong></li>
</ol>
<p>We understand that uptime is critical, but we also know that businesses need proactive support. At Phase Two, we provide:</p>
<ul>
<li>Continuous monitoring and optimization.</li>
<li>Regular security patches and updates.</li>
<li>Expert guidance to handle complex challenges.</li>
<li>Guidance for logging and eventing to a SIEM of your choice.</li>
</ul>
<p>With Phase Two, we ensure your infrastructure is not only operational but also resilient and efficient.</p>
<ol start="5">
<li><strong>Managed Upgrades and Compatibility</strong></li>
</ol>
<p>Keycloak updates can introduce breaking changes, especially for custom deployments. Phase Two takes the headache out of upgrades, ensuring that your deployment remains stable and compatible.</p>
<p>This seamless upgrade process is something you won’t find with standard-hosting solutions, but you'll find that you'll need rather quickly. We coordinate with your team to make sure you're ready and help verify upgrades.</p>
<p>If downtime is required (some previous version required this), we work to keep this down to minutes and make sure you're app is back up fast.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-a-partner-that-understands-your-needs">Choosing a Partner That Understands Your Needs<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#choosing-a-partner-that-understands-your-needs" class="hash-link" aria-label="Direct link to Choosing a Partner That Understands Your Needs" title="Direct link to Choosing a Partner That Understands Your Needs">​</a></h3>
<p>Managed Keycloak isn’t just about hosting, it’s about delivering a solution that scales with your business, adapts to your evolving needs, and remains secure in the face of new challenges.</p>
<p>While other providers offer the basics, Phase Two combines hosting with unmatched Keycloak development expertise, enterprise-grade support, and a commitment to innovation. The result? A managed Keycloak solution that’s tailor-made for your success.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ready-to-elevate-your-keycloak-deployment">Ready to Elevate Your Keycloak Deployment?<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#ready-to-elevate-your-keycloak-deployment" class="hash-link" aria-label="Direct link to Ready to Elevate Your Keycloak Deployment?" title="Direct link to Ready to Elevate Your Keycloak Deployment?">​</a></h3>
<p>If you’re looking for a Managed Keycloak provider that goes beyond hosting, Phase Two is here to help. Explore our Managed Keycloak Hosting or Enterprise Support to learn more.</p>
<p>Schedule a consultation today or get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn how we can transform your identity solution.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
        <category label="customization" term="customization"/>
        <category label="extension" term="extension"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 4: Cost]]></title>
        <id>https://phasetwo.io/blog/keycloak-for-startups-cost/</id>
        <link href="https://phasetwo.io/blog/keycloak-for-startups-cost/"/>
        <updated>2024-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Part 4: There is no justification for variable cost for individual features.]]></summary>
        <content type="html"><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-4-cost-effectiveness-of-open-source">Part 4: Cost-Effectiveness of Open Source<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#part-4-cost-effectiveness-of-open-source" class="hash-link" aria-label="Direct link to Part 4: Cost-Effectiveness of Open Source" title="Direct link to Part 4: Cost-Effectiveness of Open Source">​</a></h3>
<p>At the heart of every startup's decision-making process lies the bottom line. We’re in an economy where cost-cutting measures are being taken across organizations, and many companies are starting to ask why their identity stack is such an outsized drag on their margins. Keycloak presents a compelling case with its open-source nature. Unlike proprietary IAM solutions that come with hefty price tags and recurring subscription fees, Keycloak offers a cost-effective alternative without compromising on features or security.</p>
<p>By leveraging Keycloak, startups can significantly reduce their operational expenses, channeling those resources into core business activities such as product development and market expansion. Moreover, the open-source community surrounding Keycloak ensures continuous improvement and innovation, all without the burden of additional licensing costs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-hosting-an-open-source-product-like-keycloak">Cost of Hosting an Open-Source Product like Keycloak<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#cost-of-hosting-an-open-source-product-like-keycloak" class="hash-link" aria-label="Direct link to Cost of Hosting an Open-Source Product like Keycloak" title="Direct link to Cost of Hosting an Open-Source Product like Keycloak">​</a></h3>
<p>Keycloak, being an open-source IAM solution, offers startups a significant advantage in terms of cost-effectiveness. Here's why:</p>
<ol>
<li>
<p><strong>No Licensing Fees</strong>: The most apparent benefit of using Keycloak is the absence of licensing fees. Startups can leverage the full spectrum of Keycloak's features without incurring any upfront costs or recurring subscription fees. This eliminates a significant financial burden, allowing startups to allocate resources more efficiently towards core business activities.</p>
</li>
<li>
<p><strong>Infrastructure Flexibility</strong>: With Keycloak, startups have the freedom to choose their hosting infrastructure, whether it's on-premises or in the cloud. This flexibility enables startups to optimize infrastructure costs based on their specific requirements and budget constraints. Additionally, Keycloak's lightweight footprint ensures minimal resource consumption, further reducing operational expenses.</p>
</li>
<li>
<p><strong>Community Support</strong>: The vibrant open-source community surrounding Keycloak provides startups with access to a wealth of resources, including documentation, forums, and community-contributed extensions. This extensive support network ensures timely resolution of issues and continuous improvement of the platform, all at no additional cost to startups.</p>
</li>
<li>
<p><strong>Expertise</strong>: Using an open-source solution means adopting that code base in a manner of speaking. Your team must build expertise in the code base and the capabilities of the tool in addition to all the protocols that come with IAM. That includes things like setting up authentication flows, configuring <a href="https://phasetwo.io/product/organizations/">organizations</a>, or <a href="https://phasetwo.io/support/#upgrades">performing upgrades</a>.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="predatory-nature-of-saas-solutions-like-auth0-and-workos">Predatory Nature of SaaS Solutions like Auth0 and WorkOS<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#predatory-nature-of-saas-solutions-like-auth0-and-workos" class="hash-link" aria-label="Direct link to Predatory Nature of SaaS Solutions like Auth0 and WorkOS" title="Direct link to Predatory Nature of SaaS Solutions like Auth0 and WorkOS">​</a></h3>
<p>While SaaS solutions like Auth0 and WorkOS offer convenience and ease of use, their pricing models can be detrimental to startups, especially those operating on limited budgets:</p>
<ol>
<li>
<p><strong>Subscription Fees</strong>: Auth0 and WorkOS typically operate on a subscription-based pricing model, where startups are required to pay recurring fees based on usage or the number of active users or identity providers (aka “SSO connections”). These fees can quickly escalate as startups scale their operations, potentially eating into precious financial resources that could otherwise be invested in growth initiatives.</p>
</li>
<li>
<p><strong>Vendor Lock-In</strong>: By relying on proprietary SaaS solutions, startups risk becoming locked into a vendor ecosystem, making it difficult to migrate to alternative solutions in the future. This lack of vendor independence can pose significant challenges, especially if the SaaS provider decides to increase prices or modify terms of service, leaving startups vulnerable to unforeseen expenses and disruptions.</p>
</li>
<li>
<p><strong>Hidden Costs</strong>: Beyond the base subscription fees, startups may encounter additional hidden costs associated with SaaS solutions, such as implementation fees, integration costs, and fees for accessing premium features or support services. These hidden costs can quickly accumulate, further exacerbating the financial strain on startups.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-empowering-startups-with-financial-freedom-and-flexibility">Conclusion: Empowering Startups with Financial Freedom and Flexibility<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#conclusion-empowering-startups-with-financial-freedom-and-flexibility" class="hash-link" aria-label="Direct link to Conclusion: Empowering Startups with Financial Freedom and Flexibility" title="Direct link to Conclusion: Empowering Startups with Financial Freedom and Flexibility">​</a></h3>
<p>In conclusion, the cost comparison between hosting an open-source product like Keycloak and opting for SaaS solutions like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a> and <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOS</a> underscores the importance of financial freedom and flexibility for startups.</p>
<p>By choosing Keycloak, startups can break free from the predatory pricing models of SaaS solutions, empowering themselves with a cost-effective and customizable IAM solution that aligns seamlessly with their budgetary constraints and growth objectives. With Keycloak, startups can redirect their financial resources towards innovation, differentiation, and sustainable growth, unlocking their full potential in the competitive landscape of Enterprise SaaS.</p>
<p>At Phase Two, we’ve embraced Keycloak, and want to share it’s value with as many companies as possible. If you are going to self-host, and need help getting started, we provide architecture review, installation help and ongoing <a href="https://phasetwo.io/support/">support</a>. If you’d prefer to go the SaaS direction, but want to avoid the disadvantages of proprietary solutions, our <a href="https://phasetwo.io/hosting/">hosted</a> offerings provide the benefits of Keycloak on our hosted infrastructure with pricing that isn’t predatory on your business model and growth.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="series-conclusion">Series conclusion<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#series-conclusion" class="hash-link" aria-label="Direct link to Series conclusion" title="Direct link to Series conclusion">​</a></h3>
<p>While alternatives like Auth0 and WorkOS may boast similar features, Keycloak stands out as the superior choice for enterprise SaaS startups. Auth0, though feature-rich, often comes with a higher price tag, making it less accessible for startups operating on tight budgets. On the other hand, these proprietary, while suitable for certain use cases, lacks the extensibility and customization options offered by Keycloak.</p>
<p>In summary, Keycloak emerges as the ideal IAM solution for enterprise SaaS startups, offering a perfect balance of cost-effectiveness, customizability, and feature-rich functionality. By embracing Keycloak, startups can elevate their security posture, enhance user experiences, and drive sustainable growth in today's competitive market landscape.</p>
<p>As you embark on your journey to revolutionize the world of Enterprise SaaS, let Keycloak and Phase Two be your trusted ally in conquering the challenges of identity and access management. Unlock the full potential of your startup with Keycloak and pave the way for a future of innovation and success.</p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
        <category label="customization" term="customization"/>
        <category label="extension" term="extension"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implement Multi-Tenancy Applications with Keycloak Organizations]]></title>
        <id>https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/</id>
        <link href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/"/>
        <updated>2024-11-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Applications needing to leverage Keycloak to consolidate logins can leverage Keycloak Organizations.]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h3>
<p>A multi-tenant application is a software architecture where a single instance of an application serves multiple, distinct customer groups or “tenants.” Each tenant, often representing an organization or user group, shares the same underlying infrastructure and codebase but operates within its own securely isolated environment. This allows each tenant to have individualized data, configurations, and sometimes even unique customizations, while benefiting from a shared platform that reduces overall resource demands and maintenance. Multi-tenancy is commonly used in SaaS (Software as a Service) applications, enabling businesses to scale efficiently, lower costs, and streamline updates while ensuring that each tenant’s data and settings remain private and distinct from others within the same application. This approach is particularly valuable in enterprise applications, where companies may need to provide access to different organizations, departments, or customer groups within a single solution.</p>
<p>This post will cover a few things:</p>
<ul>
<li>Concept of how to implement this with Keycloak and Phase Two's <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organization</a> extension (<a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Github</a>).</li>
<li>Proof-of-concept implementation that will include how to configure a Keycloak instance with clients, organizations, roles, and example applications to consume these implementations.</li>
</ul>
<p>We have also given a detailed talk at Keycloak Dev Day on <a href="https://phasetwo.io/blog/keycloak-orgs-presentation/">Multi-Tenancy within a Single Realm</a>.</p>
<p>The implementation, while not difficult, does require knowledge of how to use Keycloak. If you're unclear at any point, please reach out <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-organizations-instead-of-multiple-realms">Why use Organizations Instead of Multiple Realms?<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#why-use-organizations-instead-of-multiple-realms" class="hash-link" aria-label="Direct link to Why use Organizations Instead of Multiple Realms?" title="Direct link to Why use Organizations Instead of Multiple Realms?">​</a></h3>
<p>Using Phase Two’s Keycloak Extension for <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organizations</a> provides a more efficient and scalable way to implement multi-tenancy than managing multiple realms in Keycloak. Here’s why:</p>
<ol>
<li>Resource Efficiency: Each realm in Keycloak creates isolated resources, which can lead to increased memory and CPU usage as the number of realms grows. By using a single realm with organizational support, you can maintain performance while still supporting multiple tenants.</li>
<li>Centralized Management: Managing numerous realms can become complex, especially for shared configurations and customizations. The extension allows you to manage users, roles, and configurations within a single realm, reducing overhead.</li>
<li>Simplified User Access Control: With organizations, you can easily segment users by tenant within the same realm. This allows for straightforward user and role management without needing to duplicate settings across realms.</li>
<li>Improved Scalability: As your application scales, the single-realm approach with organizational structures is more sustainable, reducing maintenance and potential errors. It supports a logical separation for tenants without the performance and management limitations of numerous realms.</li>
</ol>
<p>Overall, the extension simplifies and optimizes Keycloak for multi-tenant applications, focusing on efficient resource usage and management scalability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conceptualizing-multi-tenant-implementation">Conceptualizing Multi-Tenant Implementation<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#conceptualizing-multi-tenant-implementation" class="hash-link" aria-label="Direct link to Conceptualizing Multi-Tenant Implementation" title="Direct link to Conceptualizing Multi-Tenant Implementation">​</a></h3>
<p>We're going to use the following example system:</p>
<ul>
<li>2 applications</li>
<li>2 tenants of each applications</li>
<li>Single Keycloak realm</li>
<li>Two Keycloak Organizations to represent the tenants</li>
<li>Role names that match the applications</li>
</ul>
<p>We can visualize this in the following diagram:</p>
<p><img decoding="async" loading="lazy" alt="System" src="https://phasetwo.io/assets/images/system-77f0bb306b484ef7aa0635f2b8952455.png" width="2354" height="1601" class="img_ev3q"></p>
<p>In Keycloak, we match the system implementation by doing the following:</p>
<ul>
<li>Two Clients match the two Applications. More Clients added per tenant.</li>
<li>Two Organizations match the two Tenants. This could be scaled out for additional tenants.</li>
<li>One role per Tenant within each Organization.</li>
</ul>
<p>If we break this down specifically with the names:</p>
<p><em>Application system</em></p>
<ul>
<li>Two applications: Zoo, Aquarium</li>
<li>Two tenants: California, New York</li>
</ul>
<p><em>Keycloak system</em></p>
<ul>
<li>Two clients: Zoo, Aquarium</li>
<li>Two organizations: California, New York</li>
<li>Two roles per for Org: zoo, aquarium</li>
</ul>
<p>In order for users to then have access to the various Clients and Tenants, we would add them as members to the Organization, then assign them roles that match their access.</p>
<p>We can visualize this as follows:</p>
<p><img decoding="async" loading="lazy" alt="User Access" src="https://phasetwo.io/assets/images/user-access-f73e24ee7247a5d91563e808e0fbc5af.png" width="1681" height="1138" class="img_ev3q"></p>
<p>This represents following access:</p>
<ul>
<li>User 1<!-- -->
<ul>
<li>Zoo application, California tenant</li>
<li>Aquarium application, California tenant</li>
<li>Aquarium application, New York tenant</li>
</ul>
</li>
<li>User 2<!-- -->
<ul>
<li>Zoo application, California tenant</li>
<li>Zoo application, New York tenant</li>
</ul>
</li>
</ul>
<p>Users are granted roles to represent application access. Users are made members of an Organization to represent tenant access.</p>
<p>Consuming and implementing this representation can be done via the Organizations API on the <a href="https://phasetwo.io/api/get-me/" target="_blank" rel="noopener noreferrer"><code>/me</code> endpoint</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sample-implementation">Sample Implementation<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#sample-implementation" class="hash-link" aria-label="Direct link to Sample Implementation" title="Direct link to Sample Implementation">​</a></h3>
<p>Now that we've discussed how the system is designed, let's work through an example of this application.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-configuration">Keycloak Configuration<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#keycloak-configuration" class="hash-link" aria-label="Direct link to Keycloak Configuration" title="Direct link to Keycloak Configuration">​</a></h4>
<p>We'll be using Phase Two's <a href="https://phasetwo.io/hosting/">free hosted Keycloak</a> to set up a deployment and associated organizations. Visit <a href="https://phasetwo.io/dashboard" target="_blank" rel="noopener noreferrer">Phase Two Dashboard</a> to sign up for a free account and create a deployment. After you have created the deployment, click the "Open Console" link to go to the Keycloak deployment.</p>
<p>Next we'll configure Keycloak and then configure the applications.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-keycloak">Configuring Keycloak<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#configuring-keycloak" class="hash-link" aria-label="Direct link to Configuring Keycloak" title="Direct link to Configuring Keycloak">​</a></h5>
<ol>
<li>Go to the Clients tab. We will create two Clients. Provide a <code>Client ID</code> of <code>aquarium</code> and <code>zoo</code> to each. Enter a value of <code>*</code> for <code>Valid redirect URIs</code> (don't use this for production).</li>
<li>Go to the Users tab. Add a user with a username of <code>jane</code>, first name of <code>jane</code>, and last name of <code>goodall</code>. Add a second user with a username of <code>jacques</code>, first name of <code>jacques</code>, and last name of <code>cousteau</code>.</li>
<li>Go to the Organizations tab. Create two Organizations. Name one <code>california</code> and the other <code>new york</code>. For each organization, create two roles: <code>aquarium</code> and <code>zoo</code>. For each organization, add the two user's created to them as members.</li>
<li>Inside the <code>california</code> organization, assign the <code>aquarium</code> role to the <code>jacques</code> user. Assign the <code>zoo</code> role to the <code>jane</code> user.</li>
<li>Inside the <code>newyork</code> organization, assign the <code>aquarium</code> role to both users. Assign the <code>zoo</code> role only to the <code>jane</code> user.</li>
</ol>
<p>At this point we should have all we require for configuring our client applications as needed.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-client-applications">Configuring Client Applications<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#configuring-client-applications" class="hash-link" aria-label="Direct link to Configuring Client Applications" title="Direct link to Configuring Client Applications">​</a></h5>
<p>We won't go through all the steps required to build a client application in this post. We have a <code>nx</code> <a href="https://github.com/p2-inc/examples/tree/main/multitenant" target="_blank" rel="noopener noreferrer">monorepo</a> generated for use where you can clone it and change the OIDC client config to speak to the correct applications.</p>
<p>Update the associated values make use of the Keycloak configuration you created above: realm name, clients, and so on. The app is setup already with a scaffold to pull the <code>/orgs/me</code> endpoint.</p>
<p>Once you have the application setup (check readme for more details), log in as the <code>jane</code> and <code>jacques</code> user to see the variation of which organization and roles they have access to. You'll see a variation of this:</p>
<p><img decoding="async" loading="lazy" alt="Organizations" src="https://phasetwo.io/assets/images/orgs-39834411eecdd9d92991c919f3777a05.png" width="1100" height="796" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="in-conclusion">In Conclusion<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#in-conclusion" class="hash-link" aria-label="Direct link to In Conclusion" title="Direct link to In Conclusion">​</a></h3>
<p>Creating a multi-tenant application isn't necessarily easy, but it is well within the capability of Keycloak. If you end up leveraging our Organization's extension to support multi-tenancy, let us <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">know</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="organizations" term="organizations"/>
        <category label="multitenant" term="multitenant"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 3: Customization]]></title>
        <id>https://phasetwo.io/blog/keycloak-for-startups-customization/</id>
        <link href="https://phasetwo.io/blog/keycloak-for-startups-customization/"/>
        <updated>2024-11-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Part 3: Keycloak stands out in customizability for tailored solutions.]]></summary>
        <content type="html"><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-3-customizability-for-tailored-solutions-why-keycloak-stands-out">Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out<a href="https://phasetwo.io/blog/keycloak-for-startups-customization/#part-3-customizability-for-tailored-solutions-why-keycloak-stands-out" class="hash-link" aria-label="Direct link to Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out" title="Direct link to Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out">​</a></h3>
<p>One size rarely fits all, especially in the world of enterprise software. Startups require flexibility to adapt and tailor IAM solutions to their unique business requirements. Keycloak shines in this aspect, offering extensive customization capabilities that empower startups to mold the platform according to their specific needs.</p>
<p>From branding and user interface customization to advanced authentication flows and authorization policies, Keycloak provides a comprehensive toolkit for startups to craft seamless and secure user experiences. Whether integrating with existing systems or building entirely new functionalities, Keycloak's flexibility ensures a perfect fit for any enterprise SaaS startup. Here’s how Keycloak’s flexibility stands apart from commercial, closed-source solutions, and why this is a key differentiator:</p>
<ol>
<li>
<p><strong>Flexible Authentication and Authorization Flows</strong>: Keycloak supports a broad range of authentication flows out of the box, including standard Single Sign-On (<a href="https://phasetwo.io/product/sso/">SSO</a>), multi-factor authentication (MFA), and custom flows that can incorporate additional security checks or personalized user experiences. Through its flexible Authentication Flow configuration, Keycloak allows you to define step-by-step authentication processes, integrating custom forms, conditional checks, and required actions. This customization ensures that security and compliance requirements can be met without compromising on user experience.</p>
</li>
<li>
<p><strong>Adaptable User Interfaces and Branding</strong>: The user experience is a major part of identity management. Keycloak makes it easy to customize login pages, consent screens, and other interfaces to align with your brand’s look and feel. You can alter these templates by modifying Keycloak’s HTML, CSS, and JavaScript files, enabling seamless brand integration and a cohesive customer experience. Closed-source solutions, by contrast, often provide limited UI customization options, restricting the degree to which you can personalize the user experience.</p>
</li>
<li>
<p><strong>Modular Extensions with Service Provider Interfaces (SPIs)</strong>: Keycloak’s modular architecture is built to support extensive custom extensions via Service Provider Interfaces (SPIs). SPIs are essentially integration points that allow developers to replace or enhance Keycloak’s default behavior. For instance, if you need a unique authentication method, such as biometric authentication or a custom identity provider integration, you can build and plug in your own SPI modules. This extensibility offers startups the freedom to experiment, innovate, and introduce unique capabilities not available in off-the-shelf commercial IAM solutions.</p>
</li>
<li>
<p><strong>Seamless Integration with Existing Systems</strong>: Because it is open source, Keycloak is highly compatible with various enterprise ecosystems and can be deeply integrated with existing IT <a href="https://phasetwo.io/product/integrations/">infrastructure and applications</a>. Keycloak’s ability to connect with external identity providers, databases, custom authentication mechanisms, and business systems allows startups to create a seamless experience for users who may be interacting with multiple applications. This integration potential extends to support for protocols such as LDAP, Active Directory, SAML, and OIDC, making it possible to incorporate Keycloak into hybrid and legacy environments with minimal friction.</p>
</li>
<li>
<p><strong>API-Driven Customization and Developer-Friendly Environment</strong>: Keycloak’s comprehensive APIs and developer-friendly tooling make it an ideal choice for startups that value agility and the ability to innovate quickly. Through Keycloak’s REST APIs, developers can programmatically manage users, sessions, roles, permissions, and more. This API-driven approach allows startups to automate IAM workflows, create custom dashboards, or extend functionalities as business needs evolve. In a closed-source solution, API access may be limited or gated behind premium licensing tiers, restricting the organization’s ability to fully integrate IAM within its applications.</p>
</li>
<li>
<p><strong>Open Source Freedom and Community-Driven Innovation</strong>: Keycloak’s open-source nature provides the ultimate freedom to customize, extend, and experiment without limitations. The active Keycloak community continuously contributes new features, plugins, and enhancements, making it possible to stay on the cutting edge of IAM innovation. Startups benefit not only from this community-driven innovation but also from the ability to create proprietary modifications or custom forks of Keycloak to meet unique requirements—a level of freedom and flexibility typically unavailable with commercial IAM providers.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-customizability-matters-in-comparison-to-closed-source-solutions">Why Customizability Matters in Comparison to Closed-Source Solutions<a href="https://phasetwo.io/blog/keycloak-for-startups-customization/#why-customizability-matters-in-comparison-to-closed-source-solutions" class="hash-link" aria-label="Direct link to Why Customizability Matters in Comparison to Closed-Source Solutions" title="Direct link to Why Customizability Matters in Comparison to Closed-Source Solutions">​</a></h3>
<p>In contrast, commercial IAM solutions like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a> or <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOS</a> often limit customization to predefined configuration options. These providers typically restrict access to source code and SPIs, which can prevent organizations from fully adapting the IAM solution to fit unique workflows, branding requirements, or security demands. Additionally, while some commercial IAM providers offer custom integrations or enhanced features, these are often gated behind higher-tier pricing plans, increasing costs as startups scale.</p>
<p>The flexibility Keycloak offers through customization allows startups to truly own their IAM strategy, aligning it directly with their brand identity, security protocols, and business objectives. By choosing Keycloak, startups retain the freedom to innovate at every layer of the IAM process, without being constrained by the limitations or financial restrictions imposed by closed-source, SaaS-based IAM providers.</p>
<p>For your extension needs, Phase Two provides the ability to load custom themes and extensions for customers at the <a href="https://phasetwo.io/hosting/">Enterprise level</a>. Please contact <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> for more information about how to benefit from our hosting platform while customizing Keycloak to your specific needs.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a> now</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
        <category label="customization" term="customization"/>
        <category label="extension" term="extension"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login]]></title>
        <id>https://phasetwo.io/blog/magic-links-native-applications/</id>
        <link href="https://phasetwo.io/blog/magic-links-native-applications/"/>
        <updated>2024-10-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Leverage the Keycloak Magic Link extension to easily and securely log users into native applications.]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-and-native-applications">Keycloak and Native Applications<a href="https://phasetwo.io/blog/magic-links-native-applications/#keycloak-and-native-applications" class="hash-link" aria-label="Direct link to Keycloak and Native Applications" title="Direct link to Keycloak and Native Applications">​</a></h3>
<p>Native applications for iOS, Android, and other platforms can integrate with Keycloak to provide secure, centralized authentication and authorization services. By utilizing Keycloak, these applications can streamline the user login experience through various protocols such as OAuth 2.0 and OpenID Connect, which Keycloak natively supports. With Keycloak, mobile applications can handle user sign-in, token management, and session handling securely, ensuring user identities are managed consistently across devices and platforms. This setup enables native applications to offload the complexities of authentication to Keycloak, allowing seamless integrations with features like Single Sign-On (SSO), social logins, and multi-factor authentication, while developers can focus on app functionality rather than handling sensitive user data directly. Additionally, Keycloak’s support for fine-grained access control and roles ensures that native apps can manage user permissions efficiently, creating a robust foundation for secure, scalable mobile applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-magic-link">Keycloak Magic Link<a href="https://phasetwo.io/blog/magic-links-native-applications/#keycloak-magic-link" class="hash-link" aria-label="Direct link to Keycloak Magic Link" title="Direct link to Keycloak Magic Link">​</a></h3>
<p>The <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">Keycloak Magic Link extension</a> by Phase Two offers a plugin that enables passwordless authentication for Keycloak through the use of magic links. This plugin allows users to log in without needing to remember a password by simply clicking a secure link sent to their email. It works by generating a one-time-use link, which, when clicked, authenticates the user directly, improving both security and user experience. This approach is particularly useful for applications where ease of access and reducing password fatigue are priorities. The repository provides a robust, configurable setup compatible with Keycloak’s authentication workflows, making it straightforward to implement in various types of applications that require seamless, passwordless login functionality.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="leveraging-magic-link-for-easy-sso">Leveraging Magic Link for Easy SSO<a href="https://phasetwo.io/blog/magic-links-native-applications/#leveraging-magic-link-for-easy-sso" class="hash-link" aria-label="Direct link to Leveraging Magic Link for Easy SSO" title="Direct link to Leveraging Magic Link for Easy SSO">​</a></h3>
<p>Applications can use the Magic Link <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">resource</a> to issue a request to get a link or generate an email. For example:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl --request POST https://keycloak.host/auth/realms/test/magic-link \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Accept: application/json" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Content-Type: application/json" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Authorization: Bearer &lt;access_token&gt;" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --data '{"email":"foo@foo.com","client_id":"account-console","redirect_uri":"https://keycloak.host/auth/realms/test/account/","expiration_seconds":3600,"force_create":true,"update_profile":true,"update_password":true,"send_email":false}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>would result in a sample response of</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"user_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"386edecf-3e43-41fd-886c-c674eea41034"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"link"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://keycloak.host/auth/realms/test/login-actions/action-token?key=eyJhbG...KWuDyE&amp;client_id=account-console"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"sent"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Simply change the <code>redirect_uri</code> to be a registered URI scheme for the application.</p>
<p>Once a user clicks that link in the email, extract the <code>code</code> param of the url, and use that to then issue requests to the <code>token</code> endpoint. For example:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -X "POST" "https://keycloak.host/auth/realms/test/openid-connect/token" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     -H 'Content-Type: application/x-www-form-urlencoded' \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "grant_type=authorization_code" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "code=b5c7a811-0e61-42b9-9fc5-934fd614b57e.ff2148c2-a20d-4efc-ba8e-e7825f5ae204.edd26036-7f7e-4a91-be47-84603e57e3aa" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "client_id=account-console" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "redirect_uri=myapp://redirect"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/magic-links-native-applications/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Using magic links with Keycloak for a native application offers a streamlined, user-friendly authentication experience, especially beneficial for mobile users. With magic links, users can log in effortlessly without needing to remember or type passwords—often a challenging task on mobile devices. Instead, a secure, one-time-use link is sent to their email, allowing them to authenticate with a simple tap. This approach not only simplifies the login process but also enhances security by reducing password-related vulnerabilities, such as weak or reused passwords. For the end user, this means a smoother, faster, and more secure login experience, allowing them to access the application with minimal effort and without the risk of password fatigue. Magic link authentication via Keycloak aligns well with modern security standards and significantly improves user engagement by lowering login barriers in native applications.</p>
<p>Use Phase Two's free <a href="https://phasetwo.io/hosting/">hosting</a> to try it out or send us a message at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to discuss your use case or learn more.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="keycloak_magic_link" term="keycloak_magic_link"/>
        <category label="keycloak_extensions" term="keycloak_extensions"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 2: Data]]></title>
        <id>https://phasetwo.io/blog/keycloak-for-startups-data/</id>
        <link href="https://phasetwo.io/blog/keycloak-for-startups-data/"/>
        <updated>2024-10-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Part 2: The ability to control your data is essential, now and in the future.]]></summary>
        <content type="html"><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-2---owning-your-data-security-privacy-and-control">Part 2 - Owning Your Data: Security, Privacy, and Control<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#part-2---owning-your-data-security-privacy-and-control" class="hash-link" aria-label="Direct link to Part 2 - Owning Your Data: Security, Privacy, and Control" title="Direct link to Part 2 - Owning Your Data: Security, Privacy, and Control">​</a></h3>
<p>In the age of data breaches and privacy concerns, owning and controlling your user data is not just a preference but a strategic imperative for organizations, particularly when it comes to Identity and Access Management (IAM) solutions. Let's explore the reasons why owning your data matters and the risks associated with entrusting it to a Software-as-a-Service (SaaS) solution.</p>
<ol>
<li>
<p><strong>Data Security</strong>: By hosting your IAM solution on-premise on your own infrastructure, or with a hybrid that allows you to control the database, you retain control over the security measures implemented to safeguard your user data. This includes encryption protocols, access controls, network security configurations, and intrusion detection systems. <strong>With data breaches becoming increasingly common</strong>, maintaining tight control over your data security posture is paramount for protecting sensitive information and mitigating risks.</p>
</li>
<li>
<p><strong>Data Privacy Compliance</strong>: Depending on your industry or geographical location, you may be subject to stringent data privacy regulations such as the General Data Protection Regulation (GDPR) or the California Consumer Privacy Act (CCPA). By owning your data, you can ensure compliance with these regulations through appropriate data handling practices, transparent communication with users about data collection and usage, and streamlined management of data subject access requests (DSAR's) and consent processes.</p>
</li>
<li>
<p><strong>Customization and Integration</strong>: When you own your data, you have the freedom to customize your IAM solution and integrate it seamlessly with other systems and applications within your organization's ecosystem. This level of flexibility enables you to tailor the solution to meet your specific business requirements, streamline workflows, and enhance operational efficiency. In contrast, SaaS solutions may impose limitations on customization and integration, hindering your ability to adapt the solution to evolving business needs. For example, with Keycloak, you can create custom authentication flows, such as multi-factor authentication with step-up policies based on user roles or risk profiles, or integrate Keycloak with your CRM to automatically sync user permissions with customer account changes.</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="risks-of-saas-data-hosting">Risks of SaaS Data Hosting<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#risks-of-saas-data-hosting" class="hash-link" aria-label="Direct link to Risks of SaaS Data Hosting" title="Direct link to Risks of SaaS Data Hosting">​</a></h4>
<p>While SaaS solutions offer convenience and ease of deployment, they also present inherent risks when it comes to hosting your user data:</p>
<ol>
<li>
<p><strong>Data Access and Control</strong>: Entrusting your user data to a SaaS provider means relinquishing control over how that data is stored, accessed, and managed. You are reliant on the provider to implement robust security measures and adhere to data privacy regulations, with limited visibility and oversight on your part.</p>
</li>
<li>
<p><strong>Vendor Lock-In</strong>: Adopting a SaaS IAM solution may result in vendor lock-in, where migrating away from the solution becomes challenging or costly. This lock-in can restrict your ability to switch providers or transition to a self-hosted solution in the future, potentially limiting your flexibility and independence.</p>
</li>
<li>
<p><strong>Data Sovereignty Concerns</strong>: Depending on the jurisdiction in which the SaaS provider operates, you may encounter data sovereignty issues that impact your ability to control where your data is stored and processed. This lack of control over data residency can complicate compliance efforts and expose your organization to regulatory risks.</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-empowering-organizations-with-data-ownership">Conclusion: Empowering Organizations with Data Ownership<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#conclusion-empowering-organizations-with-data-ownership" class="hash-link" aria-label="Direct link to Conclusion: Empowering Organizations with Data Ownership" title="Direct link to Conclusion: Empowering Organizations with Data Ownership">​</a></h4>
<p>In conclusion, owning and controlling your user data offers numerous benefits, including enhanced security, compliance, customization, and integration capabilities. While SaaS solutions may offer convenience, organizations must carefully weigh the risks associated with relinquishing control over their data and consider the long-term implications for security, privacy, and regulatory compliance.</p>
<p>In order to provide customers who are used to SaaS solutions with flexibility in data sovereignty, Phase Two has developed "BYODB" (bring your own Database). BYODB allows customers the ability to benefit from the ease, scalability, and robustness of our <a href="https://phasetwo.io/hosting/">hosted offering</a> while still owning and controlling their data.</p>
<p>For those hosting Keycloak entirely themselves, Phase Two offers <a href="https://phasetwo.io/support/">Enterprise level support</a> to ensure that systems are properly configured, setup, upgraded, and managed by customers.</p>
<p>By prioritizing data ownership and implementing robust IAM solutions that align with organizational objectives and values, organizations can mitigate risks, safeguard sensitive information, and maintain sovereignty over their data assets in an increasingly interconnected and data-driven world.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customizability for Tailored Solutions</a> now</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
        <category label="data" term="data"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 1: Standards]]></title>
        <id>https://phasetwo.io/blog/keycloak-for-startups-standards/</id>
        <link href="https://phasetwo.io/blog/keycloak-for-startups-standards/"/>
        <updated>2024-10-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Every commercial and open source IAM offering is an implementation of the same standards.]]></summary>
        <content type="html"><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-1-standardized-protocols-and-minimal-feature-set-differentiation">Part 1: Standardized Protocols and Minimal Feature Set Differentiation<a href="https://phasetwo.io/blog/keycloak-for-startups-standards/#part-1-standardized-protocols-and-minimal-feature-set-differentiation" class="hash-link" aria-label="Direct link to Part 1: Standardized Protocols and Minimal Feature Set Differentiation" title="Direct link to Part 1: Standardized Protocols and Minimal Feature Set Differentiation">​</a></h3>
<p>In the realm of Identity and Access Management (IAM) solutions, it's essential to recognize that many offerings, both commercial and open source, operate on standardized protocols such as OpenID Connect (OIDC), Security Assertion Markup Language (SAML), System for Cross-domain Identity Management (SCIM), Lightweight Directory Access Protocol (LDAP), and more. This adherence to standardized protocols often results in minimal differentiation at the feature set level across various options. Let's delve into this further:</p>
<ol>
<li>
<p><strong>Protocol Compliance</strong>: Whether it's OIDC for modern authentication, SAML for Single Sign-On (<a href="https://phasetwo.io/product/sso/">SSO</a>), SCIM for user provisioning, or LDAP for directory services, IAM solutions are built upon established industry standards. This adherence ensures interoperability and compatibility with a wide range of applications and systems, irrespective of the chosen solution.</p>
</li>
<li>
<p><strong>Core Functionality</strong>: At their core, <a href="https://phasetwo.io/blog/open-source-iam/">IAM solutions</a> primarily focus on fundamental functionalities such as authentication, authorization, user provisioning, and identity federation. These functionalities form the backbone of IAM systems and are present across all offerings, regardless of whether they are commercial or open source.</p>
</li>
<li>
<p><strong>Feature Parity</strong>: While commercial IAM solutions may tout additional features or value-added services, the underlying feature set remains largely consistent across the board. Basic <a href="https://phasetwo.io/product/identity/">functionalities</a> such as user authentication, role-based access control (RBAC), multi-factor authentication (MFA), and audit logging are standard offerings in both commercial and open-source IAM solutions.</p>
</li>
<li>
<p><strong>Customization and Extensibility</strong>: Differentiation often occurs at the level of <a href="https://phasetwo.io/blog/keycloak-extensions-presentation/">customization and extensibility</a> rather than core features. Both commercial and open-source IAM solutions provide APIs, SDKs, and extension points that enable organizations to tailor the platform to their specific requirements, integrate with existing systems, and extend functionality as needed.</p>
</li>
<li>
<p><strong>Vendor-Specific Enhancements</strong>: While the core feature set may be similar across IAM solutions, vendors may differentiate themselves through vendor-specific enhancements, integrations, or ecosystem partnerships. However, these enhancements typically cater to niche use cases or specific industries and may not significantly impact the overall feature parity among IAM solutions.</p>
</li>
<li>
<p><strong>Closed Development</strong>: One of the key issues is that many commercial solutions are developed in isolation of public audits and community scrutiny. Companies build and operate these core secuirty protocols and standards behind a veil of secrecy, not sharing their implementations to allow review by security professionals and standards bodies. In contrast, open source solutions are built to allow full review and participation by both. Keycloak has been through many independent reviews and audits, and has a mature process for handling security issues in a timely fashion. Do you want these critical security implementations to be built with a rigor for review, or something one developer slapped together from a few examples and ChatGPT sessions?</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-1-making-informed-decisions-beyond-feature-sets">Conclusion 1: Making Informed Decisions Beyond Feature Sets<a href="https://phasetwo.io/blog/keycloak-for-startups-standards/#conclusion-1-making-informed-decisions-beyond-feature-sets" class="hash-link" aria-label="Direct link to Conclusion 1: Making Informed Decisions Beyond Feature Sets" title="Direct link to Conclusion 1: Making Informed Decisions Beyond Feature Sets">​</a></h4>
<p>In conclusion, while it's true that there is minimal differentiation on the feature set level among IAM solutions due to standardized protocols, organizations should focus on other factors when evaluating and selecting a solution. Considerations such as cost-effectiveness, customization capabilities, vendor support, community engagement, and alignment with organizational goals should weigh heavily in the decision-making process.</p>
<p>Ultimately, the choice between commercial and open-source IAM solutions should be driven by factors beyond the core feature set, with organizations prioritizing flexibility, scalability, security, and long-term sustainability in their IAM strategy.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a> now.</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
        <category label="standards" term="standards"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why your startup should use Keycloak for SSO and User Management]]></title>
        <id>https://phasetwo.io/blog/keycloak-for-startups-overview/</id>
        <link href="https://phasetwo.io/blog/keycloak-for-startups-overview/"/>
        <updated>2024-10-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Startups are striving for excellence in user experience and security, while simultaneously focusing on their core competencies. That means picking the best tools that expedite their time to market, with as few compromises as possible. Learn why Keycloak excels where commercial solutions fail.]]></summary>
        <content type="html"><![CDATA[<p>In the ever-evolving landscape of Enterprise SaaS, navigating the complexities of identity and access management (IAM) can be a daunting task. As a startup striving for excellence in user experience and security, choosing the right IAM solution is paramount. Enter Keycloak, a powerful open-source IAM tool that not only meets but exceeds the demands of modern startups.</p>
<p>There are a glut of commercial startups that solve some of the core challenges of authentication and authorization. But most of them rely on obscuring their true nature as a <em>commodity</em> as a way of <em>marketing</em> their products as <em>somehow differentiated</em>.</p>
<p>The purpose of this series is to dive into the key issues that separate an open source solution like Keycloak from commercial entities like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a>, <a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/">Okta</a>, or <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOs</a>. This should give a startup engineer or manager ample background to understand the decision, and to cut through the marketing gibberish.</p>
<p>This series will address the following key issues in 4 parts:</p>
<ol>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1</a>: Every commercial offering is an implementation of the same standards.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2</a>: The ability to control your data is essential, now and in the future.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3</a>: Extensibility and customization will always be necessary.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4</a>: There is no justification for variable cost for individual features.</li>
</ol>
<p>Please stay tuned as we release a new section each week! If you would like to try out Keycloak, <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">sign-up</a> for Phase Two's free tier and test it out now.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="startup" term="startup"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Keycloak with OIDC SPA and Phase Two]]></title>
        <id>https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/</id>
        <link href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/"/>
        <updated>2024-10-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.]]></summary>
        <content type="html"><![CDATA[<img src="https://phasetwo.io/blog/oidcspa-logo.svg" style="width:150px;box-shadow:none" alt="OIDC SPA Logo">
<p>Our pal over at <a href="https://www.keycloakify.dev/" target="_blank" rel="noopener noreferrer">Keycloakify</a> has been working on creating a simple OpenId Connect (OIDC) library called, <a href="https://www.oidc-spa.dev/" target="_blank" rel="noopener noreferrer">OIDC Spa</a>. As with <a href="https://github.com/garronej" target="_blank" rel="noopener noreferrer">Joseph</a>'s usual approach to user friendliness, OIDC SPA simplifies a lot of the integration work than can come with adding an Authentication and Authorization layer to your application. Follow along as we show you how to integrate OIDC SPA with a Phase Two's free Keycloak instance.</p>
<p>We're going to work through an example of how to add OIDC SPA to a React application. If you just want to skip to code, check out our <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs" target="_blank" rel="noopener noreferrer">React example</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-a-keycloak-instance" class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-an-oidc-client" class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to Off.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config " src="https://phasetwo.io/assets/images/capability-config-995c6bc68516bc541a9372f1bce7ad86.png" width="3000" height="2068" class="img_ev3q"></p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#oidc-config" class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#adding-a-non-admin-user" class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-reactjs-project">Setting up a ReactJS Project<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-a-reactjs-project" class="hash-link" aria-label="Direct link to Setting up a ReactJS Project" title="Direct link to Setting up a ReactJS Project">​</a></h2>
<p>As this is a more interactive project, we're going to walk through a bit more integration. We've got a very basic starter template which you can find <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter" target="_blank" rel="noopener noreferrer">here</a>. If you'd like to see more examples, check out the <a href="https://github.com/keycloakify/oidc-spa/tree/main/examples" target="_blank" rel="noopener noreferrer">oidc-spa repo</a></p>
<ol>
<li>Clone the <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter" target="_blank" rel="noopener noreferrer">starter repo</a> and install the OIDC SPA library:</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm install oidc-spa</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Add an OIDC Provider in <code>index.tsx</code>. We'll be using the params from the Keycloak instance we set up earlier (update <code>issuerUri</code> and <code>clientId</code> as needed):</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> createReactOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"oidc-spa/react"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token maybe-class-name">OidcProvider</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> useOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> getOidc </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">createReactOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// NOTE: If you don't have the params right away see note below.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  issuerUri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://app.phasetwo.io/auth/realms/p2examples"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reactjs-example"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/**</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * Vite:  `publicUrl: import.meta.env.BASE_URL`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * CRA:   `publicUrl: process.env.PUBLIC_URL`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * Other: `publicUrl: "/"` (Usually)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  publicUrl</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">BASE_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once that is added, we can render the App within the <code>OidcProvider</code>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">createRoot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token dom variable" style="color:rgb(191, 199, 213)">document</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getElementById</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"root"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">render</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">OidcProvider</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">// Optional</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">fallback</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag script language-javascript plain-text" style="color:rgb(255, 85, 114)">Checking authentication ⌛️</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">App</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">OidcProvider</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>Use the <code>useOidc</code> hook to access the OIDC context from <code>index.tsx</code> in the <code>Auth.tsx</code> file. This will allow you to check if the user is logged in, log them in, log them out, and access the OIDC tokens:</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./index"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">Auth</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> login</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> logout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> oidcTokens </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Looking at what comes back, we have a few main items:</p>
<ul>
<li><code>isUserLoggedIn</code> - A boolean value that tells you if the user is logged in.</li>
<li><code>login</code> - A function that will log the user in.</li>
<li><code>logout</code> - A function that will log the user out.</li>
<li><code>oidcTokens</code> - An object that contains the OIDC tokens. From this we can grab the <code>decodedIdToken</code> and to see information about the user. There are other tokens within this like <code>accessToken</code>, <code>refreshToken</code>, and <code>idToken</code>, which can be used for various purposes.</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>One of the nicest things that OIDC SPA does well is handling your token refresh for you. This is a common issue with OIDC libraries and OIDC SPA has a nice solution.</p></div></div>
<p>Let's move forward with building out this component and adding some logic to handle the user's authentication state. Some of the mark is purely for layout and styling, but the logic is what we're after:</p>
<ul>
<li><code>oidcTokens.decodedIdToken?.email as string</code> we type this as since the <code>decodedIdToken</code> isn't defined. If you want to pretype the <code>decodedIdToken</code> in the <code>createReactOidc</code> function, do so by providing a <code>decodedIdTokenSchema</code> key and optionally validate it with <a href="https://zod.dev/" target="_blank" rel="noopener noreferrer">zod</a>.</li>
</ul>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  content </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-2 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Authenticated</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-md</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">oidcTokens</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">decodedIdToken</span><span class="token operator" style="color:rgb(137, 221, 255)">?.</span><span class="token plain">email </span><span class="token keyword" style="font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">oidcTokens</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">decodedIdToken</span><span class="token operator" style="color:rgb(137, 221, 255)">?.</span><span class="token plain">sub </span><span class="token keyword" style="font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">rounded-md bg-indigo-500 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">logout</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> redirectTo</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"current page"</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        Log out</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Token</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  content </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Not authenticated.</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">login</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> doesCurrentHrefRequiresAuth</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript boolean" style="color:rgb(255, 88, 116)">true</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        Log in</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">text-xl pb-8 italic</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Your current status is:</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="4">
<li>Run the application:</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm run start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="5">
<li>Test the login and logout functionality. You should see the user's email and sub displayed when logged in. If you're using the Keycloak instance we set up earlier, you can use the non-admin user we created.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bonus">Bonus<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#bonus" class="hash-link" aria-label="Direct link to Bonus" title="Direct link to Bonus">​</a></h3>
<p>A very common use case is security API calls. An example <code>api.ts</code> file below shows how you would intercept all requests and append the <code>accessToken</code> to the headers.</p>
<p>This example is provided with Axios by <a href="https://docs.oidc-spa.dev/documentation/web-api" target="_blank" rel="noopener noreferrer">Keycloakify</a>. We'll implement it in <code>fetch</code> as an alternative.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"oidc"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Api</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getTodos</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">addTodo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token keyword" style="font-style:italic">void</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> baseURL </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">import</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">meta</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">API_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">url</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> options</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">RequestInit</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> oidc </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">oidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"We made a logic error: The user should be logged in at this point"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> headers </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">Authorization</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Bearer </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">oidc</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation function" style="color:rgb(130, 170, 255)">getTokens</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation">accessToken</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string-property property">"Content-Type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"application/json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetch</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">baseURL</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">url</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> headers </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">ok</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">HTTP error! status: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">response</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation">status</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">json</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> api</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Api</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getTodos</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/todo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">addTodo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/todo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      method</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"POST"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      body</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">JSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">stringify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We aren't setting this actual backend up, but you can see how you would use the <code>api.ts</code> file to make authenticated requests.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>This only covers the most very basic installation and usage of this library. There are a lot of different ways you leverage the tool and we invite you to investigate further. Some of which are:</p>
<ul>
<li>Auto Logout (due to inactivity)</li>
<li>Error Management (when login fails)</li>
<li>Globally enforced authentication (every route requires authentication)</li>
<li>Usage with routing libraries</li>
</ul>
<p>We'd love to hear how you're using OIDC SPA in your applications. If you have any questions or need help, feel free to reach out to us at <a href="https://phasetwo.io/contact/" target="_blank" rel="noopener noreferrer">Phase Two</a>. We're always happy to help.</p>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="keycloak" term="keycloak"/>
        <category label="oidc_spa" term="oidc_spa"/>
        <category label="keycloakify" term="keycloakify"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phase Two and Keycloakify, Making Keycloak Better Together]]></title>
        <id>https://phasetwo.io/blog/phasetwo-keycloakify-partnership/</id>
        <link href="https://phasetwo.io/blog/phasetwo-keycloakify-partnership/"/>
        <updated>2024-10-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two and Keycloakify deepen their relationship with sponsorship and adding our extension templates.]]></summary>
        <content type="html"><![CDATA[<div id="illustrationId" style="position:relative"><img src="https://phasetwo.io/blog/keycloakify/keycloakify-logo-hero-moving-DW_SYkPC.png" alt="Rotating react logo" style="width:200px;box-shadow:none;animation:rotate 20s linear infinite"><img src="https://phasetwo.io/blog/keycloakify/keycloakify-logo-hero-still-NiNHhekl.png" alt="keyhole" style="width:200px;box-shadow:none;position:absolute;top:0;left:0"></div>
<p>Phase Two has long been big fans of <a href="https://www.keycloakify.dev/" target="_blank" rel="noopener noreferrer">Keycloakify</a>. The work being done by <a href="https://github.com/garronej" target="_blank" rel="noopener noreferrer">Joseph Garrone</a> is in our opinion some of the best user-focused work in the Keycloak community. Keycloakify brings the ability to theme the Keycloak frontend applications: Login, Account, Admin(coming) using modern toolsets like React or Angular and theming systems like Tailwind or Material-UI. Keycloakify allows you to build quickly and deploy themes to your Keycloak installation in a manner that the existing Keycloak toolset (ftl templates) does not.</p>
<p>Many of Phase Two customers use Keycloakify and because we value it as an important piece of the Keycloak community, Phase Two has officially entered into a sponsorship agreement with Keycloakify.</p>
<p>To make using our <a href="https://github.com/p2-inc#our-extensions-" target="_blank" rel="noopener noreferrer">extensions</a> easier with Keycloakify, we've started with porting our <a href="https://phasetwo.io/blog/set-up-magic-links/" target="_blank" rel="noopener noreferrer">Magic Link</a> <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">extension</a> to Keycloakify templates. At present, those templates can be found in Phase Two's forked <a href="https://github.com/p2-inc/keycloakify-starter/tree/p2/magic-link-extension-templates/src/login/pages" target="_blank" rel="noopener noreferrer">Keycloakify Starter</a>. We are actively working on adding them to the main line of templates which can be customized directly from the Keycloakify CLI. Until that time, follow the <a href="https://docs.keycloakify.dev/styling-custom-extension-page" target="_blank" rel="noopener noreferrer">instructions</a> from Keycloakify to integrate those templates.</p>
<p>We've also joined the Keycloakify <a href="https://discord.gg/mJdYJSdcm4" target="_blank" rel="noopener noreferrer">Discord</a> for quick and direct communication.</p>
<p>Join us and the Keycloakify <a href="https://discord.gg/mJdYJSdcm4" target="_blank" rel="noopener noreferrer">community</a> to build themes and improve the experience of working with Keycloak.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="keycloak" term="keycloak"/>
        <category label="keycloak themes" term="keycloak themes"/>
        <category label="partnership" term="partnership"/>
        <category label="keycloakify" term="keycloakify"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Presentation on Extending Keycloak for All Your Identity Use Cases]]></title>
        <id>https://phasetwo.io/blog/keycloak-extensions-presentation/</id>
        <link href="https://phasetwo.io/blog/keycloak-extensions-presentation/"/>
        <updated>2024-09-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A detailed introduction to building Keycloak extensions. This talk presents an overview of Keycloak’s commonly used extension mechanisms, best practices for development and testing of extensions, and several exemplary, real-world examples. Finally, it puts it all together with a deep-dive into one such extension that is available in the Phase Two keycloak-events extension.]]></summary>
        <content type="html"><![CDATA[<p>We recently gave a talk at the <a href="https://keyconf.dev/" target="_blank" rel="noopener noreferrer">Keyconf24</a> conference in Vienna on how to extend Keycloak using its extensible SPI structure. In addition to showing what is possible and how to get started in building extensions, we also use our <a href="https://github.com/p2-inc/keycloak-events" target="_blank" rel="noopener noreferrer">Events and Webhooks</a> extension as a real-world example. The hosts of the conference have posted the <a href="https://www.youtube.com/watch?v=t8u-QO02Qn8?si=OH6V1w564UysihSu" target="_blank" rel="noopener noreferrer">video of the talk</a> on Youtube.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/t8u-QO02Qn8?si=OH6V1w564UysihSu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>
<p>Take a look, and try it out today with our <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">free hosted Keycloak</a> instances that run all of our <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">open source Keycloak extensions</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="release" term="release"/>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="extensions" term="extensions"/>
        <category label="events" term="events"/>
        <category label="webhooks" term="webhooks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. FrontEgg, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/"/>
        <updated>2024-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus FrontEgg and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Keycloak and Frontegg are two prominent solutions in the identity and access management (IAM) space, each serving distinct needs. Keycloak is an open-source IAM solution with over eight years of development, known for its scalability and deep customization options, allowing organizations full control over user identity management. On the other hand, Frontegg is a cloud-native platform designed for quick deployment and integration, specifically tailored for SaaS applications, offering a user-friendly management experience. In this blog post, we will compare Keycloak and Frontegg based on cost structure, deployment options, customization, scalability, functionality, and support.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-structure">Cost Structure<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#cost-structure" class="hash-link" aria-label="Direct link to Cost Structure" title="Direct link to Cost Structure">​</a></h3>
<p><strong>Keycloak</strong>
As an open-source solution, Keycloak is free to use, making it an attractive option for organizations of all sizes. While there are no licensing fees, organizations need to consider hosting costs and the resources required for system management. This cost model makes Keycloak particularly appealing for startups and enterprises that can manage their own infrastructure effectively.</p>
<p><strong>Frontegg</strong>
Frontegg operates on a subscription-based pricing model, starting with a free 30-day trial that unlocks all features. Following the trial, costs begin at $499 per month for the Growth Plan. While it simplifies IAM implementation and reduces developmental burden, organizations must weigh the recurring costs against the value gained from Frontegg's streamlined user management capabilities.<br>
<!-- -->Frontegg provides a nice “free forever” tier that gives you enough to play with the platform. You would not want to use this for a production application with serious user covenants. To move upward, it is based on features and requires sales contact to assess pricing. While the next tiers allow for “growth to unlimited users”, pricing is heavily dependent on that usage.</p>
<p><strong>Winner</strong></p>
<p>Keycloak stands out as a more economically advantageous option, particularly for organizations with the technical capability to manage their own infrastructure. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-options">Deployment Options<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#deployment-options" class="hash-link" aria-label="Direct link to Deployment Options" title="Direct link to Deployment Options">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak offers flexibility in deployment, supporting both on-premises and cloud-based solutions. This capability allows organizations to maintain control over their identity management infrastructure, making it suitable for varying operational requirements and compliance needs.</p>
<p><strong>Frontegg</strong>
Frontegg is primarily a cloud-based solution designed for rapid deployment, offering a plug-and-play experience that facilitates quick integration into existing applications. While it doesn’t provide robust on-premises capabilities, it excels in cloud environments, catering particularly well to SaaS platforms aiming for fast time-to-market.</p>
<p><strong>Winner</strong></p>
<p>Keycloak offers superior deployment flexibility, accommodating both complex cloud and on-premises infrastructures. Frontegg, however, excels in ease of use for cloud-based deployments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#customization-and-branding" class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is renowned for its extensive customization options, enabling organizations to tailor authentication flows, user interfaces, and security protocols to meet their specific needs. Its open-source nature allows for modifications that avoid vendor lock-in, facilitating a user experience that matches organizational needs. While branding and theming Keycloak is possible, the current ability to do so is not straightforward. Phase Two has made this easier through extending the Keycloak Admin UI (<a href="https://phasetwo.io/docs/getting-started/customizing-ui/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/docs/getting-started/customizing-ui/</a>) which is available in all its <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosted</a> offerings.</p>
<p><strong>Frontegg</strong>
Frontegg also provides customization capabilities but focuses on delivering a user-friendly interface that prioritizes speed and accessibility. It allows basic branding and minor adjustments but may not match the depth of customization available in Keycloak. The branding tool built by Frontegg is well done and prioritizes the user experience.</p>
<p><strong>Winner</strong></p>
<p>Keycloak takes the lead in customization and flexibility, providing organizations more granular control over user interfaces and workflows. While Frontegg leads with providing the a strong user experience for branding customization.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is designed for high scalability, accommodating large user bases through horizontal scaling and clustered deployments. This architecture makes it suitable for extensive enterprise environments that require robust performance under varying loads.</p>
<p><strong>Frontegg</strong>
Frontegg is also built with scalability in mind, catering to growing SaaS applications through its multi-tenant architecture. While it's designed to manage increasing user volumes effectively, its performance may not yet match Keycloak's capabilities in extremely large-scale environments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the preferred option for larger applications requiring robust scalability. However, Frontegg is well-suited for rapidly growing applications, especially in the SaaS space.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#functionality-and-flexibility" class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility">​</a></h3>
<p><strong>Keycloak</strong>:Keycloak<!-- --> provides a comprehensive suite of IAM features, including various authentication methods, fine-grained access control, and advanced identity federation capabilities. Its versatility in integrating with existing infrastructures makes Keycloak a powerful solution for complex IAM scenarios.</p>
<p><strong>Frontegg</strong>
Frontegg focuses on user management, facilitating seamless authentication and role management. Its end-to-end user management platform integrates easily with existing applications, offering a robust alternative for companies seeking quick implementation without extensive customization.</p>
<p><strong>Winner</strong></p>
<p>Keycloak leads in functionality and versatility, offering a broader range of advanced IAM features, making it a better choice for diverse security needs. Phase Two can provide <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">expert enterprise help</a>, custom development, and migrations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#integration-capabilities" class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak’s extensive integration capabilities include support for various identity providers and protocols like SAML, OAuth 2.0, and OpenID Connect. This allows organizations to leverage existing systems while enabling seamless authentication across applications.</p>
<p><strong>Frontegg</strong>
Frontegg also supports a wide range of integrations but primarily focuses on simplifying connections for SaaS applications. Its plug-and-play approach makes it easy to incorporate into existing products but may lack the depth of integration options available in Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak emerges as the more versatile option, providing greater flexibility for organizations with complex integration requirements. Frontegg offers a great and easy interface to integrate with things they have support for.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#community-and-support" class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak benefits from a robust open-source community, with extensive documentation, forums, and active user contributions. Organizations can rely on community-driven support and resources to troubleshoot issues and share best practices.</p>
<p><strong>Frontegg</strong>
Frontegg provides dedicated customer support along with a library of resources. While still relatively new, it focuses on delivering good customer experiences and support for its users. Much of Frontegg’s Enterprise tier is focused on providing support.</p>
<p><strong>Winner</strong></p>
<p>Keycloak's established community offers a good way to get answers and help. Frontegg’s support channels are only available with the correct license. Phase Two helps to fill the gap between community help and Enterprise support (<a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/support/</a>).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-should-i-choose-iams">How Should I Choose IAMs?<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#how-should-i-choose-iams" class="hash-link" aria-label="Direct link to How Should I Choose IAMs?" title="Direct link to How Should I Choose IAMs?">​</a></h3>
<p>Choosing the right IAM solution depends on your organization's specific needs and strategic goals. Keycloak is ideal for those seeking a customizable, open-source platform with extensive features and deployment flexibility. Frontegg, with its focus on rapid implementation and simplicity for SaaS applications, is a compelling option for tech companies looking to reduce development time and overhead.</p>
<p>If you're looking to explore Keycloak further or have questions about <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">integrating</a> it into your organization, please <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">reach out for assistance</a>. The right IAM solution can help you secure your digital environment and streamline user management effectively.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="frontegg" term="frontegg"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. PingIdentity, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/"/>
        <updated>2024-08-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus PingIdentity and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an alternative to PingIdentity for Authentication Solutions</p>
<p>In the evolving landscape of identity and access management (IAM), organizations face critical decisions regarding the tools that will best meet their needs. Keycloak and <a href="https://www.pingidentity.com/" target="_blank" rel="noopener noreferrer">Ping Identity</a> are two noteworthy solutions, each exhibiting unique features that cater to different organizational requirements. This blog provides a detailed comparison of open-source Keycloak and the commercial offering of Ping Identity across essential aspects of IAM solutions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-model">Deployment Model<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#deployment-model" class="hash-link" aria-label="Direct link to Deployment Model" title="Direct link to Deployment Model">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is an open-source IAM solution that can be deployed both <a href="https://phasetwo.io/product/onprem/" target="_blank" rel="noopener noreferrer">on-prem</a> and in cloud environments. This flexibility allows organizations to choose their preferred hosting option while maintaining control over their identity management infrastructure. Its ability to adapt quickly to new standards makes it particularly suitable for agile development environments.</p>
<p><strong>PingIdentity:</strong>
Ping Identity offers a hybrid deployment model that combines both cloud-based and on-premises options. This versatility is particularly beneficial for large enterprises where regulatory compliance dictates specific control over identity services.</p>
<p><strong>Winner</strong></p>
<p>Tie. Both solutions offer strong options for those seeking to deploy the way they want to and need to. Both provide enterprise-centric hybrid options that accommodate complex infrastructure needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-flexibility">Customization and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#customization-and-flexibility" class="hash-link" aria-label="Direct link to Customization and Flexibility" title="Direct link to Customization and Flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak shines with its extensive customization features, allowing developers to modify everything from login pages to role-based access controls. Being open-source software, organizations have the freedom to make adjustments at any time without vendor lock-in, making it a powerful and cost-effective solution. It can be used as a standalone solution or integrated as an element of a broader IT infrastructure.</p>
<p><strong>PingIdentity:</strong>
Ping Identity also offers customization capabilities but often demands more technical effort to implement tailored solutions. While it is configurable, achieving significant customizations may be more challenging compared to Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak wins for its superior flexibility and ease of customization, particularly appealing to developers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-ease-of-use">User Experience and Ease of Use<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#user-experience-and-ease-of-use" class="hash-link" aria-label="Direct link to User Experience and Ease of Use" title="Direct link to User Experience and Ease of Use">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is designed with usability in mind, featuring an intuitive interface and straightforward setup process. Its fast, agile nature allows it to adapt quickly to changing application landscapes, ensuring accessibility for users. It supports Single Sign-On (SSO), identity brokering, and various protocols (OAuth2, OpenID Connect, SAML), streamlining user experience.</p>
<p><strong>PingIdentity:</strong>
Ping Identity prioritizes a comprehensive user experience targeting both technical and non-technical users. Although it features a polished interface, the initial setup can be complex, resulting in a steeper learning curve for administrators.</p>
<p><strong>Winner</strong></p>
<p>Keycloak edges out in user-friendliness during initial setup and usability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak:</strong>
With its cloud-native adaptation and support for high-volume user bases, Keycloak scales effectively to meet organizational needs. However, the management of a scaled Keycloak system can require significant time and resources without <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">proper enterprise support</a>.</p>
<p><strong>PingIdentity:</strong>
Ping Identity is designed for large-scale environments with robust scalability features, ensuring seamless performance under heavy loads, making it particularly suited for large organizations.</p>
<p><strong>Winner</strong></p>
<p>Ping Identity excels in scalability and performance, proving its capability to manage large-scale authentication requests. However, this comes at a larger cost which could be offset by taking on the management of Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pricing-model">Pricing Model<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#pricing-model" class="hash-link" aria-label="Direct link to Pricing Model" title="Direct link to Pricing Model">​</a></h3>
<p><strong>Keycloak:</strong>
Being open-source software, Keycloak has no licensing fees, making it highly cost-effective. However, organizations should consider potential indirect costs related to deployment and system management.</p>
<p><strong>PingIdentity:</strong>
Ping Identity operates on a traditional licensing model based on user count and features, which can lead to higher costs, particularly for larger deployments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the clear winner for pricing, offering a more budget-friendly option. Coupled with a cost-conscious hosting provider, this can save a corporation literal millions of dollars over the course of an implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-ecosystem">Integration Ecosystem<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#integration-ecosystem" class="hash-link" aria-label="Direct link to Integration Ecosystem" title="Direct link to Integration Ecosystem">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak provides a strong API and powerful Admin portal, making it compatible with a wide range of frameworks like Spring Boot, Django, React, and more. Its supportive community extensions with integrations and continuous improvements, enhancing its adaptability.</p>
<p><strong>PingIdentity:</strong>
Ping Identity features a curated integration ecosystem focused on enterprise-level applications, providing documentation and support for integrations, but may lack the range of community-driven options available with Keycloak.</p>
<p><strong>Winner</strong>
Keycloak takes the lead for its extensive integration options and supportive community. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="advanced-features">Advanced Features<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#advanced-features" class="hash-link" aria-label="Direct link to Advanced Features" title="Direct link to Advanced Features">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports fine-grained authorization and customizable themes, making it a flexible and cost-effective solution for diverse security needs. Its rapid adaptability to new technologies ensures organizations can stay relevant in a changing landscape.</p>
<p><strong>PingIdentity:</strong>
Ping Identity excels with advanced features such as fraud detection, identity verification, and robust orchestration capabilities, positioning it as a strong choice for larger enterprises requiring comprehensive security and compliance.</p>
<p><strong>Winner</strong>
Both Keycloak and Ping Identity offer valuable advanced features, with Keycloak providing flexibility for diverse environments, while Ping Identity delivers robust security measures suitable for complex enterprise needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which one is best for me?<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#which-one-is-best-for-me" class="hash-link" aria-label="Direct link to Which one is best for me?" title="Direct link to Which one is best for me?">​</a></h3>
<p>Both Keycloak and Ping Identity provide essential IAM solutions, but their strengths cater to different organizational needs. Keycloak excels in customization, user experience, cost-effectiveness, and flexibility, making it ideal for organizations prioritizing quick adaptation and flexibility. In contrast, Ping Identity stands out with its hybrid deployment capabilities, scalability, and advanced security functionalities, positioning it as a strong choice for larger enterprises. Ultimately, the decision should align with the specific requirements, resources, and strategic goals of your organization.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://scheduler.zoom.us/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="pingidentity" term="pingidentity"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing Angular Apps with Keycloak]]></title>
        <id>https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/</id>
        <link href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/"/>
        <updated>2024-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to quickly secure a Angular application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization]]></summary>
        <content type="html"><![CDATA[<p>In this article we'll be using <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> to quickly secure a Angular application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/frameworks/angular" target="_blank" rel="noopener noreferrer">Angular example</a>.</p><p>If you want to see a live example, visit the <a href="https://phasetwo-angular-example.vercel.app/" target="_blank" rel="noopener noreferrer">Phase Two Angular example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-a-keycloak-instance" class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://phasetwo.io/dashboard/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-an-oidc-client" class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to Off.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config " src="https://phasetwo.io/assets/images/capability-config-995c6bc68516bc541a9372f1bce7ad86.png" width="3000" height="2068" class="img_ev3q"></p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#oidc-config" class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#adding-a-non-admin-user" class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-angular-project">Setting up a Angular Project<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#setting-up-a-angular-project" class="hash-link" aria-label="Direct link to Setting up a Angular Project" title="Direct link to Setting up a Angular Project">​</a></h2>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>We will use the Phase Two Angular example code here, but the logic could easily be applied to any existing application.</p></div></div>
<ol>
<li>Clone the Phase Two <a href="https://github.com/p2-inc/examples/" target="_blank" rel="noopener noreferrer">example repo</a>.</li>
<li>Open the Angular <a href="https://github.com/p2-inc/examples/tree/main/frameworks/angular" target="_blank" rel="noopener noreferrer">folder</a> within <code>/frameworks/angular</code>.</li>
<li>Run <code>npm install</code> and then <code>npm run start</code>. This example leverages <a href="https://github.com/manfredsteyer/angular-oauth2-oidc" target="_blank" rel="noopener noreferrer">angular-oauth2-oidc</a> OIDC methods.</li>
<li>We'll review where we configure out Keycloak instance. Open the <code>src/app/auth.config.ts</code> file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code.</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authCodeFlowConfig</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">AuthConfig</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Update this with the url and realm of your hosted Keycloak instance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  issuer</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://app.phasetwo.io/auth/realms/p2examples"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  redirectUri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">origin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/index.html"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Update this to the Client ID you created in the OIDC Client section</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"angular"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  responseType</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"code"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  scope</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"openid profile email offline_access"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  showDebugInformation</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Those are used to configure the <code>oauthService</code> in the <code>src/app/user/user.component.ts</code> file. In the constructor of the component, this is passed in.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">private</span><span class="token plain"> oauthService</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">OAuthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">configure</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authCodeFlowConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// required to initialize the client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">loadDiscoveryDocumentAndTryLogin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">setupAutomaticSilentRefresh</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">events</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">pipe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">type</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'token_received'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">subscribe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">loadUserProfile</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="6">
<li>The <code>UserActivation.component.ts</code> file contains additional methods that will assist with the interaction of the html template.</li>
</ol>
<p>For handling login and logout, the following methods are used:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">signIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">initLoginFlow</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">signOut</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">logOut</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>while we also define additional helper methods to get user information (username, email, etc) along with raw Token values. A couple are provided below as an example.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">get</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">userName</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> claims </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getIdentityClaims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> claims</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'given_name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">get</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">idToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> token </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">oauthService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getIdToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">decodeAndStringifyToken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">''</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="7">
<li>Switching to the html template for the user component, <code>src/app/user/user.component.html</code>, we can see how the login and logout buttons are rendered. The buttons are conditionally rendered based on the user's authentication status based on the presence of the <code>idToken</code>.</li>
</ol>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">idToken</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show user data --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show logout button --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">*ngIf</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">!idToken</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- show login button --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.</p>
<ol start="10">
<li>Open <a href="http://localhost:4200/" target="_blank" rel="noopener noreferrer">localhost:4200</a>. You will see the Phase Two example landing page. You current state should be <strong>Not authenticated</strong>. Click <strong>Log In</strong>. This will redirect you to your login page.</li>
</ol>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Use the non-admin user created in the previous section to sign in.</p></div></div>
<ol start="11">
<li>Enter the credentials of the non-admin user you created. Click <strong>Submit</strong>. You will then be redirected to the application. The Phase Two example landing page now loads your <strong>Authenticated</strong> state, displaying your user's email and name.</li>
<li>Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="learning-more">Learning more<a href="https://phasetwo.io/blog/instant-user-management-and-sso-for-angular/#learning-more" class="hash-link" aria-label="Direct link to Learning more" title="Direct link to Learning more">​</a></h2>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="tutorial" term="tutorial"/>
        <category label="frameworks" term="frameworks"/>
        <category label="angular" term="angular"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="sso" term="sso"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. OneLogin, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/"/>
        <updated>2024-07-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus OneLogin and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an alternative to OneLogin for Authentication Solutions</p>
<p>Keycloak and <a href="https://www.onelogin.com/" target="_blank" rel="noopener noreferrer">OneLogin</a> (by One Identity) are both important players in the identity and access management (IAM) space, each catering to different organizational needs. Keycloak is an open-source solution with over eight years of active development, known for its scalability and customization. OneLogin, on the other hand, is a commercial product emphasizing user-friendly interfaces and extensive integration options. This article compares Keycloak and OneLogin based on cost, deployment, customization, scalability, functionality, integration, and support.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-structure">Cost Structure<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#cost-structure" class="hash-link" aria-label="Direct link to Cost Structure" title="Direct link to Cost Structure">​</a></h3>
<p><strong>Keycloak:</strong>
As an open-source platform, Keycloak is free to use, making it a cost-effective option for businesses of all sizes. While there are no licensing fees, users must be prepared to manage their own hosting and infrastructure, which can incur costs depending on resource needs.</p>
<p><strong>OneLogin:</strong>
OneLogin operates on a subscription model, with pricing starting at $2 per month per user for its basic services. Advanced features, such as multi-factor authentication (MFA), require higher-tier licenses, which can lead to increased costs, particularly for large enterprises with many users requiring advanced security features. Further pricing is opaque and requires engaging OneLogin sales.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is more economically advantageous and transparent, particularly for organizations equipped to manage their own hosting. Leverage Phase Two's <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Free Hosting</a> Tier to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-and-maintenance">Deployment and Maintenance<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#deployment-and-maintenance" class="hash-link" aria-label="Direct link to Deployment and Maintenance" title="Direct link to Deployment and Maintenance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports on-premises and private cloud deployments. Organizations have full control over configurations, but they must also bear the responsibility of maintenance and updates.</p>
<p><strong>OneLogin:</strong>
OneLogin is primarily a cloud-based solution but also provides on-premises options. It is managed by the vendor, meaning organizations benefit from automatic updates and less internal maintenance.</p>
<p><strong>Winner</strong></p>
<p>OneLogin simplifies deployment and reduces maintenance tasks for IT teams.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#customization-and-branding" class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak allows extensive customization, enabling organizations to tailor authentication workflows and user interfaces according to specific needs. When unifying login from multiple systems to a single one, that means Keycloak and adapt and support as necessary. However, this level of customization may require more technical expertise.</p>
<p><strong>OneLogin:</strong>
While OneLogin offers a customizable interface, its options are more limited compared to Keycloak. It focuses on providing a unified experience without deep customization. Specific business use-cases may not be supported.</p>
<p><strong>Winner</strong></p>
<p>Keycloak wins in customization and flexibility; OneLogin provides some simplicity without the ability to adapt to specific needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is designed to scale efficiently, accommodating large user bases through horizontal scaling and clustered deployments, making it suitable for extensive enterprise environments.</p>
<p><strong>OneLogin:</strong>
As a cloud solution, OneLogin is also scalable, but is typically geared towards medium-sized enterprises. It can handle multiple applications but may not perform optimally under very high user loads.</p>
<p><strong>Winner</strong></p>
<p>Both will likely be able to scale, but Keycloak is the better choice for large-scale applications requiring high concurrency and user sessions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#functionality-and-flexibility" class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak provides a comprehensive suite of features, including diverse authentication methods, fine-grained access control, and strong identity federation capabilities (OpenID Connect, OAuth 2.0, SAML 2.0). It allows for deeper integration with existing systems.</p>
<p><strong>OneLogin:</strong>
OneLogin is built using Ruby on Rails and includes essential features such as SSO and MFA, using artificial intelligence to assess user risk scores, enhancing security functionality. However, it may not match Keycloak in offering a wide array of advanced features for complex IAM scenarios.</p>
<p><strong>Winner</strong></p>
<p>Keycloak holds an advantage with its broader range of functionalities and flexibility of integration.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#integration-capabilities" class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports integration with various Identity Providers and protocols, enabling flexible authentication across systems. It also has built-in support for many Social Identity Providers, like Google, Twitter, Facebook, Stack Overflow. These can be configured in an advanced manner.</p>
<p><strong>OneLogin:</strong>
OneLogin features a well-developed library of pre-built integrations for third-party applications, providing a straightforward way to manage user access across different systems. It also integrates with HR systems and supports directory integrations, which can be particularly useful for SMEs relying on a variety of SaaS applications.</p>
<p><strong>Winner</strong></p>
<p>The choice depends on specific needs; OneLogin is easier for basic integrations, while Keycloak offers greater versatility for complex requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#community-and-support" class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support">​</a></h3>
<p><strong>Keycloak:</strong>
<a href="https://github.com/keycloak" target="_blank" rel="noopener noreferrer">Keycloak</a> has a supportive open-source community, with extensive documentation and user forums for troubleshooting and guidance. Phase Two offers <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a> for hosted and on-prem customers, or those with their own Keycloak deployment.</p>
<p><strong>OneLogin:</strong>
OneLogin provides dedicated customer support, along with comprehensive documentation and professional services for additional assistance.</p>
<p><strong>Winner</strong></p>
<p>Keycloak’s community offers robust support for users, while OneLogin provides more direct, vendor-driven help.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which one is best for me?<a href="https://phasetwo.io/blog/keycloak-vs-onelogin-open-source-alternative/#which-one-is-best-for-me" class="hash-link" aria-label="Direct link to Which one is best for me?" title="Direct link to Which one is best for me?">​</a></h3>
<p>When selecting an IAM solution, it’s essential to evaluate your organization’s specific needs. Keycloak is ideal for those seeking an open-source, highly customizable platform that can scale to meet complex requirements. In contrast, OneLogin is well-suited for enterprises looking for an easy-to-use, managed service with a focus on integrations. As one’s implementation grows in size, the cost may become too high to entertain.</p>
<p>Working with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://scheduler.zoom.us/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="onelogin" term="onelogin"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. WorkOS, an Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/"/>
        <updated>2024-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus WorkOS and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<p>Exploring Keycloak as an Alternative to WorkOS for Authentication Solutions</p>
<p>Keycloak and WorkOS are both identity and access management (IAM) solutions that offer various features for authentication, authorization, and user management. While they serve similar purposes, there are key differences between the two platforms that make them unique and suitable for different use cases. Keycloak is an open source platform under active development for over 8 years and known for its scalability and customization options. WorkOS is a closed-source platform that can quickly integrate SSO to an application. In this blog post, we'll explore the key differences between Keycloak and WorkOS, focusing on factors such as cost of ownership, scalability, deployments, and maintenance.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-ownership">Cost of Ownership<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#cost-of-ownership" class="hash-link" aria-label="Direct link to Cost of Ownership" title="Direct link to Cost of Ownership">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is an open-source solution and is available for free, making it a cost-effective choice for startups, small businesses, and enterprises alike. It allows organizations to save on licensing fees and scale without worrying about escalating SSO, authentication, and other costs. It does, however, require infrastructure to host and run the application, which can run up costs if a business does not have the proper internal resources or external support. This provides a more predictable cost model when bringing together multiple applications, knowing that as additional connections are created, costs will not increase. The biggest factor in cost becomes the scale of needed infrastructure.</p>
<p><strong>WorkOS:</strong>
WorkOS operates on a subscription-based model, where pricing is tied to the number of monthly active users. While the first million users are included (at time of publishing), WorkOs charges for Custom domains, SSO connections, SCIM, and Audit logs. The more enterprise customers you have, the more your costs will grow. This approach allows customers to scale their identity management solution as needed, while also gaining access to additional features and support based on their chosen plan. Organizations must keep in mind that with every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket, becoming a large financial piece of the overall IT spend.</p>
<p><strong>Winner</strong></p>
<p>With the proper hosting solution, Keycloak is a far more cost-effective choice. Since cost isn't driven by features or users, the ongoing cost is fixed, enabling organizations to allocate funds to other resources. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-and-maintenance">Deployment and Maintenance<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#deployment-and-maintenance" class="hash-link" aria-label="Direct link to Deployment and Maintenance" title="Direct link to Deployment and Maintenance">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is a solution that can be deployed on-premises or in a private cloud. It provides complete control over the infrastructure and allows customization and integration with existing systems. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.</p>
<p>Due to Keycloak’s self-hosted nature, however, organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure.</p>
<p><strong>WorkOS:</strong>
WorkOS is a cloud-based identity platform that is hosted and managed by WorkOS. It offers a simpler deployment process as there is no need to set up or maintain any infrastructure.
Organizations benefit from reduced internal IT burden, as WorkOS handles updates, security patches, and system maintenance.</p>
<p><strong>Winner</strong></p>
<p>WorkOS provides a more hassle-free identity management experience by offloading infrastructure responsibilities through a fully managed service.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#customization-and-branding" class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak offers unparalleled customization and extensibility -- from authentication flows and user federation to role-based access control (RBAC) and fine-grained permission -- enabling organizations to tailor the user experience, login screens, and authentication process to their specific needs. This level of customization requires working in and gaining knowledge of the capabilities of Keycloak.</p>
<p><strong>WorkOS:</strong>
WorkOS on the other hand, offers limited customization options and focuses more on providing a unified user experience across different identity providers. We certainly tip our hats to WorkOS for the fantastic job they’ve done at creating a wonderful user experience from a design and user experience perspective.</p>
<p><strong>Winner</strong></p>
<p>Keycloak by a nose. Keycloak offers complete control over the look and feel of the authentication and authorization process. However, WorkOS has done a strong job at simplifying and constraining the world for quick implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak:</strong>
With its robust architecture, Keycloak is designed to handle large-scale user bases, making it an ideal choice for enterprises. It can be easily scaled horizontally by adding more instances or running in a clustered mode, ensuring high performance and reliability. Keycloak offers a great platform to unify on for companies that find themselves with a burgeoning number of applications that have each gone their own way of IAM implementation.</p>
<p><strong>WorkOS:</strong>
While WorkOS offers scalable infrastructure, it's better suited for smaller to medium-sized applications with moderate to high traffic volumes. Its architecture is optimized for efficient performance, but may not be as well-equipped to handle extremely high volumes of user traffic or a ballooning of connected enterprises. It’s better at working with a specific application rather than connecting multiple applications.</p>
<p><strong>Winner</strong></p>
<p>Depends. Keycloak is a strong contender for large-scale applications looking to scale, but WorkOS may deliver stronger performance for small-mediums sized apps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#functionality-and-flexibility" class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak offers a comprehensive suite of features to meet the needs of modern apps. It provides secure authentication methods, including username/password, social logins, and MFA, as well as fine-grained authorization controls through RBAC and ABAC. Keycloak excels in identity federation with support for SAML and OpenID Connect, and its SSO feature offers a seamless user experience across apps. It also offers robust user management capabilities, customization options, self-registration, and active community support. For any functionality that might be missing, extensions to Keycloak can be written and deployed. This allows for Keycloak to bend and mold to the needs of its developers.</p>
<p><strong>WorkOS:</strong>
WorkOS offers robust authentication and authorization capabilities, including role-based access control, policy management, and support for multiple identity standards. Its single sign-on feature provides a seamless user experience across apps and services. WorkOS also features self-service registration, account recovery, and a comprehensive user directory. Integration with third-party apps is simplified through APIs and pre-built integrations, while analytics and logging tools help with monitoring and compliance.</p>
<p><strong>Winner</strong></p>
<p>Both WorkOS and Keycloak offer robust functionality, but Keycloak's advanced identity federation capabilities, fine-grained authorization controls, and ability to customize and extend give it an edge over WorkOS.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#integration-capabilities" class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities">​</a></h3>
<p><strong>Keycloak:</strong>
The identity brokering capability of Keycloak enables delegation authentication to external Identity Providers (IdPs), applications, and protocols such as LDAP, SAML, OAuth, OpenID Connect. Managing internal permissions and roles, security checks, login experiences across different systems can be done seamlessly.</p>
<p>If you’re switching from WorkOS, for example, Keycloak can be configured to act as a broker that sits between WorkOS and your applications to leverage the strengths of both platforms. For example, WorkOS can be used for external user management, while Keycloak can handle more sensitive, internal authentication needs.</p>
<p><strong>WorkOS:</strong>
There is a narrower focus on authentication, but WorkOS provides a uniform API to integrate with popular identity providers like Google, Microsoft, and Okta. The unified interface reduces the complexity and development time.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the most versatile choice for organizations with complex requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#community-and-support" class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support">​</a></h3>
<p><a href="https://github.com/keycloak" target="_blank" rel="noopener noreferrer">Keycloak</a> has a large and active community of developers and contributors, ensuring continuous development, bug fixes, and updates. It has extensive documentation, forums, and <a href="https://keycloak.discourse.group/" target="_blank" rel="noopener noreferrer">community support channels</a> where users can seek help and share knowledge. WorkOS also provides support but may have limitations in terms of community contributions and public resources. It offers dedicated support channels and resources to its users for assistance and issue resolution.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which One Is Best for Me?<a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/#which-one-is-best-for-me" class="hash-link" aria-label="Direct link to Which One Is Best for Me?" title="Direct link to Which One Is Best for Me?">​</a></h3>
<p>In determining the most suitable identity and access management solution for your organization, it is essential to consider the specific requirements and priorities of your enterprise. In summary, Keycloak is an open-source identity and access management solution that offers extensive customization and integration capabilities, making it suitable for organizations with complex requirements. WorkOS, on the other hand, is a cloud-based identity platform that simplifies integration and deployment but may have limitations in terms of scalability and customization options.</p>
<p>Working with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://scheduler.zoom.us/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="workos" term="workos"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phase Two Organizations now support shared Identity Providers (IdPs)]]></title>
        <id>https://phasetwo.io/blog/phase-two-organizations-shared-idps/</id>
        <link href="https://phasetwo.io/blog/phase-two-organizations-shared-idps/"/>
        <updated>2024-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two Organizations now support shared Identity Providers (IdPs) for mapping multiple organizations to a single IDP.]]></summary>
        <content type="html"><![CDATA[<p>An exciting new feature has been added to <a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Phase Two Organizations Extension</a>! Organizations now support <a href="https://github.com/p2-inc/keycloak-orgs/issues/249" target="_blank" rel="noopener noreferrer">shared Identity Providers</a> (IdPs) for mapping multiple organizations to a single IDP. This feature is especially useful for organizations that have multiple organizations that need to share the same IDP.</p>
<p>Often asked for by customers, this feature will now allow organizations to share the same IDP across multiple organizations. This will allow for a more streamlined user experience and easier management of users across multiple organizations. Meaning that admins can still keep organizations logically separated, but support the same IdP for authentication and authorization. The primary use case for this is applications that support both <strong>Google social login and Google Workspace enterprise SSO login</strong>. Some of our customers have 100's of organizations that use Google Workspace SSO. This change allows you to use a single OIDC integration with Google, rather than configuring 100's of SAML integrations.</p>
<p>Configuration is fully supported in the Keycloak Admin UI, is up-to-date with the latest Keycloak version, and is fully tested. This feature is available now to any Phase Two hosted customers and can be adopted by anyone leveraging the Phase Two Keycloak Organization Extension.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="organizations" term="organizations"/>
        <category label="idp" term="idp"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keycloak vs. Okta, a Open-Source Alternative]]></title>
        <id>https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/</id>
        <link href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/"/>
        <updated>2024-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An in-depth comparison of Keycloak versus Okta and why Keycloak offers a strong and compelling alternative to a paid Authentication and Authorization service.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-keycloak-as-an-alternative-to-okta-for-authentication-solutions">Exploring Keycloak as an Alternative to Okta for Authentication Solutions<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#exploring-keycloak-as-an-alternative-to-okta-for-authentication-solutions" class="hash-link" aria-label="Direct link to Exploring Keycloak as an Alternative to Okta for Authentication Solutions" title="Direct link to Exploring Keycloak as an Alternative to Okta for Authentication Solutions">​</a></h2>
<p>In today's rapidly evolving digital landscape, securing and managing user identities has become more critical than ever. Organizations are faced with the challenge of choosing the right Identity and Access Management (IAM) solution that balances cost, ease of implementation, and robust feature sets. Two popular contenders in this space are Keycloak and Okta. Keycloak, an open-source solution developed by Red Hat, offers extensive customizability and a community-driven support model. On the other hand, Okta, a leading cloud-based IAM provider, promises quick deployment and comprehensive security features through its subscription-based service. In this blog post, we will delve into a detailed comparison of Keycloak and Okta, examining their costs, total cost of ownership, implementation processes, and the rich array of features and capabilities each brings to the table. Whether you're a small startup or a large enterprise, understanding these key differences will help you make an informed decision for your identity management needs.</p>
<p>We've compared <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Keycloak to Auth0</a> and it's worth noting that Auth0 is owned by Okta. The differences between the offerings are subtle, where Auth0 bills it more as the "developer" tool while Okta is for "SSO". They are separate subscriptions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-ownership">Cost of Ownership<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#cost-of-ownership" class="hash-link" aria-label="Direct link to Cost of Ownership" title="Direct link to Cost of Ownership">​</a></h3>
<p>When evaluating Identity and Access Management (IAM) solutions, both upfront cost and total cost of ownership (TCO) are critical considerations. There are many factors to think about with a total cost-of-ownership. We've written extensively about <a href="https://phasetwo.io/blog/open-source-iam/">choosing an Open-Source IAM</a> over a managed service.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta">Okta:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta" class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:">​</a></h4>
<p>Okta operates on a subscription-based pricing model, with costs varying based on the number of users and selected features. This SaaS solution tries to simplify cost management by bundling infrastructure, maintenance, and support into its subscription fees. Organizations benefit from reduced internal IT burden, as Okta handles updates, patches, and system maintenance. However, the per-user costs can add up, especially for larger organizations, potentially leading to higher ongoing expenses compared to an open-source alternative like Keycloak. While Okta provides scalability, allowing businesses to grow without worrying about infrastructure investments, the costs that are incurred can quickly balloon far out of the original projections. With every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket in multi $100K+, becoming a large financial piece of the overall IT spend.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak">Keycloak:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak" class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:">​</a></h4>
<p>Keycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures.</p>
<p>Keycloak, being an open-source solution, stands out with its zero licensing fees, regardless of the number of users or the scale of the project. This makes it an attractive option for organizations looking to minimize expenditures. However, it's important to note that while Keycloak is free to use, it does require infrastructure to <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">host</a> and run the application. This could involve costs related to cloud services or on-premises hardware. Additionally, maintaining and updating Keycloak, as well as implementing customizations, may necessitate dedicated internal resources or external support, which can add to the overall expenses. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Leveraging Phase Two's <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">managed hosting</a> provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application's needs grow for users and integrations, Keycloak quickly becomes a far more cost-effective choice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="maintenance">Maintenance<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#maintenance" class="hash-link" aria-label="Direct link to Maintenance" title="Direct link to Maintenance">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta-1">Okta:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta-1" class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:">​</a></h4>
<p>A strong advantage of Okta is that it is a managed service. From a Dev Ops perspective, it requires minimal maintenance. The Okta team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date. This comes at a cost though since customization of Okta is limited.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-1">Keycloak:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak-1" class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:">​</a></h4>
<p>Conversely, Keycloak requires more attention since it's self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.</p>
<p><strong>Winner</strong></p>
<p>Okta.</p>
<p>As a fully managed service, Okta abstracts away this work.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#functionality-and-flexibility" class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="okta-2">Okta:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#okta-2" class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:">​</a></h4>
<p>Okta’s authentication mechanisms support multiple methods for enhanced security and user convenience. The platform’s authorization capabilities include role-based access control (RBAC) and policy management, allowing organizations to enforce detailed security policies. Okta supports identity federation through SAML, OpenID Connect, and other standards, facilitating integration with various identity providers. Its single sign-on (SSO) functionality ensures a seamless user experience across different applications and services. Okta’s user management features are extensive, offering self-service registration, account recovery, and a comprehensive user directory. Additionally, Okta’s APIs and pre-built integrations with numerous third-party applications simplify the implementation process. The platform also provides detailed analytics, logging, and reporting features for monitoring and compliance, as well as automated user provisioning, deprovisioning, and workflow management through its lifecycle management capabilities.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-2">Keycloak:<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#keycloak-2" class="hash-link" aria-label="Direct link to Keycloak:" title="Direct link to Keycloak:">​</a></h4>
<p>Keycloak offers a comprehensive suite of features designed to meet the needs of modern applications that are at parity (or better) in many ways with Okta. Keycloak provides various authentication methods, including username/password, social logins, and multi-factor authentication (MFA), ensuring secure access for users. It also supports fine-grained authorization capabilities through role-based access control (<a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">RBAC</a>) and attribute-based access control (<a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">ABAC</a>), enabling precise management of user permissions. Keycloak excels in identity federation, supporting protocols like SAML and OpenID Connect, which allows seamless integration with other identity providers. Additionally, Keycloak’s single sign-on (<a href="https://phasetwo.io/product/sso/" target="_blank" rel="noopener noreferrer">SSO</a>) feature facilitates a smooth user experience across multiple applications, while its extensive <a href="https://phasetwo.io/product/adminportal/" target="_blank" rel="noopener noreferrer">user management</a> capabilities, including user registration, password policies, and account linking, ensure comprehensive control over user identities. The platform is highly customizable, offering themes, custom code, and extensive configuration options, and benefits from strong community support and a wide range of extensions and plugins.</p>
<p>A main point is that the features that Okta and Auth0 try to cover (somewhat separately) are all covered by why Keycloak can do.</p>
<p><strong>Winner</strong></p>
<p>Keycloak</p>
<p>Okta and Keycloak offer much of the same functionality for Authentication and Authorization, however Keycloak is extremely flexible to extend and configure. It's a system that can adjust and grow with an application. In addition, there is no distinction in capabilities between different products, meaning Keycloak centralizes more use-cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-keycloak-with-external-systems-like-okta">Integrating Keycloak with External Systems like Okta<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#integrating-keycloak-with-external-systems-like-okta" class="hash-link" aria-label="Direct link to Integrating Keycloak with External Systems like Okta" title="Direct link to Integrating Keycloak with External Systems like Okta">​</a></h3>
<p>For organizations looking to transition from Okta to Keycloak or integrate Keycloak with systems that are already using Okta, Keycloak's flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Okta and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Okta for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.</p>
<p>The identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Okta. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Okta simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-iam-solution-is-best-for-me">Which IAM Solution Is Best for Me?<a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/#which-iam-solution-is-best-for-me" class="hash-link" aria-label="Direct link to Which IAM Solution Is Best for Me?" title="Direct link to Which IAM Solution Is Best for Me?">​</a></h3>
<p>Choosing between Okta and Keycloak largely depends on your organization’s specific needs and capabilities. Okta is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.</p>
<p>Both platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.</p>
<p>Ultimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust Keyloak <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosting</a>, migration, and support options that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control in SSO, authenication, authorization, user management, and other areas. <strong>Leveraging Keycloak means that ongoing costs are relatively fixed</strong>, since concerns about user growth or feature needs don't have to factor into every decision.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="phase_two" term="phase_two"/>
        <category label="open_source" term="open_source"/>
        <category label="authentication" term="authentication"/>
        <category label="authorization" term="authorization"/>
        <category label="okta" term="okta"/>
        <category label="keycloak" term="keycloak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Phase Two's Organizations, a Keycloak Multi-Tenant Extension and Keycloak's Upcoming Organization's Feature]]></title>
        <id>https://phasetwo.io/blog/organgizations-multi-tenant-update/</id>
        <link href="https://phasetwo.io/blog/organgizations-multi-tenant-update/"/>
        <updated>2024-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phase Two's Organization extensions bring single-realm multi-tenancy to Keycloak. Keycloak is officially developing a native version, but it's not a one-to-one replacement.]]></summary>
        <content type="html"><![CDATA[<p>Since we first released our (most) popular Keycloak extension, Keycloak <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organizations</a> (Orgs) and made it available as open source on <a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Github</a>, the Keycloak maintainers have decided to build into native organization support.</p>
<p>This begs the question? What is different between Keycloak's upcoming organizations feature and the Phase Two Organization Extension?</p>
<p>To understand the difference it's important to first understand what the Phase Two Organization extension is. When we initially built this extension, we were struggling to solve the problem of "multi-tenant" Keycloak. During that process we learned a lot.</p>
<p>Other approaches that we tried and decided against were:</p>
<ul>
<li>One Realm for each tenant</li>
<li>Using existing Keycloak Groups to model Organizations, Roles and Memberships</li>
</ul>
<p>Each of these approaches had trade-offs of scale or frailty we found undesirable or unacceptable to meet our requirements. We proceeded to create the Organization extension now in use by hundreds of companies.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-you-get-in-phase-twos-organization-extension">What you get in Phase Two's Organization Extension<a href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#what-you-get-in-phase-twos-organization-extension" class="hash-link" aria-label="Direct link to What you get in Phase Two's Organization Extension" title="Direct link to What you get in Phase Two's Organization Extension">​</a></h3>
<p>Within the extension, the following are treated in a first-class manner</p>
<ol>
<li><strong>Organizations</strong>: "tenants" or "customers" as commonly used. A Realm can have multiple Organizations.</li>
<li><strong>Memberships</strong>: the relationship of Users to Organizations. Users may be members of multiple Organizations.</li>
<li><strong>Roles</strong>: mechanisms of role-based security specific to an Organization, much like Keycloak Realm Roles and Client Roles. In addition to a set of standard roles related to Organization data visibility and management, administrators can create Roles unique to an organization. Users who are Members of Organizations can be granted that Organization's Roles.</li>
<li><strong>Invitations</strong>: allow Users and non-Users to be invited to join an Organization. Invitations can be created by administrators or Organization members with permission.</li>
<li><strong>Domains</strong>: email domains that are used to automatically select Organization IdPs using the optional authenticators. Included is a facility to validate customer domain ownership using DNS records.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-that-translate-to-for-my-workflow-and-business-use-cases">What does that translate to for my workflow and business use-cases?<a href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#what-does-that-translate-to-for-my-workflow-and-business-use-cases" class="hash-link" aria-label="Direct link to What does that translate to for my workflow and business use-cases?" title="Direct link to What does that translate to for my workflow and business use-cases?">​</a></h3>
<p>Organizations are about empowering your customers and developers. They are about being able to segment customers into the right logical unit for interaction with your application. Effectively, they allow much more fine-grained ability to mimic the structure of a business in real-life within Keycloak, including permissions (roles, authorization).</p>
<ol>
<li>Self-management for your customers through the <a href="https://phasetwo.io/product/adminportal/" target="_blank" rel="noopener noreferrer">Admin Portal</a> to enable <a href="https://phasetwo.io/docs/organizations/membership/" target="_blank" rel="noopener noreferrer">membership management</a> and <a href="https://phasetwo.io/docs/organizations/invitations/" target="_blank" rel="noopener noreferrer">invitations</a>.</li>
<li>Self-management for your developers via strong <a href="https://phasetwo.io/api/category/organizations/" target="_blank" rel="noopener noreferrer">API capabilities</a></li>
<li>Enterprise <a href="https://phasetwo.io/docs/sso/" target="_blank" rel="noopener noreferrer">SSO</a> Login for each customer</li>
<li>Enhanced <a href="https://phasetwo.io/docs/organizations/roles/" target="_blank" rel="noopener noreferrer">roles</a>, permissions and authorization per customer.</li>
<li><a href="https://phasetwo.io/docs/sso/setup/#associating-organizations" target="_blank" rel="noopener noreferrer">Domain-based association</a> for registration and sign-up.</li>
<li>Attribute management to apply and manage metadata to members of the organization.</li>
<li><a href="https://github.com/p2-inc/keycloak-orgs/blob/main/docs/active-organization.md" target="_blank" rel="noopener noreferrer">Active organization</a> for the ability to switch between organizations (when part of many organizations).</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="main-differences-between-keycloaks-organization-feature-and-phase-twos-organzation-extension">Main differences between Keycloak's Organization feature and Phase Two's Organzation extension<a href="https://phasetwo.io/blog/organgizations-multi-tenant-update/#main-differences-between-keycloaks-organization-feature-and-phase-twos-organzation-extension" class="hash-link" aria-label="Direct link to Main differences between Keycloak's Organization feature and Phase Two's Organzation extension" title="Direct link to Main differences between Keycloak's Organization feature and Phase Two's Organzation extension">​</a></h3>
<p>The Keycloak team at RedHat has <a href="https://github.com/keycloak/keycloak/discussions/23948" target="_blank" rel="noopener noreferrer">announced</a> that they will be building an Organizations feature into the core product. We have previously offered to change our license and donate our extension to the project, but this was not considered. We participated in some of the public discussions around this feature, as well as provided feedback on their product features privately.</p>
<p>Work has begun, and they plan to <a href="https://github.com/keycloak/keycloak/issues/28609" target="_blank" rel="noopener noreferrer">release</a> some base features with <code>experimental</code> support in Keycloak <code>25</code>. They expect a full feature set and promotion to <code>preview</code> by Keycloak <code>26</code>. There are a few GitHub issues that indicate the features they plan to release, but there is not a comprehensive requirements or product feature plan available publicly.</p>
<p>It has been our goal since building this extension to have this approach to multi-tenancy built into Keycloak, and we have proven through many customers/user that is serves a real need. We're excited to see what they will build, and are flattered they have used our extension for inspiration.</p>
<p>We have several hundred customers and users of this extension, and there have been many asking about the future of this extension, given the above. We've put together these notes, and will continue to update them as we learn more.</p>
<ul>
<li>First of all, <strong>this extension is not going away</strong>. In addition to the fact we have long-term support agreements with many of our customers, we also don't currently have a picture of what Keycloak's implementation will ultimately look like.</li>
<li>We continue to believe that our (Phase Two's) value is in <strong>making Keycloak easy to use</strong>, primarily for an audience that is using it as a <strong>CIAM tool for enterprise SaaS applications</strong>. We have tailored the feature set to that audience, and will continue to build out tools on top of our own organizations extension, such as the <a href="https://github.com/p2-inc/phasetwo-admin-portal" target="_blank" rel="noopener noreferrer">admin portal</a> and <a href="https://github.com/p2-inc/idp-wizard" target="_blank" rel="noopener noreferrer">IdP wizards</a> to facilitate making your app enterprise-ready quickly.</li>
<li>We plan <strong>not to enable native Keycloak organizations</strong> in our hosted product, and it will be set (in env vars) off in our Docker images.</li>
<li>We have initiated a project to <strong>move our organizations (and other) admin UI tools outside of the Keycloak Admin UI</strong>. In addition to proving very time consuming because of the pace of breaking changes, we realized that we can iterate faster for customer value by building our own admin UI. More information on that coming soon.</li>
<li>We will continue to <strong>participate in discussions with RedHat</strong> and the Keycloak maintainers to advocate for our customers' needs and the features we have proven over &gt;3 years.</li>
<li>If there is <strong>eventually sufficient feature parity</strong> between native Keycloak organizations and this extension, <strong>we will provide a migration path</strong>.</li>
</ul>
<p>This will probably cause a lot of confusion as native Keycloak organizations is released. We appreciate the patience and support that customers and users have shown us, and we hope to continue to support you with <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">great Keycloak extensions and tools</a>.</p>]]></content>
        <author>
            <name>Phase Two</name>
            <email>support@phasetwo.io</email>
            <uri>https://github.com/p2-inc</uri>
        </author>
        <category label="open_source" term="open_source"/>
        <category label="release" term="release"/>
        <category label="keycloak" term="keycloak"/>
        <category label="phase_two" term="phase_two"/>
        <category label="organizations" term="organizations"/>
        <category label="multi_tenant" term="multi_tenant"/>
        <category label="multi_tenancy" term="multi_tenancy"/>
    </entry>
</feed>