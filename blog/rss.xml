<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Managed Keycloak Hosting and Enterprise Keycloak Support Blog</title>
        <link>https://phasetwo.io/blog/</link>
        <description>Managed Keycloak Hosting and Enterprise Keycloak Support Blog</description>
        <lastBuildDate>Thu, 24 Jul 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Phase Two Launches New Dashboard for Keycloak Resource Management]]></title>
            <link>https://phasetwo.io/blog/dashboard-launch/</link>
            <guid>https://phasetwo.io/blog/dashboard-launch/</guid>
            <pubDate>Thu, 24 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As of today, we’re thrilled to announce the launch of the new Phase Two Dashboard — a fully redesigned application for managing your Keycloak resources. This update goes far beyond a fresh coat of paint. We've rebuilt the experience from the ground up, introducing new capabilities, streamlined workflows, and deep infrastructure enhancements based directly on customer feedback. We've learned that the version of Keycloak we provide, enhanced by the Phase Two library of extensions, solves for the 95% Saas use-case and this release will allow our users to better take advantage of those features. Some features are available today and others will be made available in the next few weeks.]]></description>
            <content:encoded><![CDATA[<p>As of today, we’re thrilled to announce the launch of the <strong>new Phase Two Dashboard</strong> — a fully redesigned application for managing your Keycloak resources. This update goes far beyond a fresh coat of paint. We've rebuilt the experience from the ground up, introducing new capabilities, streamlined workflows, and deep infrastructure enhancements based directly on customer feedback. We've learned that the version of Keycloak we provide, enhanced by the Phase Two library of <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">extensions</a>, solves for the 95% Saas use-case and this release will allow our users to better take advantage of those features. Some features are available today and others will be made available in the next few weeks.</p>
<p>👉 <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Try it now</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-ground-up-redesign">A Ground-Up Redesign<a href="https://phasetwo.io/blog/dashboard-launch/#a-ground-up-redesign" class="hash-link" aria-label="Direct link to A Ground-Up Redesign" title="Direct link to A Ground-Up Redesign">​</a></h2>
<p>This isn’t just a UI refresh — it's a completely <strong>rearchitected application</strong>. We’ve rethought every aspect of how users interact with Phase Two services to make managing Keycloak more intuitive, responsive, and capable. Whether you’re deploying your first realm, spinning up your first cluster or scaling to serve thousands of users, the new dashboard is built to support you and your needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shaped-by-real-world-use-cases">Shaped by Real-World Use Cases<a href="https://phasetwo.io/blog/dashboard-launch/#shaped-by-real-world-use-cases" class="hash-link" aria-label="Direct link to Shaped by Real-World Use Cases" title="Direct link to Shaped by Real-World Use Cases">​</a></h2>
<p>The first version of our dashboard got the job done, but it was intentionally minimal. Since then, we’ve worked closely with our customers to understand what matters most. From enterprise SSO setups to custom themes and extensions — this release is a direct result of your input.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-powerful-new-ui">A Powerful New UI<a href="https://phasetwo.io/blog/dashboard-launch/#a-powerful-new-ui" class="hash-link" aria-label="Direct link to A Powerful New UI" title="Direct link to A Powerful New UI">​</a></h2>
<p>We’ve introduced a new, modern interface that’s faster, easier to navigate, and more scalable for the workflows you rely on. The redesigned UI improves visibility into your deployments and streamlines common tasks like adding users, managing themes, and scaling infrastructure.</p>
<p>Plus with this new UI, Dark mode is now a reality.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-themes-and-extensions-now-self-serve">Custom Themes and Extensions: Now Self-Serve<a href="https://phasetwo.io/blog/dashboard-launch/#custom-themes-and-extensions-now-self-serve" class="hash-link" aria-label="Direct link to Custom Themes and Extensions: Now Self-Serve" title="Direct link to Custom Themes and Extensions: Now Self-Serve">​</a></h2>
<p>Launching soon, you will be able to <strong>upload and deploy custom Keycloak themes and extensions</strong> directly from the dashboard — no support ticket required. This makes it faster than ever to personalize your deployment or roll out new functionality.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="built-in-observability-and-monitoring">Built-In Observability and Monitoring<a href="https://phasetwo.io/blog/dashboard-launch/#built-in-observability-and-monitoring" class="hash-link" aria-label="Direct link to Built-In Observability and Monitoring" title="Direct link to Built-In Observability and Monitoring">​</a></h2>
<p>We’ve expanded observability features to give you deeper insights into your deployments. Track uptime, see logs, and monitor usage directly from your dashboard to ensure smooth, reliable performance. We'll be rolling out access to this over the next couple of weeks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-domains-cnames">Custom Domains (CNAMEs)<a href="https://phasetwo.io/blog/dashboard-launch/#custom-domains-cnames" class="hash-link" aria-label="Direct link to Custom Domains (CNAMEs)" title="Direct link to Custom Domains (CNAMEs)">​</a></h2>
<p>You can now <strong>add and manage your own custom domains</strong> right in the UI. Whether you're branding a login portal or separating environments, it’s never been easier to configure.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integrated-team-management">Integrated Team Management<a href="https://phasetwo.io/blog/dashboard-launch/#integrated-team-management" class="hash-link" aria-label="Direct link to Integrated Team Management" title="Direct link to Integrated Team Management">​</a></h2>
<p>Invite teammates, configure roles, and connect your identity provider — all within the dashboard. Full SSO support is available for securing team access with your existing auth infrastructure.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cluster-creation-across-regions-and-tiers">Cluster Creation Across Regions and Tiers<a href="https://phasetwo.io/blog/dashboard-launch/#cluster-creation-across-regions-and-tiers" class="hash-link" aria-label="Direct link to Cluster Creation Across Regions and Tiers" title="Direct link to Cluster Creation Across Regions and Tiers">​</a></h2>
<p>Create Keycloak clusters with support for different performance and availability tiers. Whether you're running a dev sandbox or a production-grade deployment, the dashboard provides you with the tools you need to do so.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="built-for-the-future">Built for the Future<a href="https://phasetwo.io/blog/dashboard-launch/#built-for-the-future" class="hash-link" aria-label="Direct link to Built for the Future" title="Direct link to Built for the Future">​</a></h2>
<p>This release lays the foundation for rapid iteration. We’ve made it easier than ever to add new features, so expect regular updates as we continue to grow and improve the platform.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wed-love-your-feedback">We'd Love Your Feedback<a href="https://phasetwo.io/blog/dashboard-launch/#wed-love-your-feedback" class="hash-link" aria-label="Direct link to We'd Love Your Feedback" title="Direct link to We'd Love Your Feedback">​</a></h2>
<p>Your input got us here, and it’s what will keep making this platform better. Let us know what’s working and what’s not by emailing us at <a href="mailto:support@phasetwo.io" target="_blank" rel="noopener noreferrer">support@phasetwo.io</a>.</p>
<hr>
<p><strong>Explore the new dashboard → <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">dash.phasetwo.io</a></strong></p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>dashboard</category>
            <category>manage</category>
        </item>
        <item>
            <title><![CDATA[Phase Two Achieves SOC 2 Type 1 Compliance]]></title>
            <link>https://phasetwo.io/blog/soc-2-type-1-compliance/</link>
            <guid>https://phasetwo.io/blog/soc-2-type-1-compliance/</guid>
            <pubDate>Thu, 19 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[We are excited to announce that Phase Two has achieved SOC 2 Type 1 compliance! This milestone demonstrates our ongoing commitment to security, availability, and the protection of our customers’ data.]]></description>
            <content:encoded><![CDATA[<p>We are excited to announce that Phase Two has achieved SOC 2 Type 1 compliance! This milestone demonstrates our ongoing commitment to security, availability, and the protection of our customers’ data.</p>
<p>Learn more at <a href="https://trust.phasetwo.io/" target="_blank" rel="noopener noreferrer">trust.phasetwo.io</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-soc-2-type-1-compliance">What is SOC 2 Type 1 Compliance?<a href="https://phasetwo.io/blog/soc-2-type-1-compliance/#what-is-soc-2-type-1-compliance" class="hash-link" aria-label="Direct link to What is SOC 2 Type 1 Compliance?" title="Direct link to What is SOC 2 Type 1 Compliance?">​</a></h2>
<p>SOC 2 (System and Organization Controls 2) is an industry-standard framework for managing and securing customer data based on five trust service criteria: security, availability, processing integrity, confidentiality, and privacy. Type 1 compliance verifies that we have the right controls and processes in place as of a specific date.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-soc-2-compliance-important">Why is SOC 2 Compliance Important?<a href="https://phasetwo.io/blog/soc-2-type-1-compliance/#why-is-soc-2-compliance-important" class="hash-link" aria-label="Direct link to Why is SOC 2 Compliance Important?" title="Direct link to Why is SOC 2 Compliance Important?">​</a></h2>
<ul>
<li><strong>Independent Validation:</strong> SOC 2 compliance provides third-party assurance that our security practices meet rigorous industry standards.</li>
<li><strong>Customer Trust:</strong> Our customers can be confident that their data is handled securely and responsibly.</li>
<li><strong>Risk Mitigation:</strong> Strong controls help reduce the risk of data breaches and operational disruptions.</li>
<li><strong>Competitive Advantage:</strong> SOC 2 compliance sets us apart as a trusted provider in the identity and access management space.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What’s Next?<a href="https://phasetwo.io/blog/soc-2-type-1-compliance/#whats-next" class="hash-link" aria-label="Direct link to What’s Next?" title="Direct link to What’s Next?">​</a></h2>
<p>We are already working toward SOC 2 Type 2 compliance, which evaluates the operational effectiveness of our controls over time. We expect to achieve Type 2 compliance within the next 90 days (mandatory audit period).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-this-mean-for-our-customers">What Does This Mean for Our Customers?<a href="https://phasetwo.io/blog/soc-2-type-1-compliance/#what-does-this-mean-for-our-customers" class="hash-link" aria-label="Direct link to What Does This Mean for Our Customers?" title="Direct link to What Does This Mean for Our Customers?">​</a></h2>
<ul>
<li><strong>Peace of Mind:</strong> You can trust that your data is protected by robust, independently-audited controls.</li>
<li><strong>Transparency:</strong> We are committed to maintaining high standards and keeping you informed about our security posture.</li>
<li><strong>Continuous Improvement:</strong> Achieving and maintaining SOC 2 compliance is part of our ongoing dedication to security and operational excellence.</li>
</ul>
<p>Phase Two's <a href="https://phasetwo.io/hosting/">hosting</a> product has continued to attract customers in many different industries from Healthcare, CDN and Security, Grocers, and more. As part of our commitment to growth, SOC 2 is a big step in being able to adhere to standards that are evaluated by third parties.</p>
<p>Thank you for trusting Phase Two with your business. We look forward to continuing to serve you with the highest standards of security and reliability.</p>
<p>If you would like to know more about our services and products, please email ✉️ <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a>.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>security</category>
            <category>hosting</category>
            <category>soc-2</category>
        </item>
        <item>
            <title><![CDATA[Understanding Multi-Tenancy Options in Keycloak]]></title>
            <link>https://phasetwo.io/blog/multi-tenancy-options-keycloak/</link>
            <guid>https://phasetwo.io/blog/multi-tenancy-options-keycloak/</guid>
            <pubDate>Mon, 21 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As more companies build SaaS platforms, the need to serve multiple customer groups—or tenants—from a single system becomes critical. In the identity world, this means implementing multi-tenancy within your identity provider.]]></description>
            <content:encoded><![CDATA[<p>As more companies build SaaS platforms, the need to serve multiple customer groups—or tenants—from a single system becomes critical. In the identity world, this means implementing <strong>multi-tenancy</strong> within your identity provider.</p>
<p>In this post, we’ll walk through:</p>
<ul>
<li>What multi-tenancy means in Keycloak</li>
<li>The drawbacks of using multiple realms for tenants</li>
<li>Why organizations are a better, more scalable approach</li>
<li>How the Phase Two <a href="https://phasetwo.io/product/organizations/">Organizations</a> extension supports advanced use cases like theming, shared IdPs, and user membership</li>
<li>How our implementation differs from (and improves on) the new native Keycloak organizations feature</li>
</ul>
<p>We've written extensively about how to <a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/">model multi-tenancy with organizations</a> and how Phase Two's <a href="https://phasetwo.io/blog/phase-two-organizations-shared-idps/">Organizations extension differs from the native implementation</a> being undertaken by the Keycloak team.</p>
<p>All of Phase Two's <a href="https://phasetwo.io/hosting/">hosted</a> environments come standard with all of our <a href="https://github.com/p2-inc#our-extensions-" target="_blank" rel="noopener noreferrer">popular extensions</a> to make it easy to hit the ground running and cover 95% of all IAM use-cases.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-multi-tenancy">What Is Multi-Tenancy?<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#what-is-multi-tenancy" class="hash-link" aria-label="Direct link to What Is Multi-Tenancy?" title="Direct link to What Is Multi-Tenancy?">​</a></h2>
<p>Multi-tenancy is a system architecture where a single instance of software serves multiple logically-separated customers or organizations—each with their own users, permissions, and sometimes custom branding.</p>
<!-- -->
<p>By contrast in a single-tenancy approach, there would need to be a single realm per IAM.</p>
<!-- -->
<p>In Keycloak terms, multi-tenancy means allowing multiple organizations to authenticate users, manage roles, and access apps—<strong>all from a single realm</strong>. In a <strong>single-tenant</strong> architecture, each customer (or tenant) has their own Keycloak realm.</p>
<p>Taking the graph above and changing it to display how Organizations come into play looks as follows. Don't worry if this is confusing at first, we're going to walk through all of it.</p>
<!-- -->
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-multi-realm-doesnt-work">Why Multi-Realm Doesn't Work<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#why-multi-realm-doesnt-work" class="hash-link" aria-label="Direct link to Why Multi-Realm Doesn't Work" title="Direct link to Why Multi-Realm Doesn't Work">​</a></h2>
<p>One of Keycloak’s most common multi-tenant patterns is to create <strong>a realm per tenant</strong>. This seems clean at first—but has significant downsides:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="problems-with-multi-realm">Problems with Multi-Realm:<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#problems-with-multi-realm" class="hash-link" aria-label="Direct link to Problems with Multi-Realm:" title="Direct link to Problems with Multi-Realm:">​</a></h3>
<ul>
<li><strong>Performance</strong>: Keycloak performance degrades when you have hundreds of realms</li>
<li><strong>Limited Cross-Tenant Features</strong>: You can’t easily link users or resources across realms</li>
<li><strong>Duplication</strong>: Users with accounts in multiple realms must manage separate logins and passwords</li>
<li><strong>Management Overhead</strong>: Updating roles, theming, and settings across many realms is tedious and error-prone</li>
</ul>
<p>The model simply doesn’t scale when you have 50, 100, or 500 tenants.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="organizations-a-smarter-approach-to-multi-tenancy">Organizations: A Smarter Approach to Multi-Tenancy<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#organizations-a-smarter-approach-to-multi-tenancy" class="hash-link" aria-label="Direct link to Organizations: A Smarter Approach to Multi-Tenancy" title="Direct link to Organizations: A Smarter Approach to Multi-Tenancy">​</a></h2>
<p>Phase Two's <a href="https://phasetwo.io/product/organizations/"><strong>Organizations Extension for Keycloak</strong></a> enables true multi-tenancy <strong>within a single realm</strong>—a more scalable and resource-efficient model.</p>
<p>With Organizations, Keycloak gains first-class multi-tenant capabilities:</p>
<ul>
<li><strong>Organizations</strong>: Define isolated tenant groups</li>
<li><strong>Memberships</strong>: Users can belong to one or more orgs</li>
<li><strong>Org Roles</strong>: Assign roles and permissions within each org</li>
<li><strong>Invitations</strong>: Invite users by email (even before they exist)</li>
<li><strong>Domain association</strong>: Automatically map users to orgs by email domain</li>
<li><strong>Active organization context</strong>: Switch between orgs in a single session</li>
</ul>
<p>This lets you maintain secure, segmented access <strong>without managing dozens of realms</strong>.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="theming-per-tenant-client-level-customization">Theming Per Tenant (Client-Level Customization)<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#theming-per-tenant-client-level-customization" class="hash-link" aria-label="Direct link to Theming Per Tenant (Client-Level Customization)" title="Direct link to Theming Per Tenant (Client-Level Customization)">​</a></h2>
<p>Need custom branding for each organization? You can theme Keycloak <strong>per client</strong>—and by linking each client to an organization, you effectively get <strong>per-tenant theming</strong>.</p>
<ol>
<li>Create a separate client per organization</li>
<li>Assign custom theme to each client (via client settings)</li>
<li>Use <code>login_theme</code> and <code>account_theme</code> in client metadata</li>
<li>Use the Organization ID or client ID in templates to style login pages dynamically</li>
</ol>
<p>This allows each org to have its own login screen—perfect for white-label SaaS.</p>
<p>In order to build out dynamic themes, we highly recommend leveraging <a href="https://keycloakify.com/" target="_blank" rel="noopener noreferrer">Keycloakify</a>, which Phase Two <a href="https://phasetwo.io/blog/phasetwo-keycloakify-partnership/">sponsors</a> and believes heavily in.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="users-in-multiple-organizations">Users in Multiple Organizations<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#users-in-multiple-organizations" class="hash-link" aria-label="Direct link to Users in Multiple Organizations" title="Direct link to Users in Multiple Organizations">​</a></h2>
<p>Unlike the multi-realm model (where each user is siloed), the Organizations extension allows <strong>a single user to exist in multiple organizations</strong>:</p>
<ul>
<li>One email, one username, one login</li>
<li>Organization-specific roles and permissions</li>
<li>Ability to switch active org via the <code>/me</code> <a href="https://phasetwo.io/api/get-me/">endpoint</a></li>
</ul>
<p>This is especially powerful for admins, consultants, or vendors who interact with multiple customer orgs.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="assign-identity-providers-to-organizations">Assign Identity Providers to Organizations<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#assign-identity-providers-to-organizations" class="hash-link" aria-label="Direct link to Assign Identity Providers to Organizations" title="Direct link to Assign Identity Providers to Organizations">​</a></h2>
<p>Organizations can now <strong>assign the Identity Provider (IdP)</strong> to tenants—ideal for social login or enterprise SSO scenarios like Google Workspace:</p>
<ul>
<li>Define a single OIDC IdP (e.g., Google)</li>
<li>Map it to the orgs</li>
<li>Use email domain matching to assign incoming users to the correct org</li>
</ul>
<p>It’s centralized, scalable, and easier to manage.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-with-multi-tenant-keycloak">Get Started with Multi-Tenant Keycloak<a href="https://phasetwo.io/blog/multi-tenancy-options-keycloak/#get-started-with-multi-tenant-keycloak" class="hash-link" aria-label="Direct link to Get Started with Multi-Tenant Keycloak" title="Direct link to Get Started with Multi-Tenant Keycloak">​</a></h2>
<p>Multi-tenancy doesn’t have to be hard—or fragile.</p>
<p>With Phase Two’s Organizations extension and our managed Keycloak platform, you can:</p>
<ul>
<li>Support any number of tenants from a single realm</li>
<li>Assign custom branding per org</li>
<li>Link IdPs and manage federated users</li>
<li>Scale securely, with support from the people who built the system</li>
</ul>
<p>👉 <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Learn more about Organizations →</a><br>
<!-- -->👉 <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Get Started with Free Managed Keycloak →</a></p>
<p>📩 <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">Reach out to the team →</a></p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>multi_tenancy</category>
            <category>organizations</category>
            <category>keycloak</category>
        </item>
        <item>
            <title><![CDATA[Web Application Security with Your Keycloak Deployment]]></title>
            <link>https://phasetwo.io/blog/waf-keycloak/</link>
            <guid>https://phasetwo.io/blog/waf-keycloak/</guid>
            <pubDate>Fri, 18 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As more companies adopt Keycloak for enterprise identity and access management, security is no longer just a back-end concern. One of the most frequent questions we hear at Phase Two is:]]></description>
            <content:encoded><![CDATA[<p>As more companies adopt Keycloak for enterprise identity and access management, security is no longer just a back-end concern. One of the most frequent questions we hear at Phase Two is:</p>
<p><strong>"Should I put a Web Application Firewall (WAF) in front of Keycloak?"</strong></p>
<p>The short answer? <strong>It depends</strong>—but it's a smart question to ask.</p>
<p>In this post, we'll break down what Keycloak provides out of the box, explore common attack vectors (especially around authentication endpoints), and help you evaluate whether you need to add an external firewall or WAF to your deployment.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-security-does-keycloak-provide">What Security Does Keycloak Provide?<a href="https://phasetwo.io/blog/waf-keycloak/#what-security-does-keycloak-provide" class="hash-link" aria-label="Direct link to What Security Does Keycloak Provide?" title="Direct link to What Security Does Keycloak Provide?">​</a></h2>
<p>Keycloak includes several built-in protections, especially around <strong>login abuse detection</strong>:</p>
<ul>
<li><strong>Brute Force Detection</strong>: Limit login attempts per user/IP combination</li>
<li><strong>Event Logging</strong>: Track login attempts, errors, and success/failure trends</li>
<li><strong>Account Lockout</strong>: Lock users after repeated failures</li>
<li><strong>Rate Limiting</strong> (indirect via proxies): Supports integration with reverse proxies/load balancers</li>
<li><strong>Session Expiry Controls</strong>: Limits token lifespan and session reuse</li>
</ul>
<p>These help protect against basic abuse patterns like credential stuffing and dictionary attacks—but they aren’t designed to stop <strong>network-level threats</strong> like DDoS or complex bot traffic.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="which-keycloak-endpoints-get-targeted">Which Keycloak Endpoints Get Targeted?<a href="https://phasetwo.io/blog/waf-keycloak/#which-keycloak-endpoints-get-targeted" class="hash-link" aria-label="Direct link to Which Keycloak Endpoints Get Targeted?" title="Direct link to Which Keycloak Endpoints Get Targeted?">​</a></h2>
<p>The most vulnerable part of a Keycloak deployment is also its most exposed: the <strong>login page</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="commonly-targeted-endpoints">Commonly targeted endpoints:<a href="https://phasetwo.io/blog/waf-keycloak/#commonly-targeted-endpoints" class="hash-link" aria-label="Direct link to Commonly targeted endpoints:" title="Direct link to Commonly targeted endpoints:">​</a></h3>
<ul>
<li><code>/realms/{realm}/protocol/openid-connect/auth</code></li>
<li><code>/realms/{realm}/protocol/openid-connect/token</code></li>
<li><code>/realms/{realm}/account/</code></li>
<li><code>/realms/{realm}/login-actions/authenticate</code></li>
<li>Password reset and registration endpoints</li>
</ul>
<p>These routes are exposed by design. If your login page is available to users around the world, it’s available to bots and attackers too.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-when-should-you-consider-a-waf">So, When Should You Consider a WAF?<a href="https://phasetwo.io/blog/waf-keycloak/#so-when-should-you-consider-a-waf" class="hash-link" aria-label="Direct link to So, When Should You Consider a WAF?" title="Direct link to So, When Should You Consider a WAF?">​</a></h2>
<p>A WAF can protect your Keycloak deployment from a wide range of threats that Keycloak itself is not built to handle, such as:</p>
<ul>
<li><strong>DDoS attacks</strong> targeting login endpoints</li>
<li><strong>Bot-driven enumeration attacks</strong> (e.g., slow username probing)</li>
<li><strong>IP spoofing or rotation attempts</strong></li>
<li><strong>Malformed request injection or protocol abuse</strong></li>
</ul>
<p>A WAF provides <strong>layer 7 security</strong>, filtering traffic based on behavior, headers, and known attack patterns.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="you-might-consider-a-waf-if">You might consider a WAF if:<a href="https://phasetwo.io/blog/waf-keycloak/#you-might-consider-a-waf-if" class="hash-link" aria-label="Direct link to You might consider a WAF if:" title="Direct link to You might consider a WAF if:">​</a></h3>
<ul>
<li>You expose Keycloak login pages publicly to thousands/millions of users</li>
<li>You run multi-tenant or CIAM deployments</li>
<li>You’ve experienced repeated attack attempts (or near misses)</li>
<li>You need deeper visibility and mitigation for L7 (application-level) traffic</li>
<li>You want geo-blocking, bot detection, or rate limiting with fine control</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="real-world-example-what-a-ddos-can-look-like">Real-World Example: What a DDoS Can Look Like<a href="https://phasetwo.io/blog/waf-keycloak/#real-world-example-what-a-ddos-can-look-like" class="hash-link" aria-label="Direct link to Real-World Example: What a DDoS Can Look Like" title="Direct link to Real-World Example: What a DDoS Can Look Like">​</a></h2>
<p>A team running Keycloak recently shared their experience dealing with a <strong>multi-phase login enumeration DDoS attack</strong>:</p>
<ul>
<li>Attackers gradually increased pressure, beginning with low-rate enumeration</li>
<li>A misconfiguration allowed for excessive open connections that exhausted resources</li>
<li>Over time, they escalated to thousands of login requests per minute</li>
<li>Sophisticated use of IP rotation made IP bans ineffective</li>
</ul>
<p>Even though no data was breached, the attack overwhelmed infrastructure and required layered mitigation—<strong>including a WAF</strong> to filter malicious patterns without affecting legitimate traffic.</p>
<p>Phase Two has helped customers build resilient defenses to ensure they're ready <em>before</em> attackes like this happens.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-architect-defenses-around-keycloak">How to Architect Defenses Around Keycloak<a href="https://phasetwo.io/blog/waf-keycloak/#how-to-architect-defenses-around-keycloak" class="hash-link" aria-label="Direct link to How to Architect Defenses Around Keycloak" title="Direct link to How to Architect Defenses Around Keycloak">​</a></h2>
<p>Whether or not you use a WAF, we recommend the following layered defense strategy. Using some or all of these can help.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-brute-force--session-policies">Keycloak Brute Force &amp; Session Policies<a href="https://phasetwo.io/blog/waf-keycloak/#keycloak-brute-force--session-policies" class="hash-link" aria-label="Direct link to Keycloak Brute Force &amp; Session Policies" title="Direct link to Keycloak Brute Force &amp; Session Policies">​</a></h3>
<p>Enable built-in brute force detection, set aggressive session expiration limits, and disable unused endpoints like user registration.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="waf-optional-but-recommended">WAF (Optional but Recommended)<a href="https://phasetwo.io/blog/waf-keycloak/#waf-optional-but-recommended" class="hash-link" aria-label="Direct link to WAF (Optional but Recommended)" title="Direct link to WAF (Optional but Recommended)">​</a></h3>
<p>Use a WAF like Cloudflare, AWS WAF, or Fastly to block known bad actors and patterns. Look for features like:</p>
<ul>
<li>Rate limiting by path (e.g., <code>/auth</code>)</li>
<li>Bot management</li>
<li>CAPTCHA or JS challenge enforcement</li>
<li>Real-time threat feeds</li>
</ul>
<p>As part of Phase Two's <a href="https://phasetwo.io/hosting/">Enterprise hosting</a> we provide the ability to integrate the WAF of your choosing along with your infrastructure.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="monitoring--anomaly-detection">Monitoring &amp; Anomaly Detection<a href="https://phasetwo.io/blog/waf-keycloak/#monitoring--anomaly-detection" class="hash-link" aria-label="Direct link to Monitoring &amp; Anomaly Detection" title="Direct link to Monitoring &amp; Anomaly Detection">​</a></h3>
<p>Log traffic and authentication events. Set up alerts for spikes in failures, long-lived sessions, or abnormal IP geographies. Phase Two's built-in <a href="https://phasetwo.io/hosting/">monitoring</a> is already pre-configured to note changes in traffic and abnormal patterns.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="reverse-proxy">Reverse Proxy<a href="https://phasetwo.io/blog/waf-keycloak/#reverse-proxy" class="hash-link" aria-label="Direct link to Reverse Proxy" title="Direct link to Reverse Proxy">​</a></h3>
<p>Use NGINX or Envoy in front of Keycloak to terminate TLS, cache static assets, and enforce basic rate limits.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-do-you-need-a-waf">So, Do You Need a WAF?<a href="https://phasetwo.io/blog/waf-keycloak/#so-do-you-need-a-waf" class="hash-link" aria-label="Direct link to So, Do You Need a WAF?" title="Direct link to So, Do You Need a WAF?">​</a></h2>
<p>If you're running Keycloak inside a secure corporate network and exposing login only to employees, <strong>maybe not</strong>.</p>
<p>But if you're serving external users—especially at scale—the answer leans strongly toward <strong>yes</strong>.</p>
<p>Even the most robust IAM systems can be overwhelmed by network-level threats they weren’t built to handle. A WAF isn’t a silver bullet—but it’s a strong, smart addition to a well-architected identity stack. Defense-in-depth is truly the only option for full network security of any web property.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-phase-two-helps">How Phase Two Helps<a href="https://phasetwo.io/blog/waf-keycloak/#how-phase-two-helps" class="hash-link" aria-label="Direct link to How Phase Two Helps" title="Direct link to How Phase Two Helps">​</a></h2>
<p>At <strong>Phase Two</strong>, we specialize in managing and securing Keycloak at scale. Our hosted platform includes:</p>
<ul>
<li>Hardened Keycloak configurations</li>
<li>Pre-integrated reverse proxy protections</li>
<li>Best-practice DDoS and abuse mitigation</li>
<li>Optional WAF integrations</li>
<li>24/7 observability and response tooling</li>
</ul>
<p>We help teams design IAM infrastructure that’s not just compliant—but resilient.</p>
<hr>
<p><strong>Want to talk WAFs, login security, or DDoS mitigation?</strong></p>
<ul>
<li>📩 <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">Reach out to the team →</a></li>
<li>👉 <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Get Started with Free Managed Keycloak</a></li>
</ul>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>web_application_security</category>
            <category>security</category>
        </item>
        <item>
            <title><![CDATA[Webauthn and Passkeys with Keycloak]]></title>
            <link>https://phasetwo.io/blog/webauthn-keycloak/</link>
            <guid>https://phasetwo.io/blog/webauthn-keycloak/</guid>
            <pubDate>Thu, 17 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Passwords are on their way out. From phishing to password reuse, they've become one of the weakest links in modern authentication. The solution? Passkeys—a phishing-resistant, user-friendly, and increasingly supported replacement for traditional passwords.]]></description>
            <content:encoded><![CDATA[<p>Passwords are on their way out. From phishing to password reuse, they've become one of the weakest links in modern authentication. The solution? <strong>Passkeys</strong>—a phishing-resistant, user-friendly, and increasingly supported replacement for traditional passwords.</p>
<p>In this post, we’ll break down what passkeys are, how they work, which platforms support them, how they relate to WebAuthn, and how you can integrate them into your Keycloak authentication flows. Finally, we’ll explore some of the real-world considerations and challenges.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-passkeys">What Are Passkeys?<a href="https://phasetwo.io/blog/webauthn-keycloak/#what-are-passkeys" class="hash-link" aria-label="Direct link to What Are Passkeys?" title="Direct link to What Are Passkeys?">​</a></h2>
<p><strong>Passkeys</strong> are a modern alternative to passwords. Built on public-key cryptography, passkeys replace the traditional "something you know" (your password) with "something you have" (your device) and "something you are" (biometrics like a fingerprint or face scan).</p>
<p>Unlike passwords, passkeys:</p>
<ul>
<li>Are resistant to phishing and brute-force attacks</li>
<li>Can’t be reused across sites</li>
<li>Don’t need to be remembered</li>
<li>Are stored securely on your device or in a password manager that supports syncing</li>
</ul>
<p>They offer the security of hardware security keys (like YubiKey) but with the convenience of Face ID or Windows Hello.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-passkeys-work">How Do Passkeys Work?<a href="https://phasetwo.io/blog/webauthn-keycloak/#how-do-passkeys-work" class="hash-link" aria-label="Direct link to How Do Passkeys Work?" title="Direct link to How Do Passkeys Work?">​</a></h2>
<p>Passkeys use <strong>public-private key pairs</strong> (<a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener noreferrer">link</a>). Here’s how a typical passkey login works:</p>
<ol>
<li>A website (relying party) sends a challenge to the user's browser.</li>
<li>The user’s device uses a previously stored private key (protected by a biometric or PIN) to sign the challenge.</li>
<li>The browser returns the signed challenge to the website.</li>
<li>The website uses the stored public key to verify the response and complete authentication.</li>
</ol>
<p>No secrets are ever sent over the wire. This eliminates common password-based vulnerabilities.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-are-passkeys-supported">Where Are Passkeys Supported?<a href="https://phasetwo.io/blog/webauthn-keycloak/#where-are-passkeys-supported" class="hash-link" aria-label="Direct link to Where Are Passkeys Supported?" title="Direct link to Where Are Passkeys Supported?">​</a></h2>
<p>Passkeys are no longer a concept of the future—they're here, and support is growing fast. To get a quick idea, here are some of the existing systems that offer support.</p>
<table><thead><tr><th>Platform</th><th>Passkey Support</th></tr></thead><tbody><tr><td><strong>Apple</strong></td><td>Face ID / Touch ID via iCloud Keychain (macOS, iOS)</td></tr><tr><td><strong>Google</strong></td><td>Android and Chrome support passkeys via Google Password Manager</td></tr><tr><td><strong>Microsoft</strong></td><td>Windows Hello and Edge support WebAuthn-based passkeys</td></tr><tr><td><strong>Password Managers</strong></td><td>1Password and Dashlane have launched passkey support</td></tr><tr><td><strong>Browsers</strong></td><td>Chrome, Safari, Edge, and Firefox (with varying levels of polish)</td></tr></tbody></table>
<p>Cross-platform syncing is also becoming easier thanks to initiatives like <strong>FIDO2</strong> and <strong>passkey.ro</strong>.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-the-relationship-between-passkeys-and-webauthn">What’s the Relationship Between Passkeys and WebAuthn?<a href="https://phasetwo.io/blog/webauthn-keycloak/#whats-the-relationship-between-passkeys-and-webauthn" class="hash-link" aria-label="Direct link to What’s the Relationship Between Passkeys and WebAuthn?" title="Direct link to What’s the Relationship Between Passkeys and WebAuthn?">​</a></h2>
<p><strong>WebAuthn</strong> (Web Authentication API) is the W3C standard that enables passwordless login in web applications. Passkeys are a <strong>user-friendly implementation of WebAuthn credentials</strong>, often synced across devices via a cloud provider (like iCloud or Google Password Manager).</p>
<p>WebAuthn supports two main registration types:</p>
<ul>
<li><strong>Roaming authenticators</strong> like hardware keys (YubiKey)</li>
<li><strong>Platform authenticators</strong> like biometrics on a phone or laptop (e.g., Touch ID, Windows Hello)</li>
</ul>
<p><strong>Passkeys</strong> use platform authenticators and often add cross-device syncing on top. So while WebAuthn is the standard, passkeys are the experience users interact with.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-passkeys-to-keycloak">Adding Passkeys to Keycloak<a href="https://phasetwo.io/blog/webauthn-keycloak/#adding-passkeys-to-keycloak" class="hash-link" aria-label="Direct link to Adding Passkeys to Keycloak" title="Direct link to Adding Passkeys to Keycloak">​</a></h2>
<p><strong>Keycloak supports WebAuthn natively</strong>, meaning you can offer passkeys as a sign-in method today—no plugins or external tools required.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup-steps">Setup Steps<a href="https://phasetwo.io/blog/webauthn-keycloak/#setup-steps" class="hash-link" aria-label="Direct link to Setup Steps" title="Direct link to Setup Steps">​</a></h3>
<p>Test this next section using Phase Two's <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Free Deployment</a>.</p>
<ol>
<li><strong>Enable user registration</strong> in your realm settings.</li>
<li>Under <strong>Authentication → Required Actions</strong>, enable:<!-- -->
<ul>
<li><code>WebAuthn Register</code></li>
<li><code>WebAuthn Register Passwordless</code></li>
</ul>
</li>
<li>Create a custom browser login flow:<!-- -->
<ul>
<li>Duplicate the built-in browser flow.</li>
<li>Remove the <code>Username Password Form</code> step. (optional if you don't want this as an option)</li>
<li>Add a <code>Username Form</code> and the <code>WebAuthn Passwordless Authenticator</code> step.</li>
<li>Set the WebAuthn step to <code>Required</code>.</li>
</ul>
</li>
<li>Bind this new flow as your realm's <strong>browser flow</strong>.</li>
</ol>
<p>With this flow, users will log in using passkeys—no passwords, just their fingerprint, face, or device confirmation.</p>
<blockquote>
<p>✅ <strong>Pro tip:</strong> You can also offer passkeys as a second factor or as an upgrade path after initial password login.</p>
</blockquote>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="challenges-and-considerations">Challenges and Considerations<a href="https://phasetwo.io/blog/webauthn-keycloak/#challenges-and-considerations" class="hash-link" aria-label="Direct link to Challenges and Considerations" title="Direct link to Challenges and Considerations">​</a></h2>
<p>Implementing passkeys is powerful, but not without complexity. A few things to keep in mind:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="device-recovery">Device Recovery<a href="https://phasetwo.io/blog/webauthn-keycloak/#device-recovery" class="hash-link" aria-label="Direct link to Device Recovery" title="Direct link to Device Recovery">​</a></h3>
<p>If a user loses their device or wipes their phone, their passkey is lost unless it’s synced to the cloud (e.g., iCloud, Google). Ensure fallback options exist—like email OTP or re-registration.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cross-platform-compatibility">Cross-Platform Compatibility<a href="https://phasetwo.io/blog/webauthn-keycloak/#cross-platform-compatibility" class="hash-link" aria-label="Direct link to Cross-Platform Compatibility" title="Direct link to Cross-Platform Compatibility">​</a></h3>
<p>Passkeys behave differently across OSes and browsers. For example, Windows Hello may not sync with a MacBook’s Touch ID. Testing across platforms is key.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-education">User Education<a href="https://phasetwo.io/blog/webauthn-keycloak/#user-education" class="hash-link" aria-label="Direct link to User Education" title="Direct link to User Education">​</a></h3>
<p>Passkeys are unfamiliar to many users. Provide clear onboarding, and consider hybrid flows that gradually move users from password-based logins to passkeys.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-architecture">Deployment Architecture<a href="https://phasetwo.io/blog/webauthn-keycloak/#deployment-architecture" class="hash-link" aria-label="Direct link to Deployment Architecture" title="Direct link to Deployment Architecture">​</a></h3>
<p>If your Keycloak deployment involves multiple realms or external IDPs, you'll need to ensure your WebAuthn configuration is consistent across them.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-phase-two">Why Phase Two?<a href="https://phasetwo.io/blog/webauthn-keycloak/#why-phase-two" class="hash-link" aria-label="Direct link to Why Phase Two?" title="Direct link to Why Phase Two?">​</a></h2>
<p>At <strong>Phase Two</strong>, we offer more than just Keycloak hosting—we help teams <strong>architect for modern identity</strong>.</p>
<p>Need help rolling out passkeys and passwordless login in your apps? We can help you:</p>
<ul>
<li>Customize your Keycloak flows for WebAuthn</li>
<li>Audit your security settings and fallback options</li>
<li>Ensure your deployment scales with your users</li>
<li>Keep your Keycloak up-to-date with the latest passkey support</li>
</ul>
<p>Let’s build a secure, passwordless future—together.</p>
<ul>
<li>📩 <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">Reach out to the team →</a></li>
<li>👉 <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Get Started with Free Managed Keycloak</a></li>
</ul>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>webauthn</category>
            <category>passkeys</category>
            <category>authentication</category>
        </item>
        <item>
            <title><![CDATA[SAML, Simplified.]]></title>
            <link>https://phasetwo.io/blog/introduction-to-simple-saml/</link>
            <guid>https://phasetwo.io/blog/introduction-to-simple-saml/</guid>
            <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[SAML has a bit of a reputation. For many developers, it lives in that shadowy corner of the B2B internet where XML still rules and stack traces seem to go on forever. If you've ever had the misfortune of debugging a malformed ``, you know the pain. But here's the thing: it doesn't have to be a nightmare.]]></description>
            <content:encoded><![CDATA[<p>SAML has a bit of a reputation. For many developers, it lives in that shadowy corner of the B2B internet where XML still rules and stack traces seem to go on forever. If you've ever had the misfortune of debugging a malformed <code>&lt;Assertion&gt;</code>, you know the pain. But here's the thing: it doesn't have to be a nightmare.</p>
<p>At Phase Two, we provide <a href="https://phasetwo.io/hosting/">managed hosting</a> and <a href="https://phasetwo.io/support/">enterprise support</a> for <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a>, a leading open-source Identity and Access Management platform. And while <a href="https://openid.net/specs/openid-connect-core-1_0-final.html" target="_blank" rel="noopener noreferrer">OIDC</a> has become the default for most modern applications, <a href="https://en.wikipedia.org/wiki/SAML_2.0" target="_blank" rel="noopener noreferrer">SAML</a> is still alive and well—especially in enterprise environments.</p>
<p>This post is a gentle (and opinionated) introduction to what SAML is, how it works, and why it still matters particularly if you're implementing SAML <a href="https://phasetwo.io/product/sso/">SSO</a> in Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-even-is-saml">What even is SAML?<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#what-even-is-saml" class="hash-link" aria-label="Direct link to What even is SAML?" title="Direct link to What even is SAML?">​</a></h3>
<p>SAML — short for Security Assertion Markup Language — is a standardized XML-based protocol used to exchange authentication and authorization data between parties, most commonly between an Identity Provider (IdP) and a Service Provider (SP).</p>
<p>The core idea? Let users log in once (with the IdP) and then access multiple systems (the SPs) without re-authenticating. That's Single Sign-On (SSO), and it's where SAML shines.</p>
<p>To make this concrete, imagine you're using Google Workspace to access your company's internal tools. You open up a tool like Jira (that's the Service Provider — it provides the service you want to use). But instead of logging in directly, you're redirected to Google to sign in — that's your Identity Provider. Google verifies who you are, then sends a message back to Jira saying, “Yes, this is the correct user, and here's some information about them.” The service (Jira) trusts that identity because it already trusts Google. In simple terms: the IdP is who you log in with, the SP is what you're trying to access.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-and-saml">Keycloak and SAML<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#keycloak-and-saml" class="hash-link" aria-label="Direct link to Keycloak and SAML" title="Direct link to Keycloak and SAML">​</a></h3>
<p>Keycloak supports both sides of the SAML flow. It can act as:</p>
<ul>
<li>A <strong>SAML Identity Provider</strong>, enabling users to authenticate in Keycloak and then access SAML-based applications.</li>
<li>A <strong>SAML Service Provider</strong>, allowing external IdPs (like Okta, Azure AD, or even legacy ADFS systems) to federate users into Keycloak-managed apps.</li>
</ul>
<p>That flexibility is one of Keycloak's greatest strengths — and also where things can get a bit complex.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-saml-triad-user-sp-idp">The SAML Triad: User, SP, IdP<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#the-saml-triad-user-sp-idp" class="hash-link" aria-label="Direct link to The SAML Triad: User, SP, IdP" title="Direct link to The SAML Triad: User, SP, IdP">​</a></h3>
<p>Let's simplify things. In a typical Keycloak-based SAML setup, you're dealing with three entities:</p>
<ol>
<li>The <strong>User</strong>: someone trying to log in.</li>
<li>The <strong>Service Provider (SP)</strong>: your application.</li>
<li>The <strong>Identity Provider (IdP)</strong>: Keycloak or another IdP.</li>
</ol>
<p>When Keycloak is the IdP, it authenticates the user and issues a SAML response back to the SP. When Keycloak is the SP, it receives the SAML response and handles session creation internally.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-a-saml-flow-look-like-in-keycloak">What does a SAML flow look like in Keycloak?<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#what-does-a-saml-flow-look-like-in-keycloak" class="hash-link" aria-label="Direct link to What does a SAML flow look like in Keycloak?" title="Direct link to What does a SAML flow look like in Keycloak?">​</a></h3>
<p>Let's say Keycloak is acting as the <strong>SAML Service Provider</strong>. Here's the basic flow:</p>
<ol>
<li>A user tries to access your app.</li>
<li>The app redirects the user to Keycloak (the SP).</li>
<li>Keycloak identifies that the user should log in via SAML (based on their realm or identity provider configuration).</li>
<li>Keycloak sends a SAML AuthnRequest to the external IdP (e.g., Okta).</li>
<li>The IdP authenticates the user and sends a signed SAML Response back to Keycloak.</li>
<li>Keycloak parses the assertion, validates the signature, and creates a user session.</li>
</ol>
<p>From there, the user gets access to the protected application—without having logged in directly with your app or even with Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="saml-messages-what-youre-actually-passing-around">SAML messages: what you're actually passing around<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#saml-messages-what-youre-actually-passing-around" class="hash-link" aria-label="Direct link to SAML messages: what you're actually passing around" title="Direct link to SAML messages: what you're actually passing around">​</a></h3>
<p>In SAML, two XML messages do most of the heavy lifting:</p>
<ul>
<li><strong>AuthnRequest</strong> (from SP → IdP): "Hey, can you authenticate this user for me?"</li>
<li><strong>Response</strong> (from IdP → SP): "Yes, here's proof that I authenticated them."</li>
</ul>
<p>The Response contains one or more Assertions, which are signed blobs of XML confirming that the user is who they say they are. It might look like gibberish to humans, but to systems like Keycloak, it's gold.</p>
<p>And yes, validating those signatures is as fussy as it sounds. But Keycloak handles most of that for you — so long as your trust relationships are properly configured.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-saml-request">The SAML Request<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#the-saml-request" class="hash-link" aria-label="Direct link to The SAML Request" title="Direct link to The SAML Request">​</a></h4>
<p>Before a user is authenticated, Keycloak (acting as the Service Provider) initiates the SAML flow by sending a SAML AuthnRequest to the configured Identity Provider. This request is typically passed via a browser redirect and contains metadata about who's asking for authentication and when.</p>
<p>Let's look at an example SAML Request</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnRequest</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">xmlns</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:protocol</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">ID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">saml_req_42kpl9zyx0qndmlwv5a6t93ne</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Version</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2.0</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">IssueInstant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T15:00:00Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">xmlns</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:assertion</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        https://auth.phasetwo.io/auth/realms/my-tenant/broker/saml-client/endpoint</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnRequest</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre></div></div>
<p>The Issuer tells the IdP who is requesting authentication. The ID is used to match the incoming response back to this request.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-saml-response">The SAML Response<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#the-saml-response" class="hash-link" aria-label="Direct link to The SAML Response" title="Direct link to The SAML Response">​</a></h4>
<p>When your Keycloak instance is acting as a SAML Service Provider, it will receive a SAML Response from the Identity Provider (IdP) after a user successfully authenticates. This response contains critical information like who the user is, how they authenticated, and whether the response is trusted.</p>
<p>Let's look at an example SAML Response and break down the pieces:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Response</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">IssueInstant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T12:00:00Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Version</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2.0</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">ID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">_abc12345-6789-4def-90ab-abcdef123456</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">xmlns</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:protocol</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name namespace" style="color:rgb(178, 204, 214)">xmlns:</span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">saml</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:assertion</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">saml:</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">https://idp.example.org</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">saml:</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Signature</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name namespace" style="color:rgb(178, 204, 214)">xmlns:</span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">ds</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2000/09/xmldsig#</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">SignedInfo</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">CanonicalizationMethod</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Algorithm</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2001/10/xml-exc-c14n#</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">SignatureMethod</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Algorithm</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2000/09/xmldsig#rsa-sha256</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Reference</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">URI</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">#_abc12345-6789-4def-90ab-abcdef123456</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Transforms</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Transform</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Algorithm</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2000/09/xmldsig#enveloped-signature</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Transform</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Algorithm</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2001/10/xml-exc-c14n#</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">InclusiveNamespaces</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">PrefixList</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">saml ds xs xsi</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">xmlns</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2001/10/xml-exc-c14n#</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Transform</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Transforms</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">DigestMethod</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Algorithm</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">http://www.w3.org/2000/09/xmldsig#sha256</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">DigestValue</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">XYZ123abc4567890=</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">DigestValue</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Reference</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">SignedInfo</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">SignatureValue</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            MIIEogIBAAKCAQEA2vGfZPjld7vFq3sGpKUqLbHu0XzX7r8VcU38D1bAgm...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">SignatureValue</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">KeyInfo</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">X509Data</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">X509Certificate</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    MIIC+zCCAeOgAwIBAgIJAKN+FfK01MywMA0GCSqGSIb3DQEBCwUAMBoxGDAW</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    BgNVBAMTD2lkcC5leGFtcGxlLm9yZzAeFw0yNTA0MDEwMDAwMDBaFw0yNjA0MDEw</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    MDAwMDBaMBoxGDAWBgNVBAMTD2lkcC5leGFtcGxlLm9yZzCBnzANBgkqhkiG9w0B</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    AQEFAAOBjQAwgYkCgYEAzRPl2OslkTfI4E4zVFYoxwHavwJ3uPDbGb8y03wvNVYl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    cCy+YBk6yXfiOlNwYQwcz92XJgYBj6+9oA+2bkfy3hDR9QO5Prcb2XtU6cKkB3vC</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    Z2IUXgsyF7ibOa9hRLo3A7N8Y3RhPG64Q9OcEv0bPPOb/NcAV+UBrQ9rEwUCAwEA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    AaNQME4wHQYDVR0OBBYEFH8GhkeIDx4MKZFOZkYI2gfnSkQOMB8GA1UdIwQYMBaA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    FH8GhkeIDx4MKZFOZkYI2gfnSkQOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    BQADgYEAFM6CvlquE7ZzpFLiJbR4TG0OCpgG4S2kgNR4+a6+6Zsd+wNoUNdPVFcU</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    Y4xLf3pJStIjMNxtQPC8j6WxZ9Hk8M+jfqU1mKPgM4zk9C2FJ9GVz9NNVrphTAjO</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    O6eFcX7zBhf8U4WshjWfHg==</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">X509Certificate</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">X509Data</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">KeyInfo</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag namespace" style="color:rgb(178, 204, 214)">ds:</span><span class="token tag" style="color:rgb(255, 85, 114)">Signature</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Status</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">StatusCode</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Value</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:status:Success</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Status</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Assertion</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">ID</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">_def45678-90ab-4abc-a1b2-cdef56789012</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">IssueInstant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T12:00:00Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Version</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2.0</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">xmlns</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:assertion</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">https://idp.example.org</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Issuer</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Subject</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">NameID</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Format</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                hello@phasetwo.io</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">NameID</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">SubjectConfirmation</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">Method</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">urn:oasis:names:tc:SAML:2.0:cm:bearer</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Subject</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Conditions</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">NotBefore</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T12:00:00Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">NotOnOrAfter</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T12:05:00Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">AudienceRestriction</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">Audience</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">https://sp.myapp.com</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Audience</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">AudienceRestriction</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Conditions</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnStatement</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">AuthnInstant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">2025-04-04T11:59:59Z</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnContext</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnContextClassRef</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnContextClassRef</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnContext</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">AuthnStatement</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Assertion</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">Response</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre></div></div>
<ul>
<li>The <code>&lt;Assertion&gt;</code> is where claims about the user are made—like their email or login timestamp.</li>
<li>The <code>&lt;Signature&gt;</code> helps ensure this data hasn't been tampered with.</li>
<li>The <code>&lt;Audience&gt;</code> defines who this message is meant for—your SP.</li>
</ul>
<p>Keycloak does the heavy lifting of verifying signatures, extracting claims, and creating a session. But understanding the anatomy of a SAML Response helps when troubleshooting or configuring trust relationships.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="trust-is-everything">Trust is everything<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#trust-is-everything" class="hash-link" aria-label="Direct link to Trust is everything" title="Direct link to Trust is everything">​</a></h3>
<p>For SAML to work securely, the SP and IdP must have a pre-configured trust relationship. That means each side has the other's metadata (usually containing certificates, endpoints, and supported bindings) and knows how to verify signatures.</p>
<p>In Keycloak, setting up a SAML identity provider (or service provider) involves uploading or referencing that metadata and tweaking a few settings. Once configured, Keycloak will:</p>
<ul>
<li>Automatically validate incoming assertions</li>
<li>Map attributes from the assertion into user claims</li>
<li>Create or update user accounts based on SAML attributes</li>
<li>Apply realm-wide policies like required roles or groups</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="butwhy-use-saml-in-2025">But...why use SAML in 2025?<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#butwhy-use-saml-in-2025" class="hash-link" aria-label="Direct link to But...why use SAML in 2025?" title="Direct link to But...why use SAML in 2025?">​</a></h3>
<p>SAML isn't new, sleek, or trendy. But it's everywhere in large enterprises, government systems, and educational institutions. If you want to work with those organizations—or provide identity federation across organizational boundaries—you'll need to speak SAML.</p>
<p>Even if your app is all-in on OIDC, SAML bridges can help you bring legacy systems into a modern identity framework. That's where Keycloak really shines: it lets you federate multiple identity providers (SAML, OIDC, LDAP, etc.) into a consistent, centralized user management plane.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-let-keycloak-handle-saml">Why let keycloak handle SAML?<a href="https://phasetwo.io/blog/introduction-to-simple-saml/#why-let-keycloak-handle-saml" class="hash-link" aria-label="Direct link to Why let keycloak handle SAML?" title="Direct link to Why let keycloak handle SAML?">​</a></h3>
<p>Here's the kicker: you don't want to write your own SAML implementation. Parsing, validating, and verifying SAML messages is error-prone and fraught with subtle security pitfalls. With Keycloak (and managed services like <a href="https://phasetwo.io/hosting/">Phase Two</a>), you don't have to.</p>
<p>Keycloak abstracts away the complexity. And at Phase Two, we abstract away the operational burden of <a href="https://phasetwo.io/hosting/">hosting</a> and <a href="https://phasetwo.io/product/identity/">securing</a> Keycloak itself. We provide:</p>
<ul>
<li>Production-grade Keycloak hosting</li>
<li>Built-in SAML and OIDC support</li>
<li>Multi-tenant federation capabilities</li>
<li>Automated updates and backups</li>
<li>Support from experts who live and breathe auth</li>
</ul>
<p>TL;DR</p>
<ul>
<li>SAML is a complex but powerful standard for SSO.</li>
<li>Keycloak provides full support for SAML, both as an IdP and SP.</li>
<li>Use SAML when you need to integrate with enterprise IdPs or legacy systems.</li>
<li>Don't roll your own — let Keycloak (and Phase Two) handle it.</li>
</ul>
<p>Need help configuring SAML in Keycloak? Schedule a consultation today or get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a></p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>saml</category>
            <category>authentication</category>
        </item>
        <item>
            <title><![CDATA[Keycloak SAML Identity Provider (IdP) Initiated Flow with Okta]]></title>
            <link>https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/</link>
            <guid>https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/</guid>
            <pubDate>Tue, 25 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[IdP Initiated Flow]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="idp-initiated-flow">IdP Initiated Flow<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-flow" class="hash-link" aria-label="Direct link to IdP Initiated Flow" title="Direct link to IdP Initiated Flow">​</a></h2>
<p>When implementing <a href="https://phasetwo.io/blog/introduction-to-simple-saml/">SAML</a> for the establishment of an Identity Provider, two primary options are available:</p>
<ol>
<li><a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-initated-flow">Service Provider</a> (SP) initiated</li>
<li><a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#identity-provider-initated-flow">Identity Provider</a> (IdP) initiated</li>
</ol>
<p>The SP initiated flow is widely recognized by users due to its straightforward configuration, which is merely the exchange of some metadata. In contrast, the IdP-initiated flow is less intuitive and involves an additional step that may not be readily apparent to many users. The purpose of this blog is to elucidate the steps necessary to successfully execute the IdP-initiated flow. We will setup a full <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-example-setup">example</a></p>
<p>A fundamental understanding of <a href="https://en.wikipedia.org/wiki/SAML_2.0" target="_blank" rel="noopener noreferrer">SAML 2.0</a> and <a href="https://www.keycloak.org/" target="_blank" rel="noopener noreferrer">Keycloak</a> is required to effectively follow the provided instructions.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>If you just want to skip to the code, visit the Phase Two <a href="https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated" target="_blank" rel="noopener noreferrer">IdP-initiated example</a>.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-each-flow-works">How Each Flow Works<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#how-each-flow-works" class="hash-link" aria-label="Direct link to How Each Flow Works" title="Direct link to How Each Flow Works">​</a></h2>
<p>The steps for each are similar, but also differen in important ways.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="service-provider-initiated-flow">Service Provider Initiated Flow<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-initiated-flow" class="hash-link" aria-label="Direct link to Service Provider Initiated Flow" title="Direct link to Service Provider Initiated Flow">​</a></h3>
<p>From the user's perspective, the SP initiated flow is the most common. The user visits the SP and is redirected to the IdP for authentication. After successful authentication, the IdP sends a SAML assertion back to the SP, which then logs the user in. This looks and feels like, I go to the website, I click Log In button, and the SP sends the browser to the IdP for authentication. The IdP then sends a SAML assertion back to the SP, which logs the user in.</p>
<p>In most cases, this is a more secure method as the request originates with the SP. The IdP is not aware of the SP until the user clicks the login button. This is a more secure method as it prevents replay attacks and other security issues.</p>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="identity-provider-initiated-flow">Identity Provider Initiated Flow<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#identity-provider-initiated-flow" class="hash-link" aria-label="Direct link to Identity Provider Initiated Flow" title="Direct link to Identity Provider Initiated Flow">​</a></h3>
<p>In this case, the thing to know is that the user is already authenticated in the IdP, and the IdP will send a SAML assertion to the SP. The SP will then use this assertion to log the user in.</p>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="components">Components<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#components" class="hash-link" aria-label="Direct link to Components" title="Direct link to Components">​</a></h3>
<p>The components involved in this example will be as follows:</p>
<p><strong>Identity Provider:</strong>
Any identity provider (IdP) that supports SAML 2.0 may be selected. The process begins by accessing the Identity Provider dashboard, where the user is prompted to authenticate. Upon successful authentication, the user may then request a service. For this case, we'll use <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-example-setup">Okta</a> as the IdP.</p>
<p><strong>Keycloak SAML 2.0 Identity Provider:</strong>
The Keycloak Identity Provider will be used for identity brokering and will process the SAML Response received from the Identity Provider. It is responsible for operations such as provisioning, signature verification, decryption etc.</p>
<p><strong>Keycloak Realm Client:</strong>
The Keycloak SAML client function is to maintain the authenticated user session within Keycloak. Another function of this generic client is to forward the authenticated user to the Service Provider.</p>
<p><strong>Service Provider:</strong>
The Service Provider refers to the application that the user seeks to access. Once the user has been authenticated in Keycloak, a new SAML Response is generated by the realm client and subsequently consumed by the Service Provider.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#setting-up-a-keycloak-instance" class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance">​</a></h2>
<p>The quickest way to get a fully-functional deployment of Keycloak is using Phase Two's <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">free tier</a>.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="idp-initiated-example-setup">IdP Initiated Example Setup<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-example-setup" class="hash-link" aria-label="Direct link to IdP Initiated Example Setup" title="Direct link to IdP Initiated Example Setup">​</a></h2>
<p>To communicate this concept, this example will utilize</p>
<ul>
<li>Okta as the Identity Provider (IdP)</li>
<li>Keycloak as the Identity Provider (IdP) broker</li>
<li>Keycloak as the SAML client</li>
<li>A simple Spring Boot application as the Service Provider (SP)</li>
</ul>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="okta">Okta:<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#okta" class="hash-link" aria-label="Direct link to Okta:" title="Direct link to Okta:">​</a></h3>
<p>Login in your Okta tenant and configure a new application.</p>
<p><img decoding="async" loading="lazy" alt="Okta Application Start" src="https://phasetwo.io/assets/images/okta-application-start-dcb3c461ebb5edaa2420e055bb29b920.png" width="1393" height="748" class="img_ev3q"></p>
<p>You will need to specify two things:</p>
<p><code>Single sign-on URL</code>: <a href="http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client" target="_blank" rel="noopener noreferrer">http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client</a> <br>
<code>Audience URI</code>: <a href="http://localhost:8080/realms/test-realm" target="_blank" rel="noopener noreferrer">http://localhost:8080/realms/test-realm</a></p>
<p><img decoding="async" loading="lazy" alt="Okta Application Setup" src="https://phasetwo.io/assets/images/okta-application-setup-8e11380d39e1e6c9a325035ef9ef4388.png" width="1393" height="748" class="img_ev3q"></p>
<p>The identity provider <code>redirect url</code> differs from what we typically observe in Identity Provider from the Keycloak console. Based on the documentation for <a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a>, the path <code>{brokerRedirectUrl}/clients/okta-client</code> indicates the <code>client-id</code> that is intended to maintain the service-provider application session. This will make more sense in the following steps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="saml-20-identity-provider">SAML 2.0 Identity Provider<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#saml-20-identity-provider" class="hash-link" aria-label="Direct link to SAML 2.0 Identity Provider" title="Direct link to SAML 2.0 Identity Provider">​</a></h3>
<p>The SAML identity provider (e.g: <code>okta-broker</code>) from the example above can be created by importing the <code>metadata.xml</code> from the application you just created in Okta. For this example we will provide the alias: <code>okta-broker</code>.</p>
<p>To do this navigate to Identity providers &gt; SAML v2.0. On this page, add the alias of your app (in our case it is <code>okta-broker</code>). Untoggle the "Use entity descriptor" option and select the <code>metadata.xml</code> file you downloaded from Okta. This will validate and auto-populate the correct areas.</p>
<p><img decoding="async" loading="lazy" alt="Identity Provider Setup" src="https://phasetwo.io/assets/images/identity-provider-setup-a5ecb5aad696ad5838454c6f1f47ad4e.png" width="1177" height="537" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="service-provider-application">Service Provider Application<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-application" class="hash-link" aria-label="Direct link to Service Provider Application" title="Direct link to Service Provider Application">​</a></h2>
<p>We created a simple SpringBoot app which has a <code>ACS</code> endpoint: <code>/login/saml2/sso</code> and a <code>entityId</code>: <code>/saml2/metadata</code> . Find the code for the <a href="https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated" target="_blank" rel="noopener noreferrer">example application</a>. Download and have this running on your local machine.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-realm-client">Keycloak Realm Client<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#keycloak-realm-client" class="hash-link" aria-label="Direct link to Keycloak Realm Client" title="Direct link to Keycloak Realm Client">​</a></h3>
<p>We need to create new SAML 2.0 Client in <code>test-realm</code>. This varies from the Identity Provider we just created. This can be done by importing the metadata from the Service Provider application. To get to the right place, go to Clients &gt; Import Client and upload the resource file. To check if the data was successfully imported, check the Assertion Consumer Service POST Binding URL, it should contain the endpoint mentioned above.</p>
<p><img decoding="async" loading="lazy" alt="Generic client advance" src="https://phasetwo.io/assets/images/generic-client-advance-651923735124e7fd4758640adcb5f0a2.png" width="1932" height="1418" class="img_ev3q"></p>
<p>Now we need to return to the documentation: <a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a>. In order to configure the IdP-initiated flow, a special field needs to be specified <code>IdP-Initiated SSO URL</code>.</p>
<ul>
<li><code>IdP-Initiated SSO URL</code> value of <code>okta-client</code></li>
</ul>
<p><img decoding="async" loading="lazy" alt="Generic client" src="https://phasetwo.io/assets/images/generic-client-2ad559061d08260b7a054a6e199052a6.png" width="1127" height="699" class="img_ev3q"></p>
<p>The field is part of the <code>{brokerRedirectUrl}/clients/okta-client</code> url. As we can see the value is different from that of the <code>clientId</code> of the client we just created.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="testing">Testing<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#testing" class="hash-link" aria-label="Direct link to Testing" title="Direct link to Testing">​</a></h2>
<p>To test this, please visit the Okta end user dashboard and select the application we created in the first step. This is the "tile" setup people are used to accessing an application.</p>
<p><img decoding="async" loading="lazy" alt="Okta flow start" src="https://phasetwo.io/assets/images/okta-init-flow-f5a0e0251ac836ef7c6b2272f5afc8eb.png" width="1393" height="748" class="img_ev3q"></p>
<p>For debugging purposes, you might consider using the <a href="https://support.okta.com/help/s/article/How-to-troubleshoot-with-SAML-Tracer?language=en_US" target="_blank" rel="noopener noreferrer">SAML Tracer</a> browser extension. If you take a moment to check the requests from the flow, you'll notice that it contains only SAMLResponse messages. This is a specific characteristic of the IdP-initiated flow.</p>
<p><img decoding="async" loading="lazy" alt="Okta SAML response" src="https://phasetwo.io/assets/images/okta-saml-response-74014ed4eb76ebc505dabf05910346f0.png" width="818" height="644" class="img_ev3q"> <img decoding="async" loading="lazy" alt="Client SAML response" src="https://phasetwo.io/assets/images/client-saml-response-15d59339a84784e6a104af3c90e797f2.png" width="803" height="644" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-just-happened">What Just Happened?<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#what-just-happened" class="hash-link" aria-label="Direct link to What Just Happened?" title="Direct link to What Just Happened?">​</a></h2>
<p>We have successfully secured a web application using the SAML protocol and IdP-initiated flow with Okta. Great work!</p>
<p>It is important to consider that the IdP-initiated flow does present certain security concerns, such as the potential for replay attacks, spoofing, or data tampering. To ensure we uphold security, it is essential that we take all necessary precautions, including implementing assertion encryption to protect sensitive data, utilizing signing to mitigate the risk of data tampering, and proper configuration for issuer validation.</p>
<p>However, it is worth noting that there is still a risk that a SAML assertion could be compromised, allowing an attacker to gain access to the service provider as the affected user. While the service provider can recognize and validate the assertion because it was issued by the expected issuer and signed with the correct key, it cannot confirm whether a malicious party was involved in sending it. Given these concerns about the IdP-initiated flow and its vulnerability to certain security threats, there may be circumstances in which we find it necessary to implement it based on our specific context.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="idp-initiated-flow-redirects-to-a-oidc-application">IdP-Initiated Flow Redirects to a OIDC Application<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-flow-redirects-to-a-oidc-application" class="hash-link" aria-label="Direct link to IdP-Initiated Flow Redirects to a OIDC Application" title="Direct link to IdP-Initiated Flow Redirects to a OIDC Application">​</a></h2>
<p>In the example above we configured the IdP-initiated flow to act as a identity broker and redirect to a client application which consumes SAML. Another interesting use case involves redirecting a user authenticated in the Keycloak realm to an <strong>OIDC client application</strong>.</p>
<p>Although this setup may not function seamlessly out of the box, an illustrative example can be found here: <a href="https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak" target="_blank" rel="noopener noreferrer">IdP Initiated Login with Keycloak</a>.</p>
<p>We will also attempt to create a local setup for this use case. To do this we will follow the exact same steps from the <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-example-setup">section</a> above, until we reach the step <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-application">Service Provider Application</a>. From there we will deviate.</p>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="service-provider-application-1">Service Provider Application<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#service-provider-application-1" class="hash-link" aria-label="Direct link to Service Provider Application" title="Direct link to Service Provider Application">​</a></h3>
<p>In this case the service provider application will 'talk' OIDC. As a simple example we can use the realm <code>security-admin-console</code> as the final client since it uses OIDC. A important thing to keep in mind is that for the client we will need to set a <code>Home URL</code>. In our case is the realm provisioned <code>http://localhost:8080/admin/test-realm/console/</code>.</p>
<p><img decoding="async" loading="lazy" alt="Security-admin-console-client" src="https://phasetwo.io/assets/images/security-admin-console-client-42b280c20b25d84b8f34b222dbc3440c.png" width="2803" height="1450" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-realm-client-1">Keycloak Realm Client<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#keycloak-realm-client-1" class="hash-link" aria-label="Direct link to Keycloak Realm Client" title="Direct link to Keycloak Realm Client">​</a></h3>
<p>We need to create new SAML 2.0 client in <code>test-realm</code>. Same as the configuration above we will set IdP-Initiated SSO URL name: <code>okta-client</code></p>
<p><img decoding="async" loading="lazy" alt="Generic client" src="https://phasetwo.io/assets/images/generic-client-2ad559061d08260b7a054a6e199052a6.png" width="1127" height="699" class="img_ev3q"></p>
<p>Now comes the interesting part. Since the SAML client we created will initialize the user session in Keycloak, we will need a mechanism to attach this session to an OIDC client. We can accomplish this with a simple redirect to the OIDC application. For that, we may consider using the <code>SAML Redirect Binding</code>, which uses a <code>GET</code> request instead of a <code>POST</code> to forward the SAML assertion.</p>
<p>We can associate our client application <code>Home URL</code> with this configuration.</p>
<p><img decoding="async" loading="lazy" alt="Client redirect binding" src="https://phasetwo.io/assets/images/saml-client-redirect-binding-07c2fb3b92b7ea7b73edf70fc1995b35.png" width="2426" height="1282" class="img_ev3q"></p>
<p>Do not forget to turn of the <code>Force POST binding</code> toggle in the SAML client general settings.</p>
<p>After doing all these configs we can proceed with the <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#testing">Testing</a> phase. What we are going to observe is that Keycloak created a twin session in the <code>security-admin-console</code> client for our user.</p>
<p><img decoding="async" loading="lazy" alt="Twin session oidc client" src="https://phasetwo.io/assets/images/twin-session-oidc-client-fe31844e76570edec870b74c757fe3d4.png" width="2348" height="586" class="img_ev3q"></p>
<p>Behind this configuration stands one magic piece which ensure the flow is going to work, the 'Cookie' authenticator. It ensures that the session for any <code>client</code> we request is first looked up in the Keycloak cookie. If the Authenticator is turned of the flow will no longer work. Our advice is to not rely on this configuration if your application will not allow Keycloak cookies.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this post, we explored the setup of an IdP-initiated flow with support for both <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-example-setup">SAML</a> and <a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#idp-initiated-flow-redirects-to-a-oidc-application">OIDC</a> applications. We also discussed some of the challenges associated with using the IdP-initiated flow and ways to address them.</p>
<p>We hope this has shed some light on the intricate world of Keycloak configuration and assisted you in finding a solution to your problems.</p>
<p>If you have any questions or would like to discuss this further, please feel free to reach out to us at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a>. We are always happy to help and share our knowledge with the community.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://phasetwo.io/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta/#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<ul>
<li><a href="https://www.lisenet.com/2020/keycloak-with-okta-idp-initiated-sso-login/" target="_blank" rel="noopener noreferrer">Keycloak with Okta IdP Initiated Login</a></li>
<li><a href="https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak" target="_blank" rel="noopener noreferrer">IdP Initiated Login with Keycloak</a></li>
<li><a href="https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login" target="_blank" rel="noopener noreferrer">Server Administration Guide</a></li>
<li><a href="https://groups.google.com/g/keycloak-user/c/s_sVxPGLhCs?pli=1" target="_blank" rel="noopener noreferrer">IdP Initiated Login</a></li>
</ul>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>okta</category>
            <category>authentication</category>
            <category>authorization</category>
            <category>keycloak</category>
            <category>sso</category>
            <category>idp-initiated</category>
            <category>guide</category>
        </item>
        <item>
            <title><![CDATA[Managed Keycloak Hosting - Picking a Provider]]></title>
            <link>https://phasetwo.io/blog/managed-keycloak-hosting/</link>
            <guid>https://phasetwo.io/blog/managed-keycloak-hosting/</guid>
            <pubDate>Mon, 09 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Picking a provider for Managed Keycloak Hosting should be about more that price, it should be about picking a partner to help you and your app succeed.]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-consider-phase-two-for-your-managed-keycloak-provider">Why consider Phase Two for your Managed Keycloak Provider<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#why-consider-phase-two-for-your-managed-keycloak-provider" class="hash-link" aria-label="Direct link to Why consider Phase Two for your Managed Keycloak Provider" title="Direct link to Why consider Phase Two for your Managed Keycloak Provider">​</a></h3>
<p>When it comes to identity and access management, Keycloak has established itself as the go-to open-source solution for authentication, authorization, and user management. However, successfully integrating and maintaining Keycloak requires more than just hosting—it requires expertise. That’s where the difference between Phase Two and other hosting providers becomes clear.</p>
<p>In this post, we’ll explore why Phase Two should be in strong consideration for your Managed Keycloak provider, especially when compared to providers like CloudIAM, Elest.io, and Servana, who focus solely on hosting the standard build of Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-managed-keycloak-landscape">The Managed Keycloak Landscape<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#the-managed-keycloak-landscape" class="hash-link" aria-label="Direct link to The Managed Keycloak Landscape" title="Direct link to The Managed Keycloak Landscape">​</a></h3>
<p>The demand for hosted Keycloak solutions has given rise to providers like <a href="https://www.cloud-iam.com/" target="_blank" rel="noopener noreferrer">Cloud IAM</a>, <a href="https://elest.io/open-source/keycloak" target="_blank" rel="noopener noreferrer">Elest.io</a>, and <a href="https://servanamanaged.com/products/managed-keycloak-service/" target="_blank" rel="noopener noreferrer">Servana</a>. These companies offer hosting services for the standard version of Keycloak, typically focusing only on infrastructure and uptime.</p>
<p>However, while these providers excel in devops, they lack the specialized Keycloak development expertise to go beyond hosting. This is where their limitations become apparent, as businesses often require customization, extensibility, and advanced support for their identity systems.</p>
<p>At Phase Two we started as Keycloak experts first. A large portion of our business is focused on <a href="https://phasetwo.io/support/">Support</a> of large Enterprises and helping them be successful with complex Keycloak deployments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-phase-two-stands-out">Why Phase Two Stands Out<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#why-phase-two-stands-out" class="hash-link" aria-label="Direct link to Why Phase Two Stands Out" title="Direct link to Why Phase Two Stands Out">​</a></h3>
<p>At Phase Two, we do more than host Keycloak—we help you get the most out of it. Here’s how we differentiate ourselves:</p>
<ol>
<li><strong>Keycloak Development Expertise and Community Maintainers</strong></li>
</ol>
<p>Unlike generic hosting providers, Phase Two is a team of Keycloak <a href="https://phasetwo.io/blog/keycloak-extensions-presentation/" target="_blank" rel="noopener noreferrer">experts</a>. We actively develop advanced features and extensions that enhance Keycloak’s capabilities. For instance, our <a href="https://phasetwo.io/product/organizations/">Organizations Extension</a> allows <a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/">multi-tenant</a> support out of the box, a feature not available in the standard Keycloak build.</p>
<p>This level of expertise ensures that your Keycloak deployment isn’t just functional, it’s optimized and future-proofed for your unique needs.</p>
<p>In addition, while these providers may suggest you can customize something, the reality is once you enter the realm of needing to add an extension for migration, organizations, theming or more, you will need more control.</p>
<p>We are active contributors to the Keycloak Project for bugs and features.</p>
<ol start="2">
<li><strong>Beyond Hosting – Full-Service Management</strong></li>
</ol>
<p>Phase Two provides comprehensive management of your Keycloak deployment. From custom configurations, region deployments, to integration with your existing systems, we tailor every deployment to fit your requirements.</p>
<p>With Phase Two, you’re not just getting a host, you’re gaining a partner who actively ensures your identity solution is robust, scalable, and secure.</p>
<p>On the other end of the email are real people, if you have a problem and reach out, we're there to quickly respond.</p>
<ol start="3">
<li><strong>Focus on Extensibility</strong></li>
</ol>
<p>Many businesses need to extend Keycloak to meet specific requirements, such as custom authentication flows or integrations with third-party systems. At Phase Two, we specialize in making Keycloak extensible, helping you unlock its full potential.</p>
<p>In contrast, standard hosting providers can only offer “out-of-the-box” Keycloak functionality, leaving you to navigate complex customizations alone.</p>
<p>For instance, we are the original implementers and continued maintainers of <a href="https://phasetwo.io/blog/keycloak-on-cockroachdb/">CockroachDB build</a>, which is a fantastic database for distributed SQL.</p>
<ol start="4">
<li><strong>Enterprise-Grade Support and Reliability</strong></li>
</ol>
<p>We understand that uptime is critical, but we also know that businesses need proactive support. At Phase Two, we provide:</p>
<ul>
<li>Continuous monitoring and optimization.</li>
<li>Regular security patches and updates.</li>
<li>Expert guidance to handle complex challenges.</li>
<li>Guidance for logging and eventing to a SIEM of your choice.</li>
</ul>
<p>With Phase Two, we ensure your infrastructure is not only operational but also resilient and efficient.</p>
<ol start="5">
<li><strong>Managed Upgrades and Compatibility</strong></li>
</ol>
<p>Keycloak updates can introduce breaking changes, especially for custom deployments. Phase Two takes the headache out of upgrades, ensuring that your deployment remains stable and compatible.</p>
<p>This seamless upgrade process is something you won’t find with standard-hosting solutions, but you'll find that you'll need rather quickly. We coordinate with your team to make sure you're ready and help verify upgrades.</p>
<p>If downtime is required (some previous version required this), we work to keep this down to minutes and make sure you're app is back up fast.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-a-partner-that-understands-your-needs">Choosing a Partner That Understands Your Needs<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#choosing-a-partner-that-understands-your-needs" class="hash-link" aria-label="Direct link to Choosing a Partner That Understands Your Needs" title="Direct link to Choosing a Partner That Understands Your Needs">​</a></h3>
<p>Managed Keycloak isn’t just about hosting, it’s about delivering a solution that scales with your business, adapts to your evolving needs, and remains secure in the face of new challenges.</p>
<p>While other providers offer the basics, Phase Two combines hosting with unmatched Keycloak development expertise, enterprise-grade support, and a commitment to innovation. The result? A managed Keycloak solution that’s tailor-made for your success.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ready-to-elevate-your-keycloak-deployment">Ready to Elevate Your Keycloak Deployment?<a href="https://phasetwo.io/blog/managed-keycloak-hosting/#ready-to-elevate-your-keycloak-deployment" class="hash-link" aria-label="Direct link to Ready to Elevate Your Keycloak Deployment?" title="Direct link to Ready to Elevate Your Keycloak Deployment?">​</a></h3>
<p>If you’re looking for a Managed Keycloak provider that goes beyond hosting, Phase Two is here to help. Explore our Managed Keycloak Hosting or Enterprise Support to learn more.</p>
<p>Schedule a consultation today or get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn how we can transform your identity solution.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
            <category>customization</category>
            <category>extension</category>
        </item>
        <item>
            <title><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 4: Cost]]></title>
            <link>https://phasetwo.io/blog/keycloak-for-startups-cost/</link>
            <guid>https://phasetwo.io/blog/keycloak-for-startups-cost/</guid>
            <pubDate>Mon, 02 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Part 4: There is no justification for variable cost for individual features.]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-4-cost-effectiveness-of-open-source">Part 4: Cost-Effectiveness of Open Source<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#part-4-cost-effectiveness-of-open-source" class="hash-link" aria-label="Direct link to Part 4: Cost-Effectiveness of Open Source" title="Direct link to Part 4: Cost-Effectiveness of Open Source">​</a></h3>
<p>At the heart of every startup's decision-making process lies the bottom line. We’re in an economy where cost-cutting measures are being taken across organizations, and many companies are starting to ask why their identity stack is such an outsized drag on their margins. Keycloak presents a compelling case with its open-source nature. Unlike proprietary IAM solutions that come with hefty price tags and recurring subscription fees, Keycloak offers a cost-effective alternative without compromising on features or security.</p>
<p>By leveraging Keycloak, startups can significantly reduce their operational expenses, channeling those resources into core business activities such as product development and market expansion. Moreover, the open-source community surrounding Keycloak ensures continuous improvement and innovation, all without the burden of additional licensing costs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-of-hosting-an-open-source-product-like-keycloak">Cost of Hosting an Open-Source Product like Keycloak<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#cost-of-hosting-an-open-source-product-like-keycloak" class="hash-link" aria-label="Direct link to Cost of Hosting an Open-Source Product like Keycloak" title="Direct link to Cost of Hosting an Open-Source Product like Keycloak">​</a></h3>
<p>Keycloak, being an open-source IAM solution, offers startups a significant advantage in terms of cost-effectiveness. Here's why:</p>
<ol>
<li>
<p><strong>No Licensing Fees</strong>: The most apparent benefit of using Keycloak is the absence of licensing fees. Startups can leverage the full spectrum of Keycloak's features without incurring any upfront costs or recurring subscription fees. This eliminates a significant financial burden, allowing startups to allocate resources more efficiently towards core business activities.</p>
</li>
<li>
<p><strong>Infrastructure Flexibility</strong>: With Keycloak, startups have the freedom to choose their hosting infrastructure, whether it's on-premises or in the cloud. This flexibility enables startups to optimize infrastructure costs based on their specific requirements and budget constraints. Additionally, Keycloak's lightweight footprint ensures minimal resource consumption, further reducing operational expenses.</p>
</li>
<li>
<p><strong>Community Support</strong>: The vibrant open-source community surrounding Keycloak provides startups with access to a wealth of resources, including documentation, forums, and community-contributed extensions. This extensive support network ensures timely resolution of issues and continuous improvement of the platform, all at no additional cost to startups.</p>
</li>
<li>
<p><strong>Expertise</strong>: Using an open-source solution means adopting that code base in a manner of speaking. Your team must build expertise in the code base and the capabilities of the tool in addition to all the protocols that come with IAM. That includes things like setting up authentication flows, configuring <a href="https://phasetwo.io/product/organizations/">organizations</a>, or <a href="https://phasetwo.io/support/#upgrades">performing upgrades</a>.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="predatory-nature-of-saas-solutions-like-auth0-and-workos">Predatory Nature of SaaS Solutions like Auth0 and WorkOS<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#predatory-nature-of-saas-solutions-like-auth0-and-workos" class="hash-link" aria-label="Direct link to Predatory Nature of SaaS Solutions like Auth0 and WorkOS" title="Direct link to Predatory Nature of SaaS Solutions like Auth0 and WorkOS">​</a></h3>
<p>While SaaS solutions like Auth0 and WorkOS offer convenience and ease of use, their pricing models can be detrimental to startups, especially those operating on limited budgets:</p>
<ol>
<li>
<p><strong>Subscription Fees</strong>: Auth0 and WorkOS typically operate on a subscription-based pricing model, where startups are required to pay recurring fees based on usage or the number of active users or identity providers (aka “SSO connections”). These fees can quickly escalate as startups scale their operations, potentially eating into precious financial resources that could otherwise be invested in growth initiatives.</p>
</li>
<li>
<p><strong>Vendor Lock-In</strong>: By relying on proprietary SaaS solutions, startups risk becoming locked into a vendor ecosystem, making it difficult to migrate to alternative solutions in the future. This lack of vendor independence can pose significant challenges, especially if the SaaS provider decides to increase prices or modify terms of service, leaving startups vulnerable to unforeseen expenses and disruptions.</p>
</li>
<li>
<p><strong>Hidden Costs</strong>: Beyond the base subscription fees, startups may encounter additional hidden costs associated with SaaS solutions, such as implementation fees, integration costs, and fees for accessing premium features or support services. These hidden costs can quickly accumulate, further exacerbating the financial strain on startups.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-empowering-startups-with-financial-freedom-and-flexibility">Conclusion: Empowering Startups with Financial Freedom and Flexibility<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#conclusion-empowering-startups-with-financial-freedom-and-flexibility" class="hash-link" aria-label="Direct link to Conclusion: Empowering Startups with Financial Freedom and Flexibility" title="Direct link to Conclusion: Empowering Startups with Financial Freedom and Flexibility">​</a></h3>
<p>In conclusion, the cost comparison between hosting an open-source product like Keycloak and opting for SaaS solutions like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a> and <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOS</a> underscores the importance of financial freedom and flexibility for startups.</p>
<p>By choosing Keycloak, startups can break free from the predatory pricing models of SaaS solutions, empowering themselves with a cost-effective and customizable IAM solution that aligns seamlessly with their budgetary constraints and growth objectives. With Keycloak, startups can redirect their financial resources towards innovation, differentiation, and sustainable growth, unlocking their full potential in the competitive landscape of Enterprise SaaS.</p>
<p>At Phase Two, we’ve embraced Keycloak, and want to share it’s value with as many companies as possible. If you are going to self-host, and need help getting started, we provide architecture review, installation help and ongoing <a href="https://phasetwo.io/support/">support</a>. If you’d prefer to go the SaaS direction, but want to avoid the disadvantages of proprietary solutions, our <a href="https://phasetwo.io/hosting/">hosted</a> offerings provide the benefits of Keycloak on our hosted infrastructure with pricing that isn’t predatory on your business model and growth.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="series-conclusion">Series conclusion<a href="https://phasetwo.io/blog/keycloak-for-startups-cost/#series-conclusion" class="hash-link" aria-label="Direct link to Series conclusion" title="Direct link to Series conclusion">​</a></h3>
<p>While alternatives like Auth0 and WorkOS may boast similar features, Keycloak stands out as the superior choice for enterprise SaaS startups. Auth0, though feature-rich, often comes with a higher price tag, making it less accessible for startups operating on tight budgets. On the other hand, these proprietary, while suitable for certain use cases, lacks the extensibility and customization options offered by Keycloak.</p>
<p>In summary, Keycloak emerges as the ideal IAM solution for enterprise SaaS startups, offering a perfect balance of cost-effectiveness, customizability, and feature-rich functionality. By embracing Keycloak, startups can elevate their security posture, enhance user experiences, and drive sustainable growth in today's competitive market landscape.</p>
<p>As you embark on your journey to revolutionize the world of Enterprise SaaS, let Keycloak and Phase Two be your trusted ally in conquering the challenges of identity and access management. Unlock the full potential of your startup with Keycloak and pave the way for a future of innovation and success.</p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
            <category>customization</category>
            <category>extension</category>
        </item>
        <item>
            <title><![CDATA[Implement Multi-Tenancy Applications with Keycloak Organizations]]></title>
            <link>https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/</link>
            <guid>https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/</guid>
            <pubDate>Mon, 11 Nov 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Applications needing to leverage Keycloak to consolidate logins can leverage Keycloak Organizations.]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h3>
<p>A multi-tenant application is a software architecture where a single instance of an application serves multiple, distinct customer groups or “tenants.” Each tenant, often representing an organization or user group, shares the same underlying infrastructure and codebase but operates within its own securely isolated environment. This allows each tenant to have individualized data, configurations, and sometimes even unique customizations, while benefiting from a shared platform that reduces overall resource demands and maintenance. Multi-tenancy is commonly used in SaaS (Software as a Service) applications, enabling businesses to scale efficiently, lower costs, and streamline updates while ensuring that each tenant’s data and settings remain private and distinct from others within the same application. This approach is particularly valuable in enterprise applications, where companies may need to provide access to different organizations, departments, or customer groups within a single solution.</p>
<p>This post will cover a few things:</p>
<ul>
<li>Concept of how to implement this with Keycloak and Phase Two's <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organization</a> extension (<a href="https://github.com/p2-inc/keycloak-orgs" target="_blank" rel="noopener noreferrer">Github</a>).</li>
<li>Proof-of-concept implementation that will include how to configure a Keycloak instance with clients, organizations, roles, and example applications to consume these implementations.</li>
</ul>
<p>We have also given a detailed talk at Keycloak Dev Day on <a href="https://phasetwo.io/blog/keycloak-orgs-presentation/">Multi-Tenancy within a Single Realm</a>.</p>
<p>The implementation, while not difficult, does require knowledge of how to use Keycloak. If you're unclear at any point, please reach out <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-organizations-instead-of-multiple-realms">Why use Organizations Instead of Multiple Realms?<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#why-use-organizations-instead-of-multiple-realms" class="hash-link" aria-label="Direct link to Why use Organizations Instead of Multiple Realms?" title="Direct link to Why use Organizations Instead of Multiple Realms?">​</a></h3>
<p>Using Phase Two’s Keycloak Extension for <a href="https://phasetwo.io/product/organizations/" target="_blank" rel="noopener noreferrer">Organizations</a> provides a more efficient and scalable way to implement multi-tenancy than managing multiple realms in Keycloak. Here’s why:</p>
<ol>
<li>Resource Efficiency: Each realm in Keycloak creates isolated resources, which can lead to increased memory and CPU usage as the number of realms grows. By using a single realm with organizational support, you can maintain performance while still supporting multiple tenants.</li>
<li>Centralized Management: Managing numerous realms can become complex, especially for shared configurations and customizations. The extension allows you to manage users, roles, and configurations within a single realm, reducing overhead.</li>
<li>Simplified User Access Control: With organizations, you can easily segment users by tenant within the same realm. This allows for straightforward user and role management without needing to duplicate settings across realms.</li>
<li>Improved Scalability: As your application scales, the single-realm approach with organizational structures is more sustainable, reducing maintenance and potential errors. It supports a logical separation for tenants without the performance and management limitations of numerous realms.</li>
</ol>
<p>Overall, the extension simplifies and optimizes Keycloak for multi-tenant applications, focusing on efficient resource usage and management scalability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conceptualizing-multi-tenant-implementation">Conceptualizing Multi-Tenant Implementation<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#conceptualizing-multi-tenant-implementation" class="hash-link" aria-label="Direct link to Conceptualizing Multi-Tenant Implementation" title="Direct link to Conceptualizing Multi-Tenant Implementation">​</a></h3>
<p>We're going to use the following example system:</p>
<ul>
<li>2 applications</li>
<li>2 tenants of each applications</li>
<li>Single Keycloak realm</li>
<li>Two Keycloak Organizations to represent the tenants</li>
<li>Role names that match the applications</li>
</ul>
<p>We can visualize this in the following diagram:</p>
<p><img decoding="async" loading="lazy" alt="System" src="https://phasetwo.io/assets/images/system-77f0bb306b484ef7aa0635f2b8952455.png" width="2354" height="1601" class="img_ev3q"></p>
<p>In Keycloak, we match the system implementation by doing the following:</p>
<ul>
<li>Two Clients match the two Applications. More Clients added per tenant.</li>
<li>Two Organizations match the two Tenants. This could be scaled out for additional tenants.</li>
<li>One role per Tenant within each Organization.</li>
</ul>
<p>If we break this down specifically with the names:</p>
<p><em>Application system</em></p>
<ul>
<li>Two applications: Zoo, Aquarium</li>
<li>Two tenants: California, New York</li>
</ul>
<p><em>Keycloak system</em></p>
<ul>
<li>Two clients: Zoo, Aquarium</li>
<li>Two organizations: California, New York</li>
<li>Two roles per for Org: zoo, aquarium</li>
</ul>
<p>In order for users to then have access to the various Clients and Tenants, we would add them as members to the Organization, then assign them roles that match their access.</p>
<p>We can visualize this as follows:</p>
<p><img decoding="async" loading="lazy" alt="User Access" src="https://phasetwo.io/assets/images/user-access-f73e24ee7247a5d91563e808e0fbc5af.png" width="1681" height="1138" class="img_ev3q"></p>
<p>This represents following access:</p>
<ul>
<li>User 1<!-- -->
<ul>
<li>Zoo application, California tenant</li>
<li>Aquarium application, California tenant</li>
<li>Aquarium application, New York tenant</li>
</ul>
</li>
<li>User 2<!-- -->
<ul>
<li>Zoo application, California tenant</li>
<li>Zoo application, New York tenant</li>
</ul>
</li>
</ul>
<p>Users are granted roles to represent application access. Users are made members of an Organization to represent tenant access.</p>
<p>Consuming and implementing this representation can be done via the Organizations API on the <a href="https://phasetwo.io/api/get-me/" target="_blank" rel="noopener noreferrer"><code>/me</code> endpoint</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sample-implementation">Sample Implementation<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#sample-implementation" class="hash-link" aria-label="Direct link to Sample Implementation" title="Direct link to Sample Implementation">​</a></h3>
<p>Now that we've discussed how the system is designed, let's work through an example of this application.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-configuration">Keycloak Configuration<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#keycloak-configuration" class="hash-link" aria-label="Direct link to Keycloak Configuration" title="Direct link to Keycloak Configuration">​</a></h4>
<p>We'll be using Phase Two's <a href="https://phasetwo.io/hosting/">free hosted Keycloak</a> to set up a deployment and associated organizations. Visit <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Dashboard</a> to sign up for a free account and create a deployment. After you have created the deployment, click the "Open Console" link to go to the Keycloak deployment.</p>
<p>Next we'll configure Keycloak and then configure the applications.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-keycloak">Configuring Keycloak<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#configuring-keycloak" class="hash-link" aria-label="Direct link to Configuring Keycloak" title="Direct link to Configuring Keycloak">​</a></h5>
<ol>
<li>Go to the Clients tab. We will create two Clients. Provide a <code>Client ID</code> of <code>aquarium</code> and <code>zoo</code> to each. Enter a value of <code>*</code> for <code>Valid redirect URIs</code> (don't use this for production).</li>
<li>Go to the Users tab. Add a user with a username of <code>jane</code>, first name of <code>jane</code>, and last name of <code>goodall</code>. Add a second user with a username of <code>jacques</code>, first name of <code>jacques</code>, and last name of <code>cousteau</code>.</li>
<li>Go to the Organizations tab. Create two Organizations. Name one <code>california</code> and the other <code>new york</code>. For each organization, create two roles: <code>aquarium</code> and <code>zoo</code>. For each organization, add the two user's created to them as members.</li>
<li>Inside the <code>california</code> organization, assign the <code>aquarium</code> role to the <code>jacques</code> user. Assign the <code>zoo</code> role to the <code>jane</code> user.</li>
<li>Inside the <code>newyork</code> organization, assign the <code>aquarium</code> role to both users. Assign the <code>zoo</code> role only to the <code>jane</code> user.</li>
</ol>
<p>At this point we should have all we require for configuring our client applications as needed.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-client-applications">Configuring Client Applications<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#configuring-client-applications" class="hash-link" aria-label="Direct link to Configuring Client Applications" title="Direct link to Configuring Client Applications">​</a></h5>
<p>We won't go through all the steps required to build a client application in this post. We have a <code>nx</code> <a href="https://github.com/p2-inc/examples/tree/main/multitenant" target="_blank" rel="noopener noreferrer">monorepo</a> generated for use where you can clone it and change the OIDC client config to speak to the correct applications.</p>
<p>Update the associated values make use of the Keycloak configuration you created above: realm name, clients, and so on. The app is setup already with a scaffold to pull the <code>/orgs/me</code> endpoint.</p>
<p>Once you have the application setup (check readme for more details), log in as the <code>jane</code> and <code>jacques</code> user to see the variation of which organization and roles they have access to. You'll see a variation of this:</p>
<p><img decoding="async" loading="lazy" alt="Organizations" src="https://phasetwo.io/assets/images/orgs-39834411eecdd9d92991c919f3777a05.png" width="1100" height="796" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="in-conclusion">In Conclusion<a href="https://phasetwo.io/blog/multi-tenancy-with-keycloak-organizations/#in-conclusion" class="hash-link" aria-label="Direct link to In Conclusion" title="Direct link to In Conclusion">​</a></h3>
<p>Creating a multi-tenant application isn't necessarily easy, but it is well within the capability of Keycloak. If you end up leveraging our Organization's extension to support multi-tenancy, let us <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">know</a>.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>organizations</category>
            <category>multitenant</category>
        </item>
        <item>
            <title><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 3: Customization]]></title>
            <link>https://phasetwo.io/blog/keycloak-for-startups-customization/</link>
            <guid>https://phasetwo.io/blog/keycloak-for-startups-customization/</guid>
            <pubDate>Mon, 04 Nov 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Part 3: Keycloak stands out in customizability for tailored solutions.]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-3-customizability-for-tailored-solutions-why-keycloak-stands-out">Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out<a href="https://phasetwo.io/blog/keycloak-for-startups-customization/#part-3-customizability-for-tailored-solutions-why-keycloak-stands-out" class="hash-link" aria-label="Direct link to Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out" title="Direct link to Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out">​</a></h3>
<p>One size rarely fits all, especially in the world of enterprise software. Startups require flexibility to adapt and tailor IAM solutions to their unique business requirements. Keycloak shines in this aspect, offering extensive customization capabilities that empower startups to mold the platform according to their specific needs.</p>
<p>From branding and user interface customization to advanced authentication flows and authorization policies, Keycloak provides a comprehensive toolkit for startups to craft seamless and secure user experiences. Whether integrating with existing systems or building entirely new functionalities, Keycloak's flexibility ensures a perfect fit for any enterprise SaaS startup. Here’s how Keycloak’s flexibility stands apart from commercial, closed-source solutions, and why this is a key differentiator:</p>
<ol>
<li>
<p><strong>Flexible Authentication and Authorization Flows</strong>: Keycloak supports a broad range of authentication flows out of the box, including standard Single Sign-On (<a href="https://phasetwo.io/product/sso/">SSO</a>), multi-factor authentication (MFA), and custom flows that can incorporate additional security checks or personalized user experiences. Through its flexible Authentication Flow configuration, Keycloak allows you to define step-by-step authentication processes, integrating custom forms, conditional checks, and required actions. This customization ensures that security and compliance requirements can be met without compromising on user experience.</p>
</li>
<li>
<p><strong>Adaptable User Interfaces and Branding</strong>: The user experience is a major part of identity management. Keycloak makes it easy to customize login pages, consent screens, and other interfaces to align with your brand’s look and feel. You can alter these templates by modifying Keycloak’s HTML, CSS, and JavaScript files, enabling seamless brand integration and a cohesive customer experience. Closed-source solutions, by contrast, often provide limited UI customization options, restricting the degree to which you can personalize the user experience.</p>
</li>
<li>
<p><strong>Modular Extensions with Service Provider Interfaces (SPIs)</strong>: Keycloak’s modular architecture is built to support extensive custom extensions via Service Provider Interfaces (SPIs). SPIs are essentially integration points that allow developers to replace or enhance Keycloak’s default behavior. For instance, if you need a unique authentication method, such as biometric authentication or a custom identity provider integration, you can build and plug in your own SPI modules. This extensibility offers startups the freedom to experiment, innovate, and introduce unique capabilities not available in off-the-shelf commercial IAM solutions.</p>
</li>
<li>
<p><strong>Seamless Integration with Existing Systems</strong>: Because it is open source, Keycloak is highly compatible with various enterprise ecosystems and can be deeply integrated with existing IT <a href="https://phasetwo.io/product/integrations/">infrastructure and applications</a>. Keycloak’s ability to connect with external identity providers, databases, custom authentication mechanisms, and business systems allows startups to create a seamless experience for users who may be interacting with multiple applications. This integration potential extends to support for protocols such as LDAP, Active Directory, SAML, and OIDC, making it possible to incorporate Keycloak into hybrid and legacy environments with minimal friction.</p>
</li>
<li>
<p><strong>API-Driven Customization and Developer-Friendly Environment</strong>: Keycloak’s comprehensive APIs and developer-friendly tooling make it an ideal choice for startups that value agility and the ability to innovate quickly. Through Keycloak’s REST APIs, developers can programmatically manage users, sessions, roles, permissions, and more. This API-driven approach allows startups to automate IAM workflows, create custom dashboards, or extend functionalities as business needs evolve. In a closed-source solution, API access may be limited or gated behind premium licensing tiers, restricting the organization’s ability to fully integrate IAM within its applications.</p>
</li>
<li>
<p><strong>Open Source Freedom and Community-Driven Innovation</strong>: Keycloak’s open-source nature provides the ultimate freedom to customize, extend, and experiment without limitations. The active Keycloak community continuously contributes new features, plugins, and enhancements, making it possible to stay on the cutting edge of IAM innovation. Startups benefit not only from this community-driven innovation but also from the ability to create proprietary modifications or custom forks of Keycloak to meet unique requirements—a level of freedom and flexibility typically unavailable with commercial IAM providers.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-customizability-matters-in-comparison-to-closed-source-solutions">Why Customizability Matters in Comparison to Closed-Source Solutions<a href="https://phasetwo.io/blog/keycloak-for-startups-customization/#why-customizability-matters-in-comparison-to-closed-source-solutions" class="hash-link" aria-label="Direct link to Why Customizability Matters in Comparison to Closed-Source Solutions" title="Direct link to Why Customizability Matters in Comparison to Closed-Source Solutions">​</a></h3>
<p>In contrast, commercial IAM solutions like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a> or <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOS</a> often limit customization to predefined configuration options. These providers typically restrict access to source code and SPIs, which can prevent organizations from fully adapting the IAM solution to fit unique workflows, branding requirements, or security demands. Additionally, while some commercial IAM providers offer custom integrations or enhanced features, these are often gated behind higher-tier pricing plans, increasing costs as startups scale.</p>
<p>The flexibility Keycloak offers through customization allows startups to truly own their IAM strategy, aligning it directly with their brand identity, security protocols, and business objectives. By choosing Keycloak, startups retain the freedom to innovate at every layer of the IAM process, without being constrained by the limitations or financial restrictions imposed by closed-source, SaaS-based IAM providers.</p>
<p>For your extension needs, Phase Two provides the ability to load custom themes and extensions for customers at the <a href="https://phasetwo.io/hosting/">Enterprise level</a>. Please contact <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> for more information about how to benefit from our hosting platform while customizing Keycloak to your specific needs.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a> now</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
            <category>customization</category>
            <category>extension</category>
        </item>
        <item>
            <title><![CDATA[Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login]]></title>
            <link>https://phasetwo.io/blog/magic-links-native-applications/</link>
            <guid>https://phasetwo.io/blog/magic-links-native-applications/</guid>
            <pubDate>Thu, 31 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Leverage the Keycloak Magic Link extension to easily and securely log users into native applications.]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-and-native-applications">Keycloak and Native Applications<a href="https://phasetwo.io/blog/magic-links-native-applications/#keycloak-and-native-applications" class="hash-link" aria-label="Direct link to Keycloak and Native Applications" title="Direct link to Keycloak and Native Applications">​</a></h3>
<p>Native applications for iOS, Android, and other platforms can integrate with Keycloak to provide secure, centralized authentication and authorization services. By utilizing Keycloak, these applications can streamline the user login experience through various protocols such as OAuth 2.0 and OpenID Connect, which Keycloak natively supports. With Keycloak, mobile applications can handle user sign-in, token management, and session handling securely, ensuring user identities are managed consistently across devices and platforms. This setup enables native applications to offload the complexities of authentication to Keycloak, allowing seamless integrations with features like Single Sign-On (SSO), social logins, and multi-factor authentication, while developers can focus on app functionality rather than handling sensitive user data directly. Additionally, Keycloak’s support for fine-grained access control and roles ensures that native apps can manage user permissions efficiently, creating a robust foundation for secure, scalable mobile applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keycloak-magic-link">Keycloak Magic Link<a href="https://phasetwo.io/blog/magic-links-native-applications/#keycloak-magic-link" class="hash-link" aria-label="Direct link to Keycloak Magic Link" title="Direct link to Keycloak Magic Link">​</a></h3>
<p>The <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">Keycloak Magic Link extension</a> by Phase Two offers a plugin that enables passwordless authentication for Keycloak through the use of magic links. This plugin allows users to log in without needing to remember a password by simply clicking a secure link sent to their email. It works by generating a one-time-use link, which, when clicked, authenticates the user directly, improving both security and user experience. This approach is particularly useful for applications where ease of access and reducing password fatigue are priorities. The repository provides a robust, configurable setup compatible with Keycloak’s authentication workflows, making it straightforward to implement in various types of applications that require seamless, passwordless login functionality.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="leveraging-magic-link-for-easy-sso">Leveraging Magic Link for Easy SSO<a href="https://phasetwo.io/blog/magic-links-native-applications/#leveraging-magic-link-for-easy-sso" class="hash-link" aria-label="Direct link to Leveraging Magic Link for Easy SSO" title="Direct link to Leveraging Magic Link for Easy SSO">​</a></h3>
<p>Applications can use the Magic Link <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">resource</a> to issue a request to get a link or generate an email. For example:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl --request POST https://keycloak.host/auth/realms/test/magic-link \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Accept: application/json" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Content-Type: application/json" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --header "Authorization: Bearer &lt;access_token&gt;" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> --data '{"email":"foo@foo.com","client_id":"account-console","redirect_uri":"https://keycloak.host/auth/realms/test/account/","expiration_seconds":3600,"force_create":true,"update_profile":true,"update_password":true,"send_email":false}'</span><br></span></code></pre></div></div>
<p>would result in a sample response of</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"user_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"386edecf-3e43-41fd-886c-c674eea41034"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"link"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://keycloak.host/auth/realms/test/login-actions/action-token?key=eyJhbG...KWuDyE&amp;client_id=account-console"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"sent"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre></div></div>
<p>Simply change the <code>redirect_uri</code> to be a registered URI scheme for the application.</p>
<p>Once a user clicks that link in the email, extract the <code>code</code> param of the url, and use that to then issue requests to the <code>token</code> endpoint. For example:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -X "POST" "https://keycloak.host/auth/realms/test/openid-connect/token" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     -H 'Content-Type: application/x-www-form-urlencoded' \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "grant_type=authorization_code" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "code=b5c7a811-0e61-42b9-9fc5-934fd614b57e.ff2148c2-a20d-4efc-ba8e-e7825f5ae204.edd26036-7f7e-4a91-be47-84603e57e3aa" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "client_id=account-console" \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     --data-urlencode "redirect_uri=myapp://redirect"</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/magic-links-native-applications/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Using magic links with Keycloak for a native application offers a streamlined, user-friendly authentication experience, especially beneficial for mobile users. With magic links, users can log in effortlessly without needing to remember or type passwords—often a challenging task on mobile devices. Instead, a secure, one-time-use link is sent to their email, allowing them to authenticate with a simple tap. This approach not only simplifies the login process but also enhances security by reducing password-related vulnerabilities, such as weak or reused passwords. For the end user, this means a smoother, faster, and more secure login experience, allowing them to access the application with minimal effort and without the risk of password fatigue. Magic link authentication via Keycloak aligns well with modern security standards and significantly improves user engagement by lowering login barriers in native applications.</p>
<p>Use Phase Two's free <a href="https://phasetwo.io/hosting/">hosting</a> to try it out or send us a message at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to discuss your use case or learn more.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>keycloak_magic_link</category>
            <category>keycloak_extensions</category>
        </item>
        <item>
            <title><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 2: Data]]></title>
            <link>https://phasetwo.io/blog/keycloak-for-startups-data/</link>
            <guid>https://phasetwo.io/blog/keycloak-for-startups-data/</guid>
            <pubDate>Mon, 28 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Part 2: The ability to control your data is essential, now and in the future.]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-2---owning-your-data-security-privacy-and-control">Part 2 - Owning Your Data: Security, Privacy, and Control<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#part-2---owning-your-data-security-privacy-and-control" class="hash-link" aria-label="Direct link to Part 2 - Owning Your Data: Security, Privacy, and Control" title="Direct link to Part 2 - Owning Your Data: Security, Privacy, and Control">​</a></h3>
<p>In the age of data breaches and privacy concerns, owning and controlling your user data is not just a preference but a strategic imperative for organizations, particularly when it comes to Identity and Access Management (IAM) solutions. Let's explore the reasons why owning your data matters and the risks associated with entrusting it to a Software-as-a-Service (SaaS) solution.</p>
<ol>
<li>
<p><strong>Data Security</strong>: By hosting your IAM solution on-premise on your own infrastructure, or with a hybrid that allows you to control the database, you retain control over the security measures implemented to safeguard your user data. This includes encryption protocols, access controls, network security configurations, and intrusion detection systems. <strong>With data breaches becoming increasingly common</strong>, maintaining tight control over your data security posture is paramount for protecting sensitive information and mitigating risks.</p>
</li>
<li>
<p><strong>Data Privacy Compliance</strong>: Depending on your industry or geographical location, you may be subject to stringent data privacy regulations such as the General Data Protection Regulation (GDPR) or the California Consumer Privacy Act (CCPA). By owning your data, you can ensure compliance with these regulations through appropriate data handling practices, transparent communication with users about data collection and usage, and streamlined management of data subject access requests (DSAR's) and consent processes.</p>
</li>
<li>
<p><strong>Customization and Integration</strong>: When you own your data, you have the freedom to customize your IAM solution and integrate it seamlessly with other systems and applications within your organization's ecosystem. This level of flexibility enables you to tailor the solution to meet your specific business requirements, streamline workflows, and enhance operational efficiency. In contrast, SaaS solutions may impose limitations on customization and integration, hindering your ability to adapt the solution to evolving business needs. For example, with Keycloak, you can create custom authentication flows, such as multi-factor authentication with step-up policies based on user roles or risk profiles, or integrate Keycloak with your CRM to automatically sync user permissions with customer account changes.</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="risks-of-saas-data-hosting">Risks of SaaS Data Hosting<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#risks-of-saas-data-hosting" class="hash-link" aria-label="Direct link to Risks of SaaS Data Hosting" title="Direct link to Risks of SaaS Data Hosting">​</a></h4>
<p>While SaaS solutions offer convenience and ease of deployment, they also present inherent risks when it comes to hosting your user data:</p>
<ol>
<li>
<p><strong>Data Access and Control</strong>: Entrusting your user data to a SaaS provider means relinquishing control over how that data is stored, accessed, and managed. You are reliant on the provider to implement robust security measures and adhere to data privacy regulations, with limited visibility and oversight on your part.</p>
</li>
<li>
<p><strong>Vendor Lock-In</strong>: Adopting a SaaS IAM solution may result in vendor lock-in, where migrating away from the solution becomes challenging or costly. This lock-in can restrict your ability to switch providers or transition to a self-hosted solution in the future, potentially limiting your flexibility and independence.</p>
</li>
<li>
<p><strong>Data Sovereignty Concerns</strong>: Depending on the jurisdiction in which the SaaS provider operates, you may encounter data sovereignty issues that impact your ability to control where your data is stored and processed. This lack of control over data residency can complicate compliance efforts and expose your organization to regulatory risks.</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-empowering-organizations-with-data-ownership">Conclusion: Empowering Organizations with Data Ownership<a href="https://phasetwo.io/blog/keycloak-for-startups-data/#conclusion-empowering-organizations-with-data-ownership" class="hash-link" aria-label="Direct link to Conclusion: Empowering Organizations with Data Ownership" title="Direct link to Conclusion: Empowering Organizations with Data Ownership">​</a></h4>
<p>In conclusion, owning and controlling your user data offers numerous benefits, including enhanced security, compliance, customization, and integration capabilities. While SaaS solutions may offer convenience, organizations must carefully weigh the risks associated with relinquishing control over their data and consider the long-term implications for security, privacy, and regulatory compliance.</p>
<p>In order to provide customers who are used to SaaS solutions with flexibility in data sovereignty, Phase Two has developed "BYODB" (bring your own Database). BYODB allows customers the ability to benefit from the ease, scalability, and robustness of our <a href="https://phasetwo.io/hosting/">hosted offering</a> while still owning and controlling their data.</p>
<p>For those hosting Keycloak entirely themselves, Phase Two offers <a href="https://phasetwo.io/support/">Enterprise level support</a> to ensure that systems are properly configured, setup, upgraded, and managed by customers.</p>
<p>By prioritizing data ownership and implementing robust IAM solutions that align with organizational objectives and values, organizations can mitigate risks, safeguard sensitive information, and maintain sovereignty over their data assets in an increasingly interconnected and data-driven world.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customizability for Tailored Solutions</a> now</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
            <category>data</category>
        </item>
        <item>
            <title><![CDATA[Why your startup should use Keycloak for SSO and User Management - Part 1: Standards]]></title>
            <link>https://phasetwo.io/blog/keycloak-for-startups-standards/</link>
            <guid>https://phasetwo.io/blog/keycloak-for-startups-standards/</guid>
            <pubDate>Mon, 21 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Every commercial and open source IAM offering is an implementation of the same standards.]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In this <a href="https://phasetwo.io/blog/keycloak-for-startups-overview/">series</a> we are proposing Keycloak as a superior alternative to commercial identity offerings.</p><ul>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1: Standards</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3: Customization</a></li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4: Cost</a></li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="part-1-standardized-protocols-and-minimal-feature-set-differentiation">Part 1: Standardized Protocols and Minimal Feature Set Differentiation<a href="https://phasetwo.io/blog/keycloak-for-startups-standards/#part-1-standardized-protocols-and-minimal-feature-set-differentiation" class="hash-link" aria-label="Direct link to Part 1: Standardized Protocols and Minimal Feature Set Differentiation" title="Direct link to Part 1: Standardized Protocols and Minimal Feature Set Differentiation">​</a></h3>
<p>In the realm of Identity and Access Management (IAM) solutions, it's essential to recognize that many offerings, both commercial and open source, operate on standardized protocols such as OpenID Connect (OIDC), Security Assertion Markup Language (SAML), System for Cross-domain Identity Management (SCIM), Lightweight Directory Access Protocol (LDAP), and more. This adherence to standardized protocols often results in minimal differentiation at the feature set level across various options. Let's delve into this further:</p>
<ol>
<li>
<p><strong>Protocol Compliance</strong>: Whether it's OIDC for modern authentication, SAML for Single Sign-On (<a href="https://phasetwo.io/product/sso/">SSO</a>), SCIM for user provisioning, or LDAP for directory services, IAM solutions are built upon established industry standards. This adherence ensures interoperability and compatibility with a wide range of applications and systems, irrespective of the chosen solution.</p>
</li>
<li>
<p><strong>Core Functionality</strong>: At their core, <a href="https://phasetwo.io/blog/open-source-iam/">IAM solutions</a> primarily focus on fundamental functionalities such as authentication, authorization, user provisioning, and identity federation. These functionalities form the backbone of IAM systems and are present across all offerings, regardless of whether they are commercial or open source.</p>
</li>
<li>
<p><strong>Feature Parity</strong>: While commercial IAM solutions may tout additional features or value-added services, the underlying feature set remains largely consistent across the board. Basic <a href="https://phasetwo.io/product/identity/">functionalities</a> such as user authentication, role-based access control (RBAC), multi-factor authentication (MFA), and audit logging are standard offerings in both commercial and open-source IAM solutions.</p>
</li>
<li>
<p><strong>Customization and Extensibility</strong>: Differentiation often occurs at the level of <a href="https://phasetwo.io/blog/keycloak-extensions-presentation/">customization and extensibility</a> rather than core features. Both commercial and open-source IAM solutions provide APIs, SDKs, and extension points that enable organizations to tailor the platform to their specific requirements, integrate with existing systems, and extend functionality as needed.</p>
</li>
<li>
<p><strong>Vendor-Specific Enhancements</strong>: While the core feature set may be similar across IAM solutions, vendors may differentiate themselves through vendor-specific enhancements, integrations, or ecosystem partnerships. However, these enhancements typically cater to niche use cases or specific industries and may not significantly impact the overall feature parity among IAM solutions.</p>
</li>
<li>
<p><strong>Closed Development</strong>: One of the key issues is that many commercial solutions are developed in isolation of public audits and community scrutiny. Companies build and operate these core secuirty protocols and standards behind a veil of secrecy, not sharing their implementations to allow review by security professionals and standards bodies. In contrast, open source solutions are built to allow full review and participation by both. Keycloak has been through many independent reviews and audits, and has a mature process for handling security issues in a timely fashion. Do you want these critical security implementations to be built with a rigor for review, or something one developer slapped together from a few examples and ChatGPT sessions?</p>
</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-1-making-informed-decisions-beyond-feature-sets">Conclusion 1: Making Informed Decisions Beyond Feature Sets<a href="https://phasetwo.io/blog/keycloak-for-startups-standards/#conclusion-1-making-informed-decisions-beyond-feature-sets" class="hash-link" aria-label="Direct link to Conclusion 1: Making Informed Decisions Beyond Feature Sets" title="Direct link to Conclusion 1: Making Informed Decisions Beyond Feature Sets">​</a></h4>
<p>In conclusion, while it's true that there is minimal differentiation on the feature set level among IAM solutions due to standardized protocols, organizations should focus on other factors when evaluating and selecting a solution. Considerations such as cost-effectiveness, customization capabilities, vendor support, community engagement, and alignment with organizational goals should weigh heavily in the decision-making process.</p>
<p>Ultimately, the choice between commercial and open-source IAM solutions should be driven by factors beyond the core feature set, with organizations prioritizing flexibility, scalability, security, and long-term sustainability in their IAM strategy.</p>
<p><em>Read <a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2: Data Ownership</a> now.</em></p>
<p>Get in touch at <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">sales@phasetwo.io</a> to learn more.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
            <category>standards</category>
        </item>
        <item>
            <title><![CDATA[Why your startup should use Keycloak for SSO and User Management]]></title>
            <link>https://phasetwo.io/blog/keycloak-for-startups-overview/</link>
            <guid>https://phasetwo.io/blog/keycloak-for-startups-overview/</guid>
            <pubDate>Fri, 18 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Startups are striving for excellence in user experience and security, while simultaneously focusing on their core competencies. That means picking the best tools that expedite their time to market, with as few compromises as possible. Learn why Keycloak excels where commercial solutions fail.]]></description>
            <content:encoded><![CDATA[<p>In the ever-evolving landscape of Enterprise SaaS, navigating the complexities of identity and access management (IAM) can be a daunting task. As a startup striving for excellence in user experience and security, choosing the right IAM solution is paramount. Enter Keycloak, a powerful open-source IAM tool that not only meets but exceeds the demands of modern startups.</p>
<p>There are a glut of commercial startups that solve some of the core challenges of authentication and authorization. But most of them rely on obscuring their true nature as a <em>commodity</em> as a way of <em>marketing</em> their products as <em>somehow differentiated</em>.</p>
<p>The purpose of this series is to dive into the key issues that separate an open source solution like Keycloak from commercial entities like <a href="https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/">Auth0</a>, <a href="https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/">Okta</a>, or <a href="https://phasetwo.io/blog/keycloak-vs-workos-open-source-alternative/">WorkOs</a>. This should give a startup engineer or manager ample background to understand the decision, and to cut through the marketing gibberish.</p>
<p>This series will address the following key issues in 4 parts:</p>
<ol>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-standards/">Part 1</a>: Every commercial offering is an implementation of the same standards.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-data/">Part 2</a>: The ability to control your data is essential, now and in the future.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-customization/">Part 3</a>: Extensibility and customization will always be necessary.</li>
<li><a href="https://phasetwo.io/blog/keycloak-for-startups-cost/">Part 4</a>: There is no justification for variable cost for individual features.</li>
</ol>
<p>Please stay tuned as we release a new section each week! If you would like to try out Keycloak, <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">sign-up</a> for Phase Two's free tier and test it out now.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>startup</category>
        </item>
        <item>
            <title><![CDATA[Securing Keycloak with OIDC SPA and Phase Two]]></title>
            <link>https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/</link>
            <guid>https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/</guid>
            <pubDate>Thu, 10 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.]]></description>
            <content:encoded><![CDATA[<img src="https://phasetwo.io/blog/oidcspa-logo.svg" style="width:150px;box-shadow:none" alt="OIDC SPA Logo">
<p>Our pal over at <a href="https://www.keycloakify.dev/" target="_blank" rel="noopener noreferrer">Keycloakify</a> has been working on creating a simple OpenId Connect (OIDC) library called, <a href="https://www.oidc-spa.dev/" target="_blank" rel="noopener noreferrer">OIDC Spa</a>. As with <a href="https://github.com/garronej" target="_blank" rel="noopener noreferrer">Joseph</a>'s usual approach to user friendliness, OIDC SPA simplifies a lot of the integration work than can come with adding an Authentication and Authorization layer to your application. Follow along as we show you how to integrate OIDC SPA with a Phase Two's free Keycloak instance.</p>
<p>We're going to work through an example of how to add OIDC SPA to a React application. If you just want to skip to code, check out our <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs" target="_blank" rel="noopener noreferrer">React example</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-keycloak-instance">Setting up a Keycloak Instance<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-a-keycloak-instance" class="hash-link" aria-label="Direct link to Setting up a Keycloak Instance" title="Direct link to Setting up a Keycloak Instance">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you already have a functioning Keycloak instance, you can skip to the next section.</p></div></div>
<p>Rather than trying to set up a "from scratch" instance of Keycloak, we're going to short-circuit that process by leveraging a free <a href="https://phasetwo.io/" target="_blank" rel="noopener noreferrer">Phase Two Starter</a> instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases.</p>
<ul>
<li>
<p>Visit the sign-up <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">page</a>.</p>
</li>
<li>
<p>Enter an email, use a Github account, or use an existing Google account to register.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Register" src="https://phasetwo.io/assets/images/register-c45850867ce85096a398bb0dfab9df4d.png" width="3000" height="1763" class="img_ev3q"></p>
</li>
<li>
<p>Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Email Magic Link Register" src="https://phasetwo.io/assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png" width="3000" height="857" class="img_ev3q"></p>
</li>
<li>
<p>After creating an account, a <a href="https://www.youtube.com/watch?v=ZTFlc-3pG1M" target="_blank" rel="noopener noreferrer">realm</a> is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.</p>
</li>
<li>
<p>Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Create Shared Deployment" src="https://phasetwo.io/assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png" width="3000" height="1541" class="img_ev3q"></p>
</li>
<li>
<p>After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.</p>
<p><img decoding="async" loading="lazy" alt="Phase Two Open Console Keycloak Admin UI" src="https://phasetwo.io/assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png" width="3000" height="1311" class="img_ev3q"></p>
</li>
</ul>
<p>At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance.</p></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-an-oidc-client">Setting up an OIDC Client<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-an-oidc-client" class="hash-link" aria-label="Direct link to Setting up an OIDC Client" title="Direct link to Setting up an OIDC Client">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><p>We need to create a <a href="https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide" target="_blank" rel="noopener noreferrer">OpenID Connect</a> Client in Keycloak for the app to communicate with. Keycloak's <a href="https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients" target="_blank" rel="noopener noreferrer">docs</a> provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration.</p>
<ol>
<li>
<p>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</p>
</li>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Click <strong>Create client</strong>.</p>
</li>
<li>
<p>Leave <strong>Client type</strong> set to <strong>OpenID Connect</strong>.</p>
</li>
<li>
<p>Enter a <strong>Client ID</strong>. This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.</p>
</li>
<li>
<p>Supply a <strong>Name</strong> for the client.</p>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client General Settings" src="https://phasetwo.io/assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png" width="3000" height="2072" class="img_ev3q"></p>
</li>
<li>
<p>Under the Capability Config section, leave the defaults as selected. This can be configured further later.</p>
<ul>
<li>Client authentication to Off.</li>
<li>Authorization to Off.</li>
<li>Standard flow checked. Direct access grants checked. All other items unchecked.</li>
</ul>
</li>
<li>
<p>Click <strong>Next</strong>.</p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Capability Config " src="https://phasetwo.io/assets/images/capability-config-995c6bc68516bc541a9372f1bce7ad86.png" width="3000" height="2068" class="img_ev3q"></p>
</li>
<li>
<p>Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:</p>
<p><em>Valid redirect URI</em> (allows redirect back to application)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000/*</span><br></span></code></pre></div></div>
<p><em>Web origins</em> (allows for Token auth call)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">http://localhost:3000</span><br></span></code></pre></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>URI and Origin Details</summary><div><div class="collapsibleContent_i85q"><p>The choice of <code>localhost</code> is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that.</p></div></div></details>
</li>
<li>
<p>Click <strong>Save</strong></p>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Login Settings" src="https://phasetwo.io/assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png" width="3000" height="2074" class="img_ev3q"></p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="oidc-config">OIDC Config<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#oidc-config" class="hash-link" aria-label="Direct link to OIDC Config" title="Direct link to OIDC Config">​</a></h3>
<p>We will need values to configure our application. To get these values follow the instructions below.</p>
<ol>
<li>
<p>Click <strong>Clients</strong> in the menu.</p>
</li>
<li>
<p>Find the Client you just created and click on it. In the top right click the <strong>Action</strong> dropdown and select <strong>Download adapter config</strong>.</p>
</li>
<li>
<p>Select <strong>Keycloak OIDC JSON</strong> in the format option. The details section will populate with the details we will need.</p>
<ul>
<li>Note the <code>realm</code>, <code>auth-server-url</code>, and <code>resource</code> values.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Keycloak OIDC Create Client Adapter Config" src="https://phasetwo.io/assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png" width="3000" height="2081" class="img_ev3q"></p>
</li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-a-non-admin-user">Adding a Non-Admin User<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#adding-a-non-admin-user" class="hash-link" aria-label="Direct link to Adding a Non-Admin User" title="Direct link to Adding a Non-Admin User">​</a></h2>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Instructions</summary><div><div class="collapsibleContent_i85q"><div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>It is bad practice to use your Admin user to sign in to an Application.</p></div></div>
<p>Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user.</p>
<ol>
<li>Open the Admin UI by clicking <strong>Open Console</strong> in the Phase Two Dashboard.</li>
<li>Click <strong>Users</strong> in the menu.</li>
<li>Click <strong>Add user</strong>.</li>
<li>Fill out the information for Email, First name, and Last name. Click <strong>Create</strong>.</li>
<li>We will now set the password for this user manually. Click <strong>Credentials</strong> (tab) and click <strong>Set Password</strong>. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".</li>
<li>Click <strong>Save</strong> and confirm the password by clicking <strong>Save password</strong></li>
</ol></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-reactjs-project">Setting up a ReactJS Project<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#setting-up-a-reactjs-project" class="hash-link" aria-label="Direct link to Setting up a ReactJS Project" title="Direct link to Setting up a ReactJS Project">​</a></h2>
<p>As this is a more interactive project, we're going to walk through a bit more integration. We've got a very basic starter template which you can find <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter" target="_blank" rel="noopener noreferrer">here</a>. If you'd like to see more examples, check out the <a href="https://github.com/keycloakify/oidc-spa/tree/main/examples" target="_blank" rel="noopener noreferrer">oidc-spa repo</a></p>
<ol>
<li>Clone the <a href="https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter" target="_blank" rel="noopener noreferrer">starter repo</a> and install the OIDC SPA library:</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm install oidc-spa</span><br></span></code></pre></div></div>
<ol start="2">
<li>Add an OIDC Provider in <code>index.tsx</code>. We'll be using the params from the Keycloak instance we set up earlier (update <code>issuerUri</code> and <code>clientId</code> as needed):</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> createReactOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"oidc-spa/react"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token maybe-class-name">OidcProvider</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> useOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> getOidc </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">createReactOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// NOTE: If you don't have the params right away see note below.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  issuerUri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://app.phasetwo.io/auth/realms/p2examples"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  clientId</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reactjs-example"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/**</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * Vite:  `publicUrl: import.meta.env.BASE_URL`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * CRA:   `publicUrl: process.env.PUBLIC_URL`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   * Other: `publicUrl: "/"` (Usually)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">   */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  publicUrl</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">BASE_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre></div></div>
<p>Once that is added, we can render the App within the <code>OidcProvider</code>:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">createRoot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token dom variable" style="color:rgb(191, 199, 213)">document</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getElementById</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"root"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">render</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">OidcProvider</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">// Optional</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">fallback</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag script language-javascript plain-text" style="color:rgb(255, 85, 114)">Checking authentication ⌛️</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag script language-javascript tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">App</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">OidcProvider</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre></div></div>
<ol start="3">
<li>Use the <code>useOidc</code> hook to access the OIDC context from <code>index.tsx</code> in the <code>Auth.tsx</code> file. This will allow you to check if the user is logged in, log them in, log them out, and access the OIDC tokens:</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./index"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">Auth</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> login</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> logout</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> oidcTokens </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre></div></div>
<p>Looking at what comes back, we have a few main items:</p>
<ul>
<li><code>isUserLoggedIn</code> - A boolean value that tells you if the user is logged in.</li>
<li><code>login</code> - A function that will log the user in.</li>
<li><code>logout</code> - A function that will log the user out.</li>
<li><code>oidcTokens</code> - An object that contains the OIDC tokens. From this we can grab the <code>decodedIdToken</code> and to see information about the user. There are other tokens within this like <code>accessToken</code>, <code>refreshToken</code>, and <code>idToken</code>, which can be used for various purposes.</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>One of the nicest things that OIDC SPA does well is handling your token refresh for you. This is a common issue with OIDC libraries and OIDC SPA has a nice solution.</p></div></div>
<p>Let's move forward with building out this component and adding some logic to handle the user's authentication state. Some of the mark is purely for layout and styling, but the logic is what we're after:</p>
<ul>
<li><code>oidcTokens.decodedIdToken?.email as string</code> we type this as since the <code>decodedIdToken</code> isn't defined. If you want to pretype the <code>decodedIdToken</code> in the <code>createReactOidc</code> function, do so by providing a <code>decodedIdTokenSchema</code> key and optionally validate it with <a href="https://zod.dev/" target="_blank" rel="noopener noreferrer">zod</a>.</li>
</ul>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  content </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-2 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Authenticated</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-md</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">oidcTokens</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">decodedIdToken</span><span class="token operator" style="color:rgb(137, 221, 255)">?.</span><span class="token plain">email </span><span class="token keyword" style="font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">oidcTokens</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">decodedIdToken</span><span class="token operator" style="color:rgb(137, 221, 255)">?.</span><span class="token plain">sub </span><span class="token keyword" style="font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">rounded-md bg-indigo-500 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">logout</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> redirectTo</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"current page"</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        Log out</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Token</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  content </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">mb-6 text-p2blue-700 text-2xl</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Not authenticated.</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">login</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> doesCurrentHrefRequiresAuth</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript boolean" style="color:rgb(255, 88, 116)">true</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        Log in</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">button</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">text-xl pb-8 italic</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Your current status is:</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre></div></div>
<ol start="4">
<li>Run the application:</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm run start</span><br></span></code></pre></div></div>
<ol start="5">
<li>Test the login and logout functionality. You should see the user's email and sub displayed when logged in. If you're using the Keycloak instance we set up earlier, you can use the non-admin user we created.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bonus">Bonus<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#bonus" class="hash-link" aria-label="Direct link to Bonus" title="Direct link to Bonus">​</a></h3>
<p>A very common use case is security API calls. An example <code>api.ts</code> file below shows how you would intercept all requests and append the <code>accessToken</code> to the headers.</p>
<p>This example is provided with Axios by <a href="https://docs.oidc-spa.dev/documentation/web-api" target="_blank" rel="noopener noreferrer">Keycloakify</a>. We'll implement it in <code>fetch</code> as an alternative.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getOidc </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"oidc"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Api</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getTodos</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">addTodo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token keyword" style="font-style:italic">void</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> baseURL </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">import</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">meta</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">API_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">url</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> options</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">RequestInit</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> oidc </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getOidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">oidc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isUserLoggedIn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"We made a logic error: The user should be logged in at this point"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> headers </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token maybe-class-name">Authorization</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Bearer </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">oidc</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation function" style="color:rgb(130, 170, 255)">getTokens</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation">accessToken</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string-property property">"Content-Type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"application/json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetch</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">baseURL</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">url</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> headers </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">ok</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">HTTP error! status: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">response</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation">status</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">json</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> api</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Api</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getTodos</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/todo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">addTodo</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">fetchWithAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/todo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      method</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"POST"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      body</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">JSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">stringify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">todo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre></div></div>
<p>We aren't setting this actual backend up, but you can see how you would use the <code>api.ts</code> file to make authenticated requests.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://phasetwo.io/blog/keycloak-oidc-spa-phasetwo/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>This only covers the most very basic installation and usage of this library. There are a lot of different ways you leverage the tool and we invite you to investigate further. Some of which are:</p>
<ul>
<li>Auto Logout (due to inactivity)</li>
<li>Error Management (when login fails)</li>
<li>Globally enforced authentication (every route requires authentication)</li>
<li>Usage with routing libraries</li>
</ul>
<p>We'd love to hear how you're using OIDC SPA in your applications. If you have any questions or need help, feel free to reach out to us at <a href="https://phasetwo.io/contact/" target="_blank" rel="noopener noreferrer">Phase Two</a>. We're always happy to help.</p>
<p>Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our <a href="https://phasetwo.io/blog" target="_blank" rel="noopener noreferrer">blog</a> has many use cases from <a href="https://phasetwo.io/blog/customizing-login-pages" target="_blank" rel="noopener noreferrer">customizing login pages</a>, setting up <a href="https://phasetwo.io/blog/set-up-magic-links" target="_blank" rel="noopener noreferrer">magic links</a> (passwordless sign in), and <a href="https://phasetwo.io/product/organizations" target="_blank" rel="noopener noreferrer">Organization</a> workflows.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>authentication</category>
            <category>authorization</category>
            <category>keycloak</category>
            <category>oidc_spa</category>
            <category>keycloakify</category>
        </item>
        <item>
            <title><![CDATA[Phase Two and Keycloakify, Making Keycloak Better Together]]></title>
            <link>https://phasetwo.io/blog/phasetwo-keycloakify-partnership/</link>
            <guid>https://phasetwo.io/blog/phasetwo-keycloakify-partnership/</guid>
            <pubDate>Wed, 09 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Phase Two and Keycloakify deepen their relationship with sponsorship and adding our extension templates.]]></description>
            <content:encoded><![CDATA[<div id="illustrationId" style="position:relative"><img src="https://phasetwo.io/blog/keycloakify/keycloakify-logo-hero-moving-DW_SYkPC.png" alt="Rotating react logo" style="width:200px;box-shadow:none;animation:rotate 20s linear infinite"><img src="https://phasetwo.io/blog/keycloakify/keycloakify-logo-hero-still-NiNHhekl.png" alt="keyhole" style="width:200px;box-shadow:none;position:absolute;top:0;left:0"></div>
<p>Phase Two has long been big fans of <a href="https://www.keycloakify.dev/" target="_blank" rel="noopener noreferrer">Keycloakify</a>. The work being done by <a href="https://github.com/garronej" target="_blank" rel="noopener noreferrer">Joseph Garrone</a> is in our opinion some of the best user-focused work in the Keycloak community. Keycloakify brings the ability to theme the Keycloak frontend applications: Login, Account, Admin(coming) using modern toolsets like React or Angular and theming systems like Tailwind or Material-UI. Keycloakify allows you to build quickly and deploy themes to your Keycloak installation in a manner that the existing Keycloak toolset (ftl templates) does not.</p>
<p>Many of Phase Two customers use Keycloakify and because we value it as an important piece of the Keycloak community, Phase Two has officially entered into a sponsorship agreement with Keycloakify.</p>
<p>To make using our <a href="https://github.com/p2-inc#our-extensions-" target="_blank" rel="noopener noreferrer">extensions</a> easier with Keycloakify, we've started with porting our <a href="https://phasetwo.io/blog/set-up-magic-links/" target="_blank" rel="noopener noreferrer">Magic Link</a> <a href="https://github.com/p2-inc/keycloak-magic-link" target="_blank" rel="noopener noreferrer">extension</a> to Keycloakify templates. At present, those templates can be found in Phase Two's forked <a href="https://github.com/p2-inc/keycloakify-starter/tree/p2/magic-link-extension-templates/src/login/pages" target="_blank" rel="noopener noreferrer">Keycloakify Starter</a>. We are actively working on adding them to the main line of templates which can be customized directly from the Keycloakify CLI. Until that time, follow the <a href="https://docs.keycloakify.dev/styling-custom-extension-page" target="_blank" rel="noopener noreferrer">instructions</a> from Keycloakify to integrate those templates.</p>
<p>We've also joined the Keycloakify <a href="https://discord.gg/mJdYJSdcm4" target="_blank" rel="noopener noreferrer">Discord</a> for quick and direct communication.</p>
<p>Join us and the Keycloakify <a href="https://discord.gg/mJdYJSdcm4" target="_blank" rel="noopener noreferrer">community</a> to build themes and improve the experience of working with Keycloak.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>keycloak</category>
            <category>keycloak themes</category>
            <category>partnership</category>
            <category>keycloakify</category>
        </item>
        <item>
            <title><![CDATA[Presentation on Extending Keycloak for All Your Identity Use Cases]]></title>
            <link>https://phasetwo.io/blog/keycloak-extensions-presentation/</link>
            <guid>https://phasetwo.io/blog/keycloak-extensions-presentation/</guid>
            <pubDate>Fri, 27 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[A detailed introduction to building Keycloak extensions. This talk presents an overview of Keycloak’s commonly used extension mechanisms, best practices for development and testing of extensions, and several exemplary, real-world examples. Finally, it puts it all together with a deep-dive into one such extension that is available in the Phase Two keycloak-events extension.]]></description>
            <content:encoded><![CDATA[<p>We recently gave a talk at the <a href="https://keyconf.dev/" target="_blank" rel="noopener noreferrer">Keyconf24</a> conference in Vienna on how to extend Keycloak using its extensible SPI structure. In addition to showing what is possible and how to get started in building extensions, we also use our <a href="https://github.com/p2-inc/keycloak-events" target="_blank" rel="noopener noreferrer">Events and Webhooks</a> extension as a real-world example. The hosts of the conference have posted the <a href="https://www.youtube.com/watch?v=t8u-QO02Qn8?si=OH6V1w564UysihSu" target="_blank" rel="noopener noreferrer">video of the talk</a> on Youtube.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/t8u-QO02Qn8?si=OH6V1w564UysihSu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>
<p>Take a look, and try it out today with our <a href="https://dash.phasetwo.io/" target="_blank" rel="noopener noreferrer">free hosted Keycloak</a> instances that run all of our <a href="https://github.com/p2-inc" target="_blank" rel="noopener noreferrer">open source Keycloak extensions</a>.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>release</category>
            <category>keycloak</category>
            <category>phase_two</category>
            <category>extensions</category>
            <category>events</category>
            <category>webhooks</category>
        </item>
        <item>
            <title><![CDATA[Keycloak vs. FrontEgg, an Open-Source Alternative]]></title>
            <link>https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/</link>
            <guid>https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/</guid>
            <pubDate>Sat, 10 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[An in-depth comparison of Keycloak versus FrontEgg and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></description>
            <content:encoded><![CDATA[<p>Keycloak and Frontegg are two prominent solutions in the identity and access management (IAM) space, each serving distinct needs. Keycloak is an open-source IAM solution with over eight years of development, known for its scalability and deep customization options, allowing organizations full control over user identity management. On the other hand, Frontegg is a cloud-native platform designed for quick deployment and integration, specifically tailored for SaaS applications, offering a user-friendly management experience. In this blog post, we will compare Keycloak and Frontegg based on cost structure, deployment options, customization, scalability, functionality, and support.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cost-structure">Cost Structure<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#cost-structure" class="hash-link" aria-label="Direct link to Cost Structure" title="Direct link to Cost Structure">​</a></h3>
<p><strong>Keycloak</strong>
As an open-source solution, Keycloak is free to use, making it an attractive option for organizations of all sizes. While there are no licensing fees, organizations need to consider hosting costs and the resources required for system management. This cost model makes Keycloak particularly appealing for startups and enterprises that can manage their own infrastructure effectively.</p>
<p><strong>Frontegg</strong>
Frontegg operates on a subscription-based pricing model, starting with a free 30-day trial that unlocks all features. Following the trial, costs begin at $499 per month for the Growth Plan. While it simplifies IAM implementation and reduces developmental burden, organizations must weigh the recurring costs against the value gained from Frontegg's streamlined user management capabilities.<br>
<!-- -->Frontegg provides a nice “free forever” tier that gives you enough to play with the platform. You would not want to use this for a production application with serious user covenants. To move upward, it is based on features and requires sales contact to assess pricing. While the next tiers allow for “growth to unlimited users”, pricing is heavily dependent on that usage.</p>
<p><strong>Winner</strong></p>
<p>Keycloak stands out as a more economically advantageous option, particularly for organizations with the technical capability to manage their own infrastructure. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-options">Deployment Options<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#deployment-options" class="hash-link" aria-label="Direct link to Deployment Options" title="Direct link to Deployment Options">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak offers flexibility in deployment, supporting both on-premises and cloud-based solutions. This capability allows organizations to maintain control over their identity management infrastructure, making it suitable for varying operational requirements and compliance needs.</p>
<p><strong>Frontegg</strong>
Frontegg is primarily a cloud-based solution designed for rapid deployment, offering a plug-and-play experience that facilitates quick integration into existing applications. While it doesn’t provide robust on-premises capabilities, it excels in cloud environments, catering particularly well to SaaS platforms aiming for fast time-to-market.</p>
<p><strong>Winner</strong></p>
<p>Keycloak offers superior deployment flexibility, accommodating both complex cloud and on-premises infrastructures. Frontegg, however, excels in ease of use for cloud-based deployments.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-branding">Customization and Branding<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#customization-and-branding" class="hash-link" aria-label="Direct link to Customization and Branding" title="Direct link to Customization and Branding">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is renowned for its extensive customization options, enabling organizations to tailor authentication flows, user interfaces, and security protocols to meet their specific needs. Its open-source nature allows for modifications that avoid vendor lock-in, facilitating a user experience that matches organizational needs. While branding and theming Keycloak is possible, the current ability to do so is not straightforward. Phase Two has made this easier through extending the Keycloak Admin UI (<a href="https://phasetwo.io/docs/getting-started/customizing-ui/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/docs/getting-started/customizing-ui/</a>) which is available in all its <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">hosted</a> offerings.</p>
<p><strong>Frontegg</strong>
Frontegg also provides customization capabilities but focuses on delivering a user-friendly interface that prioritizes speed and accessibility. It allows basic branding and minor adjustments but may not match the depth of customization available in Keycloak. The branding tool built by Frontegg is well done and prioritizes the user experience.</p>
<p><strong>Winner</strong></p>
<p>Keycloak takes the lead in customization and flexibility, providing organizations more granular control over user interfaces and workflows. While Frontegg leads with providing the a strong user experience for branding customization.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak is designed for high scalability, accommodating large user bases through horizontal scaling and clustered deployments. This architecture makes it suitable for extensive enterprise environments that require robust performance under varying loads.</p>
<p><strong>Frontegg</strong>
Frontegg is also built with scalability in mind, catering to growing SaaS applications through its multi-tenant architecture. While it's designed to manage increasing user volumes effectively, its performance may not yet match Keycloak's capabilities in extremely large-scale environments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the preferred option for larger applications requiring robust scalability. However, Frontegg is well-suited for rapidly growing applications, especially in the SaaS space.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="functionality-and-flexibility">Functionality and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#functionality-and-flexibility" class="hash-link" aria-label="Direct link to Functionality and Flexibility" title="Direct link to Functionality and Flexibility">​</a></h3>
<p><strong>Keycloak</strong>:Keycloak<!-- --> provides a comprehensive suite of IAM features, including various authentication methods, fine-grained access control, and advanced identity federation capabilities. Its versatility in integrating with existing infrastructures makes Keycloak a powerful solution for complex IAM scenarios.</p>
<p><strong>Frontegg</strong>
Frontegg focuses on user management, facilitating seamless authentication and role management. Its end-to-end user management platform integrates easily with existing applications, offering a robust alternative for companies seeking quick implementation without extensive customization.</p>
<p><strong>Winner</strong></p>
<p>Keycloak leads in functionality and versatility, offering a broader range of advanced IAM features, making it a better choice for diverse security needs. Phase Two can provide <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">expert enterprise help</a>, custom development, and migrations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-capabilities">Integration Capabilities<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#integration-capabilities" class="hash-link" aria-label="Direct link to Integration Capabilities" title="Direct link to Integration Capabilities">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak’s extensive integration capabilities include support for various identity providers and protocols like SAML, OAuth 2.0, and OpenID Connect. This allows organizations to leverage existing systems while enabling seamless authentication across applications.</p>
<p><strong>Frontegg</strong>
Frontegg also supports a wide range of integrations but primarily focuses on simplifying connections for SaaS applications. Its plug-and-play approach makes it easy to incorporate into existing products but may lack the depth of integration options available in Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak emerges as the more versatile option, providing greater flexibility for organizations with complex integration requirements. Frontegg offers a great and easy interface to integrate with things they have support for.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="community-and-support">Community and Support<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#community-and-support" class="hash-link" aria-label="Direct link to Community and Support" title="Direct link to Community and Support">​</a></h3>
<p><strong>Keycloak</strong>
Keycloak benefits from a robust open-source community, with extensive documentation, forums, and active user contributions. Organizations can rely on community-driven support and resources to troubleshoot issues and share best practices.</p>
<p><strong>Frontegg</strong>
Frontegg provides dedicated customer support along with a library of resources. While still relatively new, it focuses on delivering good customer experiences and support for its users. Much of Frontegg’s Enterprise tier is focused on providing support.</p>
<p><strong>Winner</strong></p>
<p>Keycloak's established community offers a good way to get answers and help. Frontegg’s support channels are only available with the correct license. Phase Two helps to fill the gap between community help and Enterprise support (<a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">https://phasetwo.io/support/</a>).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-should-i-choose-iams">How Should I Choose IAMs?<a href="https://phasetwo.io/blog/keycloak-vs-frontegg-open-source-alternative/#how-should-i-choose-iams" class="hash-link" aria-label="Direct link to How Should I Choose IAMs?" title="Direct link to How Should I Choose IAMs?">​</a></h3>
<p>Choosing the right IAM solution depends on your organization's specific needs and strategic goals. Keycloak is ideal for those seeking a customizable, open-source platform with extensive features and deployment flexibility. Frontegg, with its focus on rapid implementation and simplicity for SaaS applications, is a compelling option for tech companies looking to reduce development time and overhead.</p>
<p>If you're looking to explore Keycloak further or have questions about <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">integrating</a> it into your organization, please <a href="mailto:sales@phasetwo.io" target="_blank" rel="noopener noreferrer">reach out for assistance</a>. The right IAM solution can help you secure your digital environment and streamline user management effectively.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>authentication</category>
            <category>authorization</category>
            <category>frontegg</category>
            <category>keycloak</category>
        </item>
        <item>
            <title><![CDATA[Keycloak vs. PingIdentity, an Open-Source Alternative]]></title>
            <link>https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/</link>
            <guid>https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/</guid>
            <pubDate>Mon, 05 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[An in-depth comparison of Keycloak versus PingIdentity and why Keycloak is a strong alternative to a paid Authentication and Authorization service.]]></description>
            <content:encoded><![CDATA[<p>Exploring Keycloak as an alternative to PingIdentity for Authentication Solutions</p>
<p>In the evolving landscape of identity and access management (IAM), organizations face critical decisions regarding the tools that will best meet their needs. Keycloak and <a href="https://www.pingidentity.com/" target="_blank" rel="noopener noreferrer">Ping Identity</a> are two noteworthy solutions, each exhibiting unique features that cater to different organizational requirements. This blog provides a detailed comparison of open-source Keycloak and the commercial offering of Ping Identity across essential aspects of IAM solutions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-model">Deployment Model<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#deployment-model" class="hash-link" aria-label="Direct link to Deployment Model" title="Direct link to Deployment Model">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is an open-source IAM solution that can be deployed both <a href="https://phasetwo.io/product/onprem/" target="_blank" rel="noopener noreferrer">on-prem</a> and in cloud environments. This flexibility allows organizations to choose their preferred hosting option while maintaining control over their identity management infrastructure. Its ability to adapt quickly to new standards makes it particularly suitable for agile development environments.</p>
<p><strong>PingIdentity:</strong>
Ping Identity offers a hybrid deployment model that combines both cloud-based and on-premises options. This versatility is particularly beneficial for large enterprises where regulatory compliance dictates specific control over identity services.</p>
<p><strong>Winner</strong></p>
<p>Tie. Both solutions offer strong options for those seeking to deploy the way they want to and need to. Both provide enterprise-centric hybrid options that accommodate complex infrastructure needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customization-and-flexibility">Customization and Flexibility<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#customization-and-flexibility" class="hash-link" aria-label="Direct link to Customization and Flexibility" title="Direct link to Customization and Flexibility">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak shines with its extensive customization features, allowing developers to modify everything from login pages to role-based access controls. Being open-source software, organizations have the freedom to make adjustments at any time without vendor lock-in, making it a powerful and cost-effective solution. It can be used as a standalone solution or integrated as an element of a broader IT infrastructure.</p>
<p><strong>PingIdentity:</strong>
Ping Identity also offers customization capabilities but often demands more technical effort to implement tailored solutions. While it is configurable, achieving significant customizations may be more challenging compared to Keycloak.</p>
<p><strong>Winner</strong></p>
<p>Keycloak wins for its superior flexibility and ease of customization, particularly appealing to developers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-ease-of-use">User Experience and Ease of Use<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#user-experience-and-ease-of-use" class="hash-link" aria-label="Direct link to User Experience and Ease of Use" title="Direct link to User Experience and Ease of Use">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak is designed with usability in mind, featuring an intuitive interface and straightforward setup process. Its fast, agile nature allows it to adapt quickly to changing application landscapes, ensuring accessibility for users. It supports Single Sign-On (SSO), identity brokering, and various protocols (OAuth2, OpenID Connect, SAML), streamlining user experience.</p>
<p><strong>PingIdentity:</strong>
Ping Identity prioritizes a comprehensive user experience targeting both technical and non-technical users. Although it features a polished interface, the initial setup can be complex, resulting in a steeper learning curve for administrators.</p>
<p><strong>Winner</strong></p>
<p>Keycloak edges out in user-friendliness during initial setup and usability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalability-and-performance">Scalability and Performance<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#scalability-and-performance" class="hash-link" aria-label="Direct link to Scalability and Performance" title="Direct link to Scalability and Performance">​</a></h3>
<p><strong>Keycloak:</strong>
With its cloud-native adaptation and support for high-volume user bases, Keycloak scales effectively to meet organizational needs. However, the management of a scaled Keycloak system can require significant time and resources without <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">proper enterprise support</a>.</p>
<p><strong>PingIdentity:</strong>
Ping Identity is designed for large-scale environments with robust scalability features, ensuring seamless performance under heavy loads, making it particularly suited for large organizations.</p>
<p><strong>Winner</strong></p>
<p>Ping Identity excels in scalability and performance, proving its capability to manage large-scale authentication requests. However, this comes at a larger cost which could be offset by taking on the management of Keycloak.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pricing-model">Pricing Model<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#pricing-model" class="hash-link" aria-label="Direct link to Pricing Model" title="Direct link to Pricing Model">​</a></h3>
<p><strong>Keycloak:</strong>
Being open-source software, Keycloak has no licensing fees, making it highly cost-effective. However, organizations should consider potential indirect costs related to deployment and system management.</p>
<p><strong>PingIdentity:</strong>
Ping Identity operates on a traditional licensing model based on user count and features, which can lead to higher costs, particularly for larger deployments.</p>
<p><strong>Winner</strong></p>
<p>Keycloak is the clear winner for pricing, offering a more budget-friendly option. Coupled with a cost-conscious hosting provider, this can save a corporation literal millions of dollars over the course of an implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-ecosystem">Integration Ecosystem<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#integration-ecosystem" class="hash-link" aria-label="Direct link to Integration Ecosystem" title="Direct link to Integration Ecosystem">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak provides a strong API and powerful Admin portal, making it compatible with a wide range of frameworks like Spring Boot, Django, React, and more. Its supportive community extensions with integrations and continuous improvements, enhancing its adaptability.</p>
<p><strong>PingIdentity:</strong>
Ping Identity features a curated integration ecosystem focused on enterprise-level applications, providing documentation and support for integrations, but may lack the range of community-driven options available with Keycloak.</p>
<p><strong>Winner</strong>
Keycloak takes the lead for its extensive integration options and supportive community. Leverage <a href="https://phasetwo.io/hosting/" target="_blank" rel="noopener noreferrer">Phase Two's Free Hosting Tier</a> to test and integrate Authorization and Authentication into an application(s).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="advanced-features">Advanced Features<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#advanced-features" class="hash-link" aria-label="Direct link to Advanced Features" title="Direct link to Advanced Features">​</a></h3>
<p><strong>Keycloak:</strong>
Keycloak supports fine-grained authorization and customizable themes, making it a flexible and cost-effective solution for diverse security needs. Its rapid adaptability to new technologies ensures organizations can stay relevant in a changing landscape.</p>
<p><strong>PingIdentity:</strong>
Ping Identity excels with advanced features such as fraud detection, identity verification, and robust orchestration capabilities, positioning it as a strong choice for larger enterprises requiring comprehensive security and compliance.</p>
<p><strong>Winner</strong>
Both Keycloak and Ping Identity offer valuable advanced features, with Keycloak providing flexibility for diverse environments, while Ping Identity delivers robust security measures suitable for complex enterprise needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="which-one-is-best-for-me">Which one is best for me?<a href="https://phasetwo.io/blog/keycloak-vs-PingIdentity-open-source-alternative/#which-one-is-best-for-me" class="hash-link" aria-label="Direct link to Which one is best for me?" title="Direct link to Which one is best for me?">​</a></h3>
<p>Both Keycloak and Ping Identity provide essential IAM solutions, but their strengths cater to different organizational needs. Keycloak excels in customization, user experience, cost-effectiveness, and flexibility, making it ideal for organizations prioritizing quick adaptation and flexibility. In contrast, Ping Identity stands out with its hybrid deployment capabilities, scalability, and advanced security functionalities, positioning it as a strong choice for larger enterprises. Ultimately, the decision should align with the specific requirements, resources, and strategic goals of your organization.</p>
<p>If you’re looking to <a href="https://phasetwo.io/support/migrate-to-keycloak/" target="_blank" rel="noopener noreferrer">migrate to Keycloak</a>, or have questions about Phase Two’s <a href="https://phasetwo.io/support/" target="_blank" rel="noopener noreferrer">enterprise support</a>, please <a href="https://scheduler.zoom.us/phasetwo" target="_blank" rel="noopener noreferrer">contact us</a>.</p>]]></content:encoded>
            <author>support@phasetwo.io (Phase Two)</author>
            <category>phase_two</category>
            <category>open_source</category>
            <category>authentication</category>
            <category>authorization</category>
            <category>pingidentity</category>
            <category>keycloak</category>
        </item>
    </channel>
</rss>