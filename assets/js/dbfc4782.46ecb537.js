"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[1130],{91895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"introduction-to-simple-saml","metadata":{"permalink":"/blog/introduction-to-simple-saml","source":"@site/blog/2025-04-10-saml-introduction.mdx","title":"SAML, Simplified.","description":"SAML has a bit of a reputation. For many developers, it lives in that shadowy corner of the B2B internet where XML still rules and stack traces seem to go on forever. If you\'ve ever had the misfortune of debugging a malformed ``, you know the pain. But here\'s the thing: it doesn\'t have to be a nightmare.","date":"2025-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"saml","permalink":"/blog/tags/saml"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"}],"readingTime":6.715,"hasTruncateMarker":false,"authors":[{"name":"Phase Two","key":null,"page":null}],"frontMatter":{"title":"SAML, Simplified.","slug":"introduction-to-simple-saml","date":"2025-04-10T00:00:00.000Z","author":"Phase Two","tags":["phase_two","open_source","saml","authentication"]},"unlisted":false,"nextItem":{"title":"Keycloak SAML Identity Provider Idp-initiated flow with Okta","permalink":"/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta"}},"content":"SAML has a bit of a reputation. For many developers, it lives in that shadowy corner of the B2B internet where XML still rules and stack traces seem to go on forever. If you\'ve ever had the misfortune of debugging a malformed `<Assertion>`, you know the pain. But here\'s the thing: it doesn\'t have to be a nightmare.\\n\\nAt Phase Two, we provide managed hosting and developer support for Keycloak, the leading open-source Identity and Access Management platform. And while OIDC has become the default for most modern applications, SAML is still alive and well\u2014especially in enterprise environments.\\n\\nThis post is a gentle (and opinionated) introduction to what SAML is, how it works, and why it still matters\u2014particularly if you\'re implementing SAML SSO in Keycloak.\\n\\n### What even is SAML?\\n\\nSAML \u2014 short for Security Assertion Markup Language \u2014 is a standardized XML-based protocol used to exchange authentication and authorization data between parties, most commonly between an Identity Provider (IdP) and a Service Provider (SP).\\n\\nThe core idea? Let users log in once (with the IdP) and then access multiple systems (the SPs) without re-authenticating. That\'s Single Sign-On (SSO), and it\'s where SAML shines.\\n\\nTo make this concrete, imagine you\'re using Google Workspace to access your company\'s internal tools. You open up a tool like Jira (that\'s the Service Provider \u2014 it provides the service you want to use). But instead of logging in directly, you\'re redirected to Google to sign in \u2014 that\'s your Identity Provider. Google verifies who you are, then sends a message back to Jira saying, \u201cYes, this is the correct user, and here\'s some information about them.\u201d The service (Jira) trusts that identity because it already trusts Google. In simple terms: the IdP is who you log in with, the SP is what you\'re trying to access.\\n\\n### Keycloak and SAML\\n\\nKeycloak supports both sides of the SAML flow. It can act as:\\n\\n- A **SAML Identity Provider**, enabling users to authenticate in Keycloak and then access SAML-based applications.\\n- A **SAML Service Provider**, allowing external IdPs (like Okta, Azure AD, or even legacy ADFS systems) to federate users into Keycloak-managed apps.\\n\\nThat flexibility is one of Keycloak\'s greatest strengths \u2014 and also where things can get a bit complex.\\n\\n### The SAML Triad: User, SP, IdP\\n\\nLet\'s simplify things. In a typical Keycloak-based SAML setup, you\'re dealing with three entities:\\n\\n1. The **User**: someone trying to log in.\\n2. The **Service Provider (SP)**: your application.\\n3. The **Identity Provider (IdP)**: Keycloak or another IdP.\\n\\nWhen Keycloak is the IdP, it authenticates the user and issues a SAML response back to the SP. When Keycloak is the SP, it receives the SAML response and handles session creation internally.\\n\\n### What does a SAML flow look like in Keycloak?\\n\\nLet\'s say Keycloak is acting as the **SAML Service Provider**. Here\'s the basic flow:\\n\\n1. A user tries to access your app.\\n2. The app redirects the user to Keycloak (the SP).\\n3. Keycloak identifies that the user should log in via SAML (based on their realm or identity provider configuration).\\n4. Keycloak sends a SAML AuthnRequest to the external IdP (e.g., Okta).\\n5. The IdP authenticates the user and sends a signed SAML Response back to Keycloak.\\n6. Keycloak parses the assertion, validates the signature, and creates a user session.\\n\\nFrom there, the user gets access to the protected application\u2014without having logged in directly with your app or even with Keycloak.\\n\\n### SAML messages: what you\'re actually passing around\\n\\nIn SAML, two XML messages do most of the heavy lifting:\\n\\n- **AuthnRequest** (from SP \u2192 IdP): \\"Hey, can you authenticate this user for me?\\"\\n- **Response** (from IdP \u2192 SP): \\"Yes, here\'s proof that I authenticated them.\\"\\n\\nThe Response contains one or more Assertions, which are signed blobs of XML confirming that the user is who they say they are. It might look like gibberish to humans, but to systems like Keycloak, it\'s gold.\\n\\nAnd yes, validating those signatures is as fussy as it sounds. But Keycloak handles most of that for you \u2014 so long as your trust relationships are properly configured.\\n\\n#### The SAML Request\\n\\nBefore a user is authenticated, Keycloak (acting as the Service Provider) initiates the SAML flow by sending a SAML AuthnRequest to the configured Identity Provider. This request is typically passed via a browser redirect and contains metadata about who\'s asking for authentication and when.\\n\\nLet\'s look at an example SAML Request\\n\\n```xml\\n<AuthnRequest xmlns=\\"urn:oasis:names:tc:SAML:2.0:protocol\\" ID=\\"saml_req_42kpl9zyx0qndmlwv5a6t93ne\\" Version=\\"2.0\\" IssueInstant=\\"2025-04-04T15:00:00Z\\">\\n    <Issuer xmlns=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">\\n        https://auth.phasetwo.io/auth/realms/my-tenant/broker/saml-client/endpoint\\n    </Issuer>\\n</AuthnRequest>\\n```\\n\\nThe Issuer tells the IdP who is requesting authentication. The ID is used to match the incoming response back to this request.\\n\\n#### The SAML Response\\n\\nWhen your Keycloak instance is acting as a SAML Service Provider, it will receive a SAML Response from the Identity Provider (IdP) after a user successfully authenticates. This response contains critical information like who the user is, how they authenticated, and whether the response is trusted.\\n\\nLet\'s look at an example SAML Response and break down the pieces:\\n\\n```xml\\n<Response IssueInstant=\\"2025-04-04T12:00:00Z\\" Version=\\"2.0\\" ID=\\"_abc12345-6789-4def-90ab-abcdef123456\\" xmlns=\\"urn:oasis:names:tc:SAML:2.0:protocol\\" xmlns:saml=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">\\n    <saml:Issuer>https://idp.example.org</saml:Issuer>\\n    <ds:Signature xmlns:ds=\\"http://www.w3.org/2000/09/xmldsig#\\">\\n        <ds:SignedInfo>\\n            <ds:CanonicalizationMethod Algorithm=\\"http://www.w3.org/2001/10/xml-exc-c14n#\\"/>\\n            <ds:SignatureMethod Algorithm=\\"http://www.w3.org/2000/09/xmldsig#rsa-sha256\\"/>\\n            <ds:Reference URI=\\"#_abc12345-6789-4def-90ab-abcdef123456\\">\\n                <ds:Transforms>\\n                    <ds:Transform Algorithm=\\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\\"/>\\n                    <ds:Transform Algorithm=\\"http://www.w3.org/2001/10/xml-exc-c14n#\\">\\n                        <InclusiveNamespaces PrefixList=\\"saml ds xs xsi\\" xmlns=\\"http://www.w3.org/2001/10/xml-exc-c14n#\\"/>\\n                    </ds:Transform>\\n                </ds:Transforms>\\n                <ds:DigestMethod Algorithm=\\"http://www.w3.org/2000/09/xmldsig#sha256\\"/>\\n                <ds:DigestValue>XYZ123abc4567890=</ds:DigestValue>\\n            </ds:Reference>\\n        </ds:SignedInfo>\\n        <ds:SignatureValue>\\n            MIIEogIBAAKCAQEA2vGfZPjld7vFq3sGpKUqLbHu0XzX7r8VcU38D1bAgm...\\n        </ds:SignatureValue>\\n        <ds:KeyInfo>\\n            <ds:X509Data>\\n                <ds:X509Certificate>\\n                    MIIC+zCCAeOgAwIBAgIJAKN+FfK01MywMA0GCSqGSIb3DQEBCwUAMBoxGDAW\\n                    BgNVBAMTD2lkcC5leGFtcGxlLm9yZzAeFw0yNTA0MDEwMDAwMDBaFw0yNjA0MDEw\\n                    MDAwMDBaMBoxGDAWBgNVBAMTD2lkcC5leGFtcGxlLm9yZzCBnzANBgkqhkiG9w0B\\n                    AQEFAAOBjQAwgYkCgYEAzRPl2OslkTfI4E4zVFYoxwHavwJ3uPDbGb8y03wvNVYl\\n                    cCy+YBk6yXfiOlNwYQwcz92XJgYBj6+9oA+2bkfy3hDR9QO5Prcb2XtU6cKkB3vC\\n                    Z2IUXgsyF7ibOa9hRLo3A7N8Y3RhPG64Q9OcEv0bPPOb/NcAV+UBrQ9rEwUCAwEA\\n                    AaNQME4wHQYDVR0OBBYEFH8GhkeIDx4MKZFOZkYI2gfnSkQOMB8GA1UdIwQYMBaA\\n                    FH8GhkeIDx4MKZFOZkYI2gfnSkQOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL\\n                    BQADgYEAFM6CvlquE7ZzpFLiJbR4TG0OCpgG4S2kgNR4+a6+6Zsd+wNoUNdPVFcU\\n                    Y4xLf3pJStIjMNxtQPC8j6WxZ9Hk8M+jfqU1mKPgM4zk9C2FJ9GVz9NNVrphTAjO\\n                    O6eFcX7zBhf8U4WshjWfHg==\\n                </ds:X509Certificate>\\n            </ds:X509Data>\\n        </ds:KeyInfo>\\n    </ds:Signature>\\n    <Status>\\n        <StatusCode Value=\\"urn:oasis:names:tc:SAML:2.0:status:Success\\"/>\\n    </Status>\\n    <Assertion ID=\\"_def45678-90ab-4abc-a1b2-cdef56789012\\" IssueInstant=\\"2025-04-04T12:00:00Z\\" Version=\\"2.0\\" xmlns=\\"urn:oasis:names:tc:SAML:2.0:assertion\\">\\n        <Issuer>https://idp.example.org</Issuer>\\n        <Subject>\\n            <NameID Format=\\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\">\\n                hello@phasetwo.io\\n            </NameID>\\n            <SubjectConfirmation Method=\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\"/>\\n        </Subject>\\n        <Conditions NotBefore=\\"2025-04-04T12:00:00Z\\" NotOnOrAfter=\\"2025-04-04T12:05:00Z\\">\\n            <AudienceRestriction>\\n                <Audience>https://sp.myapp.com</Audience>\\n            </AudienceRestriction>\\n        </Conditions>\\n        <AuthnStatement AuthnInstant=\\"2025-04-04T11:59:59Z\\">\\n            <AuthnContext>\\n                <AuthnContextClassRef>\\n                    urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\\n                </AuthnContextClassRef>\\n            </AuthnContext>\\n        </AuthnStatement>\\n    </Assertion>\\n</Response>\\n```\\n\\n- The `<Assertion>` is where claims about the user are made\u2014like their email or login timestamp.\\n- The `<Signature>` helps ensure this data hasn\'t been tampered with.\\n- The `<Audience>` defines who this message is meant for\u2014your SP.\\n\\nKeycloak does the heavy lifting of verifying signatures, extracting claims, and creating a session. But understanding the anatomy of a SAML Response helps when troubleshooting or configuring trust relationships.\\n\\n### Trust is everything\\n\\nFor SAML to work securely, the SP and IdP must have a pre-configured trust relationship. That means each side has the other\'s metadata (usually containing certificates, endpoints, and supported bindings) and knows how to verify signatures.\\n\\nIn Keycloak, setting up a SAML identity provider (or service provider) involves uploading or referencing that metadata and tweaking a few settings. Once configured, Keycloak will:\\n\\n- Automatically validate incoming assertions\\n- Map attributes from the assertion into user claims\\n- Create or update user accounts based on SAML attributes\\n- Apply realm-wide policies like required roles or groups\\n\\n### But...why use SAML in 2025?\\n\\nSAML isn\'t new, sleek, or trendy. But it\'s everywhere in large enterprises, government systems, and educational institutions. If you want to work with those organizations\u2014or provide identity federation across organizational boundaries\u2014you\'ll need to speak SAML.\\n\\nEven if your app is all-in on OIDC, SAML bridges can help you bring legacy systems into a modern identity framework. That\'s where Keycloak really shines: it lets you federate multiple identity providers (SAML, OIDC, LDAP, etc.) into a consistent, centralized user management plane.\\n\\n### Why let keycloak handle SAML?\\n\\nHere\'s the kicker: you don\'t want to write your own SAML implementation. Parsing, validating, and verifying SAML messages is error-prone and fraught with subtle security pitfalls. With Keycloak (and managed services like Phase Two), you don\'t have to.\\n\\nKeycloak abstracts away the complexity. And at Phase Two, we abstract away the operational burden of hosting and securing Keycloak itself. We provide:\\n\\n- Production-grade Keycloak hosting\\n- Built-in SAML and OIDC support\\n- Multi-tenant federation capabilities\\n- Automated updates and backups\\n- Support from experts who live and breathe auth\\n\\nTL;DR\\n\\n- SAML is a complex but powerful standard for SSO.\\n- Keycloak provides full support for SAML, both as an IdP and SP.\\n- Use SAML when you need to integrate with enterprise IdPs or legacy systems.\\n- Don\'t roll your own \u2014 let Keycloak (and Phase Two) handle it.\\n\\nNeed help configuring SAML in Keycloak? Schedule a consultation today or get in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io)"},{"id":"keycloak-saml-identity-provider-idp-initiated-flow-with-okta","metadata":{"permalink":"/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta","source":"@site/blog/2025-02-25-saml-idp-initiated-flow.mdx","title":"Keycloak SAML Identity Provider Idp-initiated flow with Okta","description":"If you just want to skip to the code, visit the Phase Two IdP-initiated example.","date":"2025-02-25T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"okta","permalink":"/blog/tags/okta"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"},{"inline":true,"label":"idp-initiated","permalink":"/blog/tags/idp-initiated"}],"readingTime":6.66,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","key":null,"page":null}],"frontMatter":{"title":"Keycloak SAML Identity Provider Idp-initiated flow with Okta","slug":"keycloak-saml-identity-provider-idp-initiated-flow-with-okta","date":"2025-02-25T00:00:00.000Z","author":"Phase Two","tags":["phase_two","open_source","okta","authentication","authorization","keycloak","sso","idp-initiated"]},"unlisted":false,"prevItem":{"title":"SAML, Simplified.","permalink":"/blog/introduction-to-simple-saml"},"nextItem":{"title":"Managed Keycloak Hosting - Picking a Provider","permalink":"/blog/managed-keycloak-hosting"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\n\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [IdP-initiated example](https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated).\\n\\n:::\\n\\n### IdP Initiated Flow\\n\\nWhen implementing SAML for the establishment of an Identity Provider, two primary options are available: Service Provider (SP) initiated and Identity Provider (IdP) initiated flows. The SP initiated flow is widely recognized by users due to its straightforward configuration, which is merely the exchange of some metadata. In contrast, the IdP-initiated flow is less intuitive and involves an additional step that may not be readily apparent to many users. The purpose of this blog is to elucidate the steps necessary to successfully execute the IdP-initiated flow.\\n\\nA fundamental understanding of [SAML 2.0](https://en.wikipedia.org/wiki/SAML_2.0) and [Keycloak](https://www.keycloak.org/) is required to effectively follow the provided instructions.\\n\\n### Components\\n\\nThe components involved in this flow are as follows:\\n\\n**Identity Provider:**\\nAny identity provider(IdP) that supports SAML 2.0 may be selected. The process begins by accessing the Identity Provider dashboard, where the user is prompted to authenticate. Upon successful authentication, the user may then request a service.\\n\\n**Keycloak SAML 2.0 Identity Provider:**\\nThe Keycloak Identity Provider will be used for identity brokering and will process the SAML Response received from the Identity Provider. It is responsible for operations such as provisioning, signature verification, decryption etc.\\n\\n**Keycloak Realm Client:**\\nThe Keycloak SAML client function is to maintain the authenticated user session within Keycloak. Another function of this generic client is to forward the authenticated user to the Service Provider.\\n\\n**Service Provider:**\\nThe Service Provider refers to the application that the user seeks to access. Once the user has been authenticated in Keycloak, a new SAML Response is generated by the realm client and subsequently consumed by the Service Provider.\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n### Okta setup example\\n\\nTo facilitate a smoother setup process, we will provide a complete example. The setup will utilize Okta as the identity provider:\\n\\n**Okta:**\\n\\nLogin in your Okta tenant and configure a new application.\\n\\n![Okta Application Start](/blog/saml/idp-init/okta-application-start.png)\\n\\nYou will need to specify two things:\\n\\n`Single sign-on URL`: http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client \\\\\\n`Audience URI`: http://localhost:8080/realms/test-realm\\n\\n![Okta Application Setup](/blog/saml/idp-init/okta-application-setup.png)\\n\\nThe identity provider `redirect url` differs from what we typically observe in Identity Provider from the Keycloak console. Based on the documentation for [IdP Initiated Login](https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login), the path `{brokerRedirectUrl}/clients/okta-client` indicates the `client-id` that is intended to maintain the service-provider application session. This will make more sense in the following steps.\\n\\n**SAML 2.0 Identity provider:**\\n\\nThe SAML identity provider (e.g: `okta-broker`) from the example above can be created by importing the `metadata.xml` from the application you just created in Okta. For this example we need the alias: `okta-broker`.\\n\\n![Identity Provider Setup](/blog/saml/idp-init/identity-provider-setup.png)\\n\\n#### **Service Provider Application**\\n\\nFor this we created a simple SpringBoot app which has a `ACS` endpoint: `/login/saml2/sso` and a `entityId`: `/saml2/metadata` . We have an example [application](https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated) that can be used.\\n\\n**Keycloak Realm Client**\\n\\nWe need to create new SAML 2.0 client in `test-realm`. This can be done by importing the metadata from the Service Provider application. To check if the data was successfully imported in the `Advance` check the Assertion Consumer Service POST Binding URL, should contain the endpoint mentioned above.\\n\\n![Generic client advance](/blog/saml/idp-init/generic-client-advance.png)\\n\\nNow we need to return to the documentation: [IdP Initiated Login](https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login). In order to configure the IdP-initiated flow, a special field needs to be specified `IdP-Initiated SSO URL`. \\\\\\nIdP-Initiated SSO URL name: `okta-client`\\n\\n![Generic client](/blog/saml/idp-init/generic-client.png)\\n\\nThe field is part of the `{brokerRedirectUrl}/clients/okta-client` url. As we can see the value is different from that of the `clientId` of the client we just created.\\n\\n#### **Testing**\\n\\nTo test this, please visit the Okta end user dashboard and select the application we created in the first step.\\n\\n![Okta flow start](/blog/saml/idp-init/okta-init-flow.png)\\n\\nFor debugging purposes, you might consider using the [SAML Tracer](https://support.okta.com/help/s/article/How-to-troubleshoot-with-SAML-Tracer?language=en_US)) browser extension. If you take a moment to check the requests from the flow, you\'ll notice that it contains only SAMLResponse messages. This is a specific characteristic of the IdP-initiated flow.\\n\\n![Okta SAML response](/blog/saml/idp-init/okta-saml-response.png) ![Client SAML response](/blog/saml/idp-init/client-saml-response.png)\\n\\n### What just happened?\\n\\nWe have successfully secured a web application using the SAML protocol and IdP-initiated flow with Okta. Great work!\\n\\nIt is important to consider that the IdP-initiated flow does present certain security concerns, such as the potential for replay attacks, spoofing, or data tampering. To ensure we uphold security, it is essential that we take all necessary precautions, including implementing assertion encryption to protect sensitive data, utilizing signing to mitigate the risk of data tampering, and proper configuration for issuer validation.\\n\\nHowever, it is worth noting that there is still a risk that a SAML assertion could be compromised, allowing an attacker to gain access to the service provider as the affected user. While the service provider can recognize and validate the assertion because it was issued by the expected issuer and signed with the correct key, it cannot confirm whether a malicious party was involved in sending it. Given these concerns about the IdP-initiated flow and its vulnerability to certain security threats, there may be circumstances in which we find it necessary to implement it based on our specific context.\\n\\n\\n### IdP-initiated flow redirects to a OIDC application \\n\\nIn the example above we configured the IdP-initiated flow to act as a identity broker and redirect to a client application which consumes SAML. Another interesting use case involves redirecting a user authenticated in the Keycloak realm to an OIDC client application. \\n\\nAlthough this setup may not function seamlessly out of the box, an illustrative example can be found here: [IdP Initiated Login with Keycloak](https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak).\\n\\nI will also attempt to create a local setup for this use case. To do this we will follow the exact same steps from the [section](#okta-setup-example) above, until we reach the step [Service Provider Application](#service-provider-application).\\n\\n**Service Provider Application**\\n\\nIn this case the service provider application will \'talk\' OIDC. As a simple example we can use the realm `security-admin-console` as the final client since it uses OIDC. A important thing to keep in mind is that for the client we will need to set a `Home URL`. In our case is the realm provisioned `http://localhost:8080/admin/test-realm/console/`.\\n\\n[Security-admin-console-client](/blog/saml/idp-init/security-admin-console-client.png)\\n\\n**Keycloak Realm Client**\\n\\nWe need to create new SAML 2.0 client in `test-realm`. Same as the configuration above we will set IdP-Initiated SSO URL name: `okta-client`\\n\\n![Generic client](/blog/saml/idp-init/generic-client.png)\\n\\nNow comes the interesting part. Since the SAML client we created will initialize the user session in Keycloak, we will need a mechanism to attach this session to an OIDC client. We can accomplish this with a simple redirect to the OIDC application. For that, we may consider using the `SAML Redirect Binding`, which uses a `GET` request instead of a `POST` to forward the SAML assertion. \\nWe can associate our client application `Home URL` with this configuration.\\n\\n![Client redirect binding](/blog/saml/idp-init/saml-client-redirect-binding.png)\\n\\nDo not forget to turn of the `Force POST binding` toggle in the SAML client general settings.\\n\\nAfter doing all these configs we can proceed with the [Testing](#testing) phase. What we are going to observe is that Keycloak created a twin session in the  `security-admin-console` client for our user.\\n\\n![Twin session oidc client](/blog/saml/idp-init/twin-session-oidc-client.png)\\n\\nBehind this configuration stands one magic piece which ensure the flow is going to work, the \'Cookie\' authenticator. It ensures that the session for any `client` we request is first lookup in the Keycloak cookie. If the Authenticator is turned of the flow will no longer work. My advice is not to really on this configuration if your application will not allow Keycloak cookies. \\n\\n### Conclusion\\n\\nIn this post, we explored the setup of an IdP-initiated flow with support for both SAML and OIDC applications. We also discussed some of the challenges associated with using the IdP-initiated flow and ways to address them. \\n\\nI hope this has shed some light on the intricate world of Keycloak configuration and assisted you in finding a solution to your problems. Cheers!\\n\\n### References\\n\\n- [Keycloak with Okta IdP Initiated Login](https://www.lisenet.com/2020/keycloak-with-okta-idp-initiated-sso-login/)\\n- [IdP Initiated Login with Keycloak](https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak)\\n- [Server Administration Guide](https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login)\\n- [IdP Initiated Login](https://groups.google.com/g/keycloak-user/c/s_sVxPGLhCs?pli=1)"},{"id":"managed-keycloak-hosting","metadata":{"permalink":"/blog/managed-keycloak-hosting","source":"@site/blog/2024-12-09-managed-keycloak-hosting.md","title":"Managed Keycloak Hosting - Picking a Provider","description":"Picking a provider for Managed Keycloak Hosting should be about more that price, it should be about picking a partner to help you and your app succeed.","date":"2024-12-09T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"},{"inline":true,"label":"extension","permalink":"/blog/tags/extension"}],"readingTime":4.015,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"managed-keycloak-hosting","title":"Managed Keycloak Hosting - Picking a Provider","description":"Picking a provider for Managed Keycloak Hosting should be about more that price, it should be about picking a partner to help you and your app succeed.","authors":"phasetwo","tags":["keycloak","phase_two","startup","customization","extension"]},"unlisted":false,"prevItem":{"title":"Keycloak SAML Identity Provider Idp-initiated flow with Okta","permalink":"/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta"},"nextItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 4: Cost","permalink":"/blog/keycloak-for-startups-cost"}},"content":"### Why consider Phase Two for your Managed Keycloak Provider\\n\\nWhen it comes to identity and access management, Keycloak has established itself as the go-to open-source solution for authentication, authorization, and user management. However, successfully integrating and maintaining Keycloak requires more than just hosting\u2014it requires expertise. That\u2019s where the difference between Phase Two and other hosting providers becomes clear.\\n\\nIn this post, we\u2019ll explore why Phase Two should be in strong consideration for your Managed Keycloak provider, especially when compared to providers like CloudIAM, Elest.io, and Servana, who focus solely on hosting the standard build of Keycloak.\\n\\n\x3c!-- truncate --\x3e\\n\\n### The Managed Keycloak Landscape\\n\\nThe demand for hosted Keycloak solutions has given rise to providers like [Cloud IAM](https://www.cloud-iam.com/), [Elest.io](https://elest.io/open-source/keycloak), and [Servana](https://servanamanaged.com/products/managed-keycloak-service/). These companies offer hosting services for the standard version of Keycloak, typically focusing only on infrastructure and uptime.\\n\\nHowever, while these providers excel in devops, they lack the specialized Keycloak development expertise to go beyond hosting. This is where their limitations become apparent, as businesses often require customization, extensibility, and advanced support for their identity systems.\\n\\nAt Phase Two we started as Keycloak experts first. A large portion of our business is focused on [Support](/support/) of large Enterprises and helping them be successful with complex Keycloak deployments.\\n\\n### Why Phase Two Stands Out\\n\\nAt Phase Two, we do more than host Keycloak\u2014we help you get the most out of it. Here\u2019s how we differentiate ourselves:\\n\\n1. **Keycloak Development Expertise and Community Maintainers**\\n\\nUnlike generic hosting providers, Phase Two is a team of Keycloak [experts](https://phasetwo.io/blog/keycloak-extensions-presentation/). We actively develop advanced features and extensions that enhance Keycloak\u2019s capabilities. For instance, our [Organizations Extension](/product/organizations/) allows [multi-tenant](./2024-11-11-multi-tenancy-with-organizations.md) support out of the box, a feature not available in the standard Keycloak build.\\n\\nThis level of expertise ensures that your Keycloak deployment isn\u2019t just functional, it\u2019s optimized and future-proofed for your unique needs.\\n\\nIn addition, while these providers may suggest you can customize something, the reality is once you enter the realm of needing to add an extension for migration, organizations, theming or more, you will need more control.\\n\\nWe are active contributors to the Keycloak Project for bugs and features.\\n\\n2. **Beyond Hosting \u2013 Full-Service Management**\\n\\nPhase Two provides comprehensive management of your Keycloak deployment. From custom configurations, region deployments, to integration with your existing systems, we tailor every deployment to fit your requirements.\\n\\nWith Phase Two, you\u2019re not just getting a host, you\u2019re gaining a partner who actively ensures your identity solution is robust, scalable, and secure.\\n\\nOn the other end of the email are real people, if you have a problem and reach out, we\'re there to quickly respond.\\n\\n3. **Focus on Extensibility**\\n\\nMany businesses need to extend Keycloak to meet specific requirements, such as custom authentication flows or integrations with third-party systems. At Phase Two, we specialize in making Keycloak extensible, helping you unlock its full potential.\\n\\nIn contrast, standard hosting providers can only offer \u201cout-of-the-box\u201d Keycloak functionality, leaving you to navigate complex customizations alone.\\n\\nFor instance, we are the original implementers and continued maintainers of [CockroachDB build](./2023-12-06-keycloak-on-cockroachdb.mdx), which is a fantastic database for distributed SQL.\\n\\n4. **Enterprise-Grade Support and Reliability**\\n\\nWe understand that uptime is critical, but we also know that businesses need proactive support. At Phase Two, we provide:\\n\\n- Continuous monitoring and optimization.\\n- Regular security patches and updates.\\n- Expert guidance to handle complex challenges.\\n- Guidance for logging and eventing to a SIEM of your choice.\\n\\nWith Phase Two, we ensure your infrastructure is not only operational but also resilient and efficient.\\n\\n5. **Managed Upgrades and Compatibility**\\n\\nKeycloak updates can introduce breaking changes, especially for custom deployments. Phase Two takes the headache out of upgrades, ensuring that your deployment remains stable and compatible.\\n\\nThis seamless upgrade process is something you won\u2019t find with standard-hosting solutions, but you\'ll find that you\'ll need rather quickly. We coordinate with your team to make sure you\'re ready and help verify upgrades.\\n\\nIf downtime is required (some previous version required this), we work to keep this down to minutes and make sure you\'re app is back up fast.\\n\\n### Choosing a Partner That Understands Your Needs\\n\\nManaged Keycloak isn\u2019t just about hosting, it\u2019s about delivering a solution that scales with your business, adapts to your evolving needs, and remains secure in the face of new challenges.\\n\\nWhile other providers offer the basics, Phase Two combines hosting with unmatched Keycloak development expertise, enterprise-grade support, and a commitment to innovation. The result? A managed Keycloak solution that\u2019s tailor-made for your success.\\n\\n### Ready to Elevate Your Keycloak Deployment?\\n\\nIf you\u2019re looking for a Managed Keycloak provider that goes beyond hosting, Phase Two is here to help. Explore our Managed Keycloak Hosting or Enterprise Support to learn more.\\n\\nSchedule a consultation today or get in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io) to learn how we can transform your identity solution."},{"id":"keycloak-for-startups-cost","metadata":{"permalink":"/blog/keycloak-for-startups-cost","source":"@site/blog/2024-12-02-keycloak-for-startups-cost.md","title":"Why your startup should use Keycloak for SSO and User Management - Part 4: Cost","description":"Part 4: There is no justification for variable cost for individual features.","date":"2024-12-02T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"},{"inline":true,"label":"extension","permalink":"/blog/tags/extension"}],"readingTime":4.69,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-for-startups-cost","title":"Why your startup should use Keycloak for SSO and User Management - Part 4: Cost","description":"Part 4: There is no justification for variable cost for individual features.","authors":"phasetwo","tags":["keycloak","phase_two","startup","customization","extension"]},"unlisted":false,"prevItem":{"title":"Managed Keycloak Hosting - Picking a Provider","permalink":"/blog/managed-keycloak-hosting"},"nextItem":{"title":"Implement Multi-Tenancy Applications with Keycloak Organizations","permalink":"/blog/multi-tenancy-with-keycloak-organizations"}},"content":":::note\\n\\nIn this [series](./2024-10-18-keycloak-for-startups-overview.md) we are proposing Keycloak as a superior alternative to commercial identity offerings.\\n\\n- [Part 1: Standards](./2024-10-21-keycloak-for-startups-standards.md)\\n- [Part 2: Data Ownership](./2024-10-28-keycloak-for-startups-data.md)\\n- [Part 3: Customization](./2024-11-04-keycloak-for-startups-customization.md)\\n- [Part 4: Cost](./2024-12-02-keycloak-for-startups-cost.md)\\n\\n:::\\n\\n### Part 4: Cost-Effectiveness of Open Source\\n\\nAt the heart of every startup\'s decision-making process lies the bottom line. We\u2019re in an economy where cost-cutting measures are being taken across organizations, and many companies are starting to ask why their identity stack is such an outsized drag on their margins. Keycloak presents a compelling case with its open-source nature. Unlike proprietary IAM solutions that come with hefty price tags and recurring subscription fees, Keycloak offers a cost-effective alternative without compromising on features or security.\\n\\nBy leveraging Keycloak, startups can significantly reduce their operational expenses, channeling those resources into core business activities such as product development and market expansion. Moreover, the open-source community surrounding Keycloak ensures continuous improvement and innovation, all without the burden of additional licensing costs.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Cost of Hosting an Open-Source Product like Keycloak\\n\\nKeycloak, being an open-source IAM solution, offers startups a significant advantage in terms of cost-effectiveness. Here\'s why:\\n\\n1. **No Licensing Fees**: The most apparent benefit of using Keycloak is the absence of licensing fees. Startups can leverage the full spectrum of Keycloak\'s features without incurring any upfront costs or recurring subscription fees. This eliminates a significant financial burden, allowing startups to allocate resources more efficiently towards core business activities.\\n\\n2. **Infrastructure Flexibility**: With Keycloak, startups have the freedom to choose their hosting infrastructure, whether it\'s on-premises or in the cloud. This flexibility enables startups to optimize infrastructure costs based on their specific requirements and budget constraints. Additionally, Keycloak\'s lightweight footprint ensures minimal resource consumption, further reducing operational expenses.\\n\\n3. **Community Support**: The vibrant open-source community surrounding Keycloak provides startups with access to a wealth of resources, including documentation, forums, and community-contributed extensions. This extensive support network ensures timely resolution of issues and continuous improvement of the platform, all at no additional cost to startups.\\n\\n4. **Expertise**: Using an open-source solution means adopting that code base in a manner of speaking. Your team must build expertise in the code base and the capabilities of the tool in addition to all the protocols that come with IAM. That includes things like setting up authentication flows, configuring [organizations](/product/organizations/), or [performing upgrades](/support#upgrades).\\n\\n### Predatory Nature of SaaS Solutions like Auth0 and WorkOS\\n\\nWhile SaaS solutions like Auth0 and WorkOS offer convenience and ease of use, their pricing models can be detrimental to startups, especially those operating on limited budgets:\\n\\n1. **Subscription Fees**: Auth0 and WorkOS typically operate on a subscription-based pricing model, where startups are required to pay recurring fees based on usage or the number of active users or identity providers (aka \u201cSSO connections\u201d). These fees can quickly escalate as startups scale their operations, potentially eating into precious financial resources that could otherwise be invested in growth initiatives.\\n\\n2. **Vendor Lock-In**: By relying on proprietary SaaS solutions, startups risk becoming locked into a vendor ecosystem, making it difficult to migrate to alternative solutions in the future. This lack of vendor independence can pose significant challenges, especially if the SaaS provider decides to increase prices or modify terms of service, leaving startups vulnerable to unforeseen expenses and disruptions.\\n\\n3. **Hidden Costs**: Beyond the base subscription fees, startups may encounter additional hidden costs associated with SaaS solutions, such as implementation fees, integration costs, and fees for accessing premium features or support services. These hidden costs can quickly accumulate, further exacerbating the financial strain on startups.\\n\\n### Conclusion: Empowering Startups with Financial Freedom and Flexibility\\n\\nIn conclusion, the cost comparison between hosting an open-source product like Keycloak and opting for SaaS solutions like [Auth0](./2024-05-01-alternatives-auth0.md) and [WorkOS](./2024-07-22-keycloak-vs-workos.md) underscores the importance of financial freedom and flexibility for startups.\\n\\nBy choosing Keycloak, startups can break free from the predatory pricing models of SaaS solutions, empowering themselves with a cost-effective and customizable IAM solution that aligns seamlessly with their budgetary constraints and growth objectives. With Keycloak, startups can redirect their financial resources towards innovation, differentiation, and sustainable growth, unlocking their full potential in the competitive landscape of Enterprise SaaS.\\n\\nAt Phase Two, we\u2019ve embraced Keycloak, and want to share it\u2019s value with as many companies as possible. If you are going to self-host, and need help getting started, we provide architecture review, installation help and ongoing [support](/support). If you\u2019d prefer to go the SaaS direction, but want to avoid the disadvantages of proprietary solutions, our [hosted](/hosting/) offerings provide the benefits of Keycloak on our hosted infrastructure with pricing that isn\u2019t predatory on your business model and growth.\\n\\n### Series conclusion\\n\\nWhile alternatives like Auth0 and WorkOS may boast similar features, Keycloak stands out as the superior choice for enterprise SaaS startups. Auth0, though feature-rich, often comes with a higher price tag, making it less accessible for startups operating on tight budgets. On the other hand, these proprietary, while suitable for certain use cases, lacks the extensibility and customization options offered by Keycloak.\\n\\nIn summary, Keycloak emerges as the ideal IAM solution for enterprise SaaS startups, offering a perfect balance of cost-effectiveness, customizability, and feature-rich functionality. By embracing Keycloak, startups can elevate their security posture, enhance user experiences, and drive sustainable growth in today\'s competitive market landscape.\\n\\nAs you embark on your journey to revolutionize the world of Enterprise SaaS, let Keycloak and Phase Two be your trusted ally in conquering the challenges of identity and access management. Unlock the full potential of your startup with Keycloak and pave the way for a future of innovation and success.\\n\\nGet in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io) to learn more."},{"id":"multi-tenancy-with-keycloak-organizations","metadata":{"permalink":"/blog/multi-tenancy-with-keycloak-organizations","source":"@site/blog/2024-11-11-multi-tenancy-with-organizations.md","title":"Implement Multi-Tenancy Applications with Keycloak Organizations","description":"Applications needing to leverage Keycloak to consolidate logins can leverage Keycloak Organizations.","date":"2024-11-11T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"organizations","permalink":"/blog/tags/organizations"},{"inline":true,"label":"multitenant","permalink":"/blog/tags/multitenant"}],"readingTime":5.37,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"multi-tenancy-with-keycloak-organizations","title":"Implement Multi-Tenancy Applications with Keycloak Organizations","description":"Applications needing to leverage Keycloak to consolidate logins can leverage Keycloak Organizations.","authors":"phasetwo","tags":["keycloak","phase_two","organizations","multitenant"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 4: Cost","permalink":"/blog/keycloak-for-startups-cost"},"nextItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 3: Customization","permalink":"/blog/keycloak-for-startups-customization"}},"content":"### Overview\\n\\nA multi-tenant application is a software architecture where a single instance of an application serves multiple, distinct customer groups or \u201ctenants.\u201d Each tenant, often representing an organization or user group, shares the same underlying infrastructure and codebase but operates within its own securely isolated environment. This allows each tenant to have individualized data, configurations, and sometimes even unique customizations, while benefiting from a shared platform that reduces overall resource demands and maintenance. Multi-tenancy is commonly used in SaaS (Software as a Service) applications, enabling businesses to scale efficiently, lower costs, and streamline updates while ensuring that each tenant\u2019s data and settings remain private and distinct from others within the same application. This approach is particularly valuable in enterprise applications, where companies may need to provide access to different organizations, departments, or customer groups within a single solution.\\n\\n\x3c!-- truncate --\x3e\\n\\nThis post will cover a few things:\\n\\n- Concept of how to implement this with Keycloak and Phase Two\'s [Organization](https://phasetwo.io/product/organizations/) extension ([Github](https://github.com/p2-inc/keycloak-orgs)).\\n- Proof-of-concept implementation that will include how to configure a Keycloak instance with clients, organizations, roles, and example applications to consume these implementations.\\n\\nWe have also given a detailed talk at Keycloak Dev Day on [Multi-Tenancy within a Single Realm](./2024-04-10-keycloak-orgs-presentation.md).\\n\\nThe implementation, while not difficult, does require knowledge of how to use Keycloak. If you\'re unclear at any point, please reach out [sales@phasetwo.io](mailto:sales@phasetwo.io).\\n\\n### Why use Organizations Instead of Multiple Realms?\\n\\nUsing Phase Two\u2019s Keycloak Extension for [Organizations](https://phasetwo.io/product/organizations/) provides a more efficient and scalable way to implement multi-tenancy than managing multiple realms in Keycloak. Here\u2019s why:\\n\\n1. Resource Efficiency: Each realm in Keycloak creates isolated resources, which can lead to increased memory and CPU usage as the number of realms grows. By using a single realm with organizational support, you can maintain performance while still supporting multiple tenants.\\n2. Centralized Management: Managing numerous realms can become complex, especially for shared configurations and customizations. The extension allows you to manage users, roles, and configurations within a single realm, reducing overhead.\\n3. Simplified User Access Control: With organizations, you can easily segment users by tenant within the same realm. This allows for straightforward user and role management without needing to duplicate settings across realms.\\n4. Improved Scalability: As your application scales, the single-realm approach with organizational structures is more sustainable, reducing maintenance and potential errors. It supports a logical separation for tenants without the performance and management limitations of numerous realms.\\n\\nOverall, the extension simplifies and optimizes Keycloak for multi-tenant applications, focusing on efficient resource usage and management scalability.\\n\\n### Conceptualizing Multi-Tenant Implementation\\n\\nWe\'re going to use the following example system:\\n\\n- 2 applications\\n- 2 tenants of each applications\\n- Single Keycloak realm\\n- Two Keycloak Organizations to represent the tenants\\n- Role names that match the applications\\n\\nWe can visualize this in the following diagram:\\n\\n![System](/blog/multi_tenant/system.png)\\n\\nIn Keycloak, we match the system implementation by doing the following:\\n\\n- Two Clients match the two Applications. More Clients added per tenant.\\n- Two Organizations match the two Tenants. This could be scaled out for additional tenants.\\n- One role per Tenant within each Organization.\\n\\nIf we break this down specifically with the names:\\n\\n_Application system_\\n\\n- Two applications: Zoo, Aquarium\\n- Two tenants: California, New York\\n\\n_Keycloak system_\\n\\n- Two clients: Zoo, Aquarium\\n- Two organizations: California, New York\\n- Two roles per for Org: zoo, aquarium\\n\\nIn order for users to then have access to the various Clients and Tenants, we would add them as members to the Organization, then assign them roles that match their access.\\n\\nWe can visualize this as follows:\\n\\n![User Access](/blog/multi_tenant/user-access.png)\\n\\nThis represents following access:\\n\\n- User 1\\n  - Zoo application, California tenant\\n  - Aquarium application, California tenant\\n  - Aquarium application, New York tenant\\n- User 2\\n  - Zoo application, California tenant\\n  - Zoo application, New York tenant\\n\\nUsers are granted roles to represent application access. Users are made members of an Organization to represent tenant access.\\n\\nConsuming and implementing this representation can be done via the Organizations API on the [`/me` endpoint](https://phasetwo.io/api/get-me/).\\n\\n### Sample Implementation\\n\\nNow that we\'ve discussed how the system is designed, let\'s work through an example of this application.\\n\\n#### Keycloak Configuration\\n\\nWe\'ll be using Phase Two\'s [free hosted Keycloak](/hosting) to set up a deployment and associated organizations. Visit [Phase Two Dashboard](https://phasetwo.io/dashboard) to sign up for a free account and create a deployment. After you have created the deployment, click the \\"Open Console\\" link to go to the Keycloak deployment.\\n\\nNext we\'ll configure Keycloak and then configure the applications.\\n\\n##### Configuring Keycloak\\n\\n1. Go to the Clients tab. We will create two Clients. Provide a `Client ID` of `aquarium` and `zoo` to each. Enter a value of `*` for `Valid redirect URIs` (don\'t use this for production).\\n2. Go to the Users tab. Add a user with a username of `jane`, first name of `jane`, and last name of `goodall`. Add a second user with a username of `jacques`, first name of `jacques`, and last name of `cousteau`.\\n3. Go to the Organizations tab. Create two Organizations. Name one `california` and the other `new york`. For each organization, create two roles: `aquarium` and `zoo`. For each organization, add the two user\'s created to them as members.\\n4. Inside the `california` organization, assign the `aquarium` role to the `jacques` user. Assign the `zoo` role to the `jane` user.\\n5. Inside the `newyork` organization, assign the `aquarium` role to both users. Assign the `zoo` role only to the `jane` user.\\n\\nAt this point we should have all we require for configuring our client applications as needed.\\n\\n##### Configuring Client Applications\\n\\nWe won\'t go through all the steps required to build a client application in this post. We have a `nx` [monorepo](https://github.com/p2-inc/examples/tree/main/multitenant) generated for use where you can clone it and change the OIDC client config to speak to the correct applications.\\n\\nUpdate the associated values make use of the Keycloak configuration you created above: realm name, clients, and so on. The app is setup already with a scaffold to pull the `/orgs/me` endpoint.\\n\\nOnce you have the application setup (check readme for more details), log in as the `jane` and `jacques` user to see the variation of which organization and roles they have access to. You\'ll see a variation of this:\\n\\n![Organizations](/blog/multi_tenant/orgs.png)\\n\\n### In Conclusion\\n\\nCreating a multi-tenant application isn\'t necessarily easy, but it is well within the capability of Keycloak. If you end up leveraging our Organization\'s extension to support multi-tenancy, let us [know](mailto:sales@phasetwo.io)."},{"id":"keycloak-for-startups-customization","metadata":{"permalink":"/blog/keycloak-for-startups-customization","source":"@site/blog/2024-11-04-keycloak-for-startups-customization.md","title":"Why your startup should use Keycloak for SSO and User Management - Part 3: Customization","description":"Part 3: Keycloak stands out in customizability for tailored solutions.","date":"2024-11-04T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"},{"inline":true,"label":"extension","permalink":"/blog/tags/extension"}],"readingTime":4.27,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-for-startups-customization","title":"Why your startup should use Keycloak for SSO and User Management - Part 3: Customization","description":"Part 3: Keycloak stands out in customizability for tailored solutions.","authors":"phasetwo","tags":["keycloak","phase_two","startup","customization","extension"]},"unlisted":false,"prevItem":{"title":"Implement Multi-Tenancy Applications with Keycloak Organizations","permalink":"/blog/multi-tenancy-with-keycloak-organizations"},"nextItem":{"title":"Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login","permalink":"/blog/magic-links-native-applications"}},"content":":::note\\n\\nIn this [series](./2024-10-18-keycloak-for-startups-overview.md) we are proposing Keycloak as a superior alternative to commercial identity offerings.\\n\\n- [Part 1: Standards](./2024-10-21-keycloak-for-startups-standards.md)\\n- [Part 2: Data Ownership](./2024-10-28-keycloak-for-startups-data.md)\\n- [Part 3: Customization](./2024-11-04-keycloak-for-startups-customization.md)\\n- [Part 4: Cost](./2024-12-02-keycloak-for-startups-cost.md)\\n\\n:::\\n\\n### Part 3: Customizability for Tailored Solutions: Why Keycloak Stands Out\\n\\nOne size rarely fits all, especially in the world of enterprise software. Startups require flexibility to adapt and tailor IAM solutions to their unique business requirements. Keycloak shines in this aspect, offering extensive customization capabilities that empower startups to mold the platform according to their specific needs.\\n\\nFrom branding and user interface customization to advanced authentication flows and authorization policies, Keycloak provides a comprehensive toolkit for startups to craft seamless and secure user experiences. Whether integrating with existing systems or building entirely new functionalities, Keycloak\'s flexibility ensures a perfect fit for any enterprise SaaS startup. Here\u2019s how Keycloak\u2019s flexibility stands apart from commercial, closed-source solutions, and why this is a key differentiator:\\n\\n\x3c!-- truncate --\x3e\\n\\n1. **Flexible Authentication and Authorization Flows**: Keycloak supports a broad range of authentication flows out of the box, including standard Single Sign-On ([SSO](/product/sso/)), multi-factor authentication (MFA), and custom flows that can incorporate additional security checks or personalized user experiences. Through its flexible Authentication Flow configuration, Keycloak allows you to define step-by-step authentication processes, integrating custom forms, conditional checks, and required actions. This customization ensures that security and compliance requirements can be met without compromising on user experience.\\n\\n2. **Adaptable User Interfaces and Branding**: The user experience is a major part of identity management. Keycloak makes it easy to customize login pages, consent screens, and other interfaces to align with your brand\u2019s look and feel. You can alter these templates by modifying Keycloak\u2019s HTML, CSS, and JavaScript files, enabling seamless brand integration and a cohesive customer experience. Closed-source solutions, by contrast, often provide limited UI customization options, restricting the degree to which you can personalize the user experience.\\n\\n3. **Modular Extensions with Service Provider Interfaces (SPIs)**: Keycloak\u2019s modular architecture is built to support extensive custom extensions via Service Provider Interfaces (SPIs). SPIs are essentially integration points that allow developers to replace or enhance Keycloak\u2019s default behavior. For instance, if you need a unique authentication method, such as biometric authentication or a custom identity provider integration, you can build and plug in your own SPI modules. This extensibility offers startups the freedom to experiment, innovate, and introduce unique capabilities not available in off-the-shelf commercial IAM solutions.\\n\\n4. **Seamless Integration with Existing Systems**: Because it is open source, Keycloak is highly compatible with various enterprise ecosystems and can be deeply integrated with existing IT [infrastructure and applications](/product/integrations/). Keycloak\u2019s ability to connect with external identity providers, databases, custom authentication mechanisms, and business systems allows startups to create a seamless experience for users who may be interacting with multiple applications. This integration potential extends to support for protocols such as LDAP, Active Directory, SAML, and OIDC, making it possible to incorporate Keycloak into hybrid and legacy environments with minimal friction.\\n\\n5. **API-Driven Customization and Developer-Friendly Environment**: Keycloak\u2019s comprehensive APIs and developer-friendly tooling make it an ideal choice for startups that value agility and the ability to innovate quickly. Through Keycloak\u2019s REST APIs, developers can programmatically manage users, sessions, roles, permissions, and more. This API-driven approach allows startups to automate IAM workflows, create custom dashboards, or extend functionalities as business needs evolve. In a closed-source solution, API access may be limited or gated behind premium licensing tiers, restricting the organization\u2019s ability to fully integrate IAM within its applications.\\n\\n6. **Open Source Freedom and Community-Driven Innovation**: Keycloak\u2019s open-source nature provides the ultimate freedom to customize, extend, and experiment without limitations. The active Keycloak community continuously contributes new features, plugins, and enhancements, making it possible to stay on the cutting edge of IAM innovation. Startups benefit not only from this community-driven innovation but also from the ability to create proprietary modifications or custom forks of Keycloak to meet unique requirements\u2014a level of freedom and flexibility typically unavailable with commercial IAM providers.\\n\\n### Why Customizability Matters in Comparison to Closed-Source Solutions\\n\\nIn contrast, commercial IAM solutions like [Auth0](./2024-05-01-alternatives-auth0.md) or [WorkOS](./2024-07-22-keycloak-vs-workos.md) often limit customization to predefined configuration options. These providers typically restrict access to source code and SPIs, which can prevent organizations from fully adapting the IAM solution to fit unique workflows, branding requirements, or security demands. Additionally, while some commercial IAM providers offer custom integrations or enhanced features, these are often gated behind higher-tier pricing plans, increasing costs as startups scale.\\n\\nThe flexibility Keycloak offers through customization allows startups to truly own their IAM strategy, aligning it directly with their brand identity, security protocols, and business objectives. By choosing Keycloak, startups retain the freedom to innovate at every layer of the IAM process, without being constrained by the limitations or financial restrictions imposed by closed-source, SaaS-based IAM providers.\\n\\nFor your extension needs, Phase Two provides the ability to load custom themes and extensions for customers at the [Enterprise level](/hosting/). Please contact [sales@phasetwo.io](mailto:sales@phasetwo.io) for more information about how to benefit from our hosting platform while customizing Keycloak to your specific needs.\\n\\n_Read [Part 4: Cost](./2024-12-02-keycloak-for-startups-cost.md) now_\\n\\nGet in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io) to learn more."},{"id":"magic-links-native-applications","metadata":{"permalink":"/blog/magic-links-native-applications","source":"@site/blog/2024-10-31-2024-magic-links-native-apps.md","title":"Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login","description":"Leverage the Keycloak Magic Link extension to easily and securely log users into native applications.","date":"2024-10-31T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"keycloak_magic_link","permalink":"/blog/tags/keycloak-magic-link"},{"inline":true,"label":"keycloak_extensions","permalink":"/blog/tags/keycloak-extensions"}],"readingTime":2.755,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"magic-links-native-applications","title":"Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login","description":"Leverage the Keycloak Magic Link extension to easily and securely log users into native applications.","authors":"phasetwo","tags":["keycloak","phase_two","keycloak_magic_link","keycloak_extensions"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 3: Customization","permalink":"/blog/keycloak-for-startups-customization"},"nextItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 2: Data","permalink":"/blog/keycloak-for-startups-data"}},"content":"### Keycloak and Native Applications\\n\\nNative applications for iOS, Android, and other platforms can integrate with Keycloak to provide secure, centralized authentication and authorization services. By utilizing Keycloak, these applications can streamline the user login experience through various protocols such as OAuth 2.0 and OpenID Connect, which Keycloak natively supports. With Keycloak, mobile applications can handle user sign-in, token management, and session handling securely, ensuring user identities are managed consistently across devices and platforms. This setup enables native applications to offload the complexities of authentication to Keycloak, allowing seamless integrations with features like Single Sign-On (SSO), social logins, and multi-factor authentication, while developers can focus on app functionality rather than handling sensitive user data directly. Additionally, Keycloak\u2019s support for fine-grained access control and roles ensures that native apps can manage user permissions efficiently, creating a robust foundation for secure, scalable mobile applications.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Keycloak Magic Link\\n\\nThe [Keycloak Magic Link extension](https://github.com/p2-inc/keycloak-magic-link) by Phase Two offers a plugin that enables passwordless authentication for Keycloak through the use of magic links. This plugin allows users to log in without needing to remember a password by simply clicking a secure link sent to their email. It works by generating a one-time-use link, which, when clicked, authenticates the user directly, improving both security and user experience. This approach is particularly useful for applications where ease of access and reducing password fatigue are priorities. The repository provides a robust, configurable setup compatible with Keycloak\u2019s authentication workflows, making it straightforward to implement in various types of applications that require seamless, passwordless login functionality.\\n\\n### Leveraging Magic Link for Easy SSO\\n\\nApplications can use the Magic Link [resource](https://github.com/p2-inc/keycloak-magic-link) to issue a request to get a link or generate an email. For example:\\n\\n```bash\\ncurl --request POST https://keycloak.host/auth/realms/test/magic-link \\\\\\n --header \\"Accept: application/json\\" \\\\\\n --header \\"Content-Type: application/json\\" \\\\\\n --header \\"Authorization: Bearer <access_token>\\" \\\\\\n --data \'{\\"email\\":\\"foo@foo.com\\",\\"client_id\\":\\"account-console\\",\\"redirect_uri\\":\\"https://keycloak.host/auth/realms/test/account/\\",\\"expiration_seconds\\":3600,\\"force_create\\":true,\\"update_profile\\":true,\\"update_password\\":true,\\"send_email\\":false}\'\\n```\\n\\nwould result in a sample response of\\n\\n```json\\n{\\n  \\"user_id\\": \\"386edecf-3e43-41fd-886c-c674eea41034\\",\\n  \\"link\\": \\"https://keycloak.host/auth/realms/test/login-actions/action-token?key=eyJhbG...KWuDyE&client_id=account-console\\",\\n  \\"sent\\": false\\n}\\n```\\n\\nSimply change the `redirect_uri` to be a registered URI scheme for the application.\\n\\nOnce a user clicks that link in the email, extract the `code` param of the url, and use that to then issue requests to the `token` endpoint. For example:\\n\\n```bash\\ncurl -X \\"POST\\" \\"https://keycloak.host/auth/realms/test/openid-connect/token\\" \\\\\\n     -H \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n     --data-urlencode \\"grant_type=authorization_code\\" \\\\\\n     --data-urlencode \\"code=b5c7a811-0e61-42b9-9fc5-934fd614b57e.ff2148c2-a20d-4efc-ba8e-e7825f5ae204.edd26036-7f7e-4a91-be47-84603e57e3aa\\" \\\\\\n     --data-urlencode \\"client_id=account-console\\" \\\\\\n     --data-urlencode \\"redirect_uri=myapp://redirect\\"\\n```\\n\\n### Conclusion\\n\\nUsing magic links with Keycloak for a native application offers a streamlined, user-friendly authentication experience, especially beneficial for mobile users. With magic links, users can log in effortlessly without needing to remember or type passwords\u2014often a challenging task on mobile devices. Instead, a secure, one-time-use link is sent to their email, allowing them to authenticate with a simple tap. This approach not only simplifies the login process but also enhances security by reducing password-related vulnerabilities, such as weak or reused passwords. For the end user, this means a smoother, faster, and more secure login experience, allowing them to access the application with minimal effort and without the risk of password fatigue. Magic link authentication via Keycloak aligns well with modern security standards and significantly improves user engagement by lowering login barriers in native applications.\\n\\nUse Phase Two\'s free [hosting](/hosting) to try it out or send us a message at [sales@phasetwo.io](mailto:sales@phasetwo.io) to discuss your use case or learn more."},{"id":"keycloak-for-startups-data","metadata":{"permalink":"/blog/keycloak-for-startups-data","source":"@site/blog/2024-10-28-keycloak-for-startups-data.md","title":"Why your startup should use Keycloak for SSO and User Management - Part 2: Data","description":"Part 2: The ability to control your data is essential, now and in the future.","date":"2024-10-28T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"},{"inline":true,"label":"data","permalink":"/blog/tags/data"}],"readingTime":3.61,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-for-startups-data","title":"Why your startup should use Keycloak for SSO and User Management - Part 2: Data","description":"Part 2: The ability to control your data is essential, now and in the future.","authors":"phasetwo","tags":["keycloak","phase_two","startup","data"]},"unlisted":false,"prevItem":{"title":"Using Magic Links Within a Native iOS, Android, or Other Application for Fast and Secure Login","permalink":"/blog/magic-links-native-applications"},"nextItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 1: Standards","permalink":"/blog/keycloak-for-startups-standards"}},"content":":::note\\n\\nIn this [series](./2024-10-18-keycloak-for-startups-overview.md) we are proposing Keycloak as a superior alternative to commercial identity offerings.\\n\\n- [Part 1: Standards](./2024-10-21-keycloak-for-startups-standards.md)\\n- [Part 2: Data Ownership](./2024-10-28-keycloak-for-startups-data.md)\\n- [Part 3: Customization](./2024-11-04-keycloak-for-startups-customization.md)\\n- [Part 4: Cost](./2024-12-02-keycloak-for-startups-cost.md)\\n\\n:::\\n\\n### Part 2 - Owning Your Data: Security, Privacy, and Control\\n\\nIn the age of data breaches and privacy concerns, owning and controlling your user data is not just a preference but a strategic imperative for organizations, particularly when it comes to Identity and Access Management (IAM) solutions. Let\'s explore the reasons why owning your data matters and the risks associated with entrusting it to a Software-as-a-Service (SaaS) solution.\\n\\n\x3c!--truncate--\x3e\\n\\n1. **Data Security**: By hosting your IAM solution on-premise on your own infrastructure, or with a hybrid that allows you to control the database, you retain control over the security measures implemented to safeguard your user data. This includes encryption protocols, access controls, network security configurations, and intrusion detection systems. **With data breaches becoming increasingly common**, maintaining tight control over your data security posture is paramount for protecting sensitive information and mitigating risks.\\n\\n2. **Data Privacy Compliance**: Depending on your industry or geographical location, you may be subject to stringent data privacy regulations such as the General Data Protection Regulation (GDPR) or the California Consumer Privacy Act (CCPA). By owning your data, you can ensure compliance with these regulations through appropriate data handling practices, transparent communication with users about data collection and usage, and streamlined management of data subject access requests (DSAR\'s) and consent processes.\\n\\n3. **Customization and Integration**: When you own your data, you have the freedom to customize your IAM solution and integrate it seamlessly with other systems and applications within your organization\'s ecosystem. This level of flexibility enables you to tailor the solution to meet your specific business requirements, streamline workflows, and enhance operational efficiency. In contrast, SaaS solutions may impose limitations on customization and integration, hindering your ability to adapt the solution to evolving business needs. For example, with Keycloak, you can create custom authentication flows, such as multi-factor authentication with step-up policies based on user roles or risk profiles, or integrate Keycloak with your CRM to automatically sync user permissions with customer account changes.\\n\\n#### Risks of SaaS Data Hosting\\n\\nWhile SaaS solutions offer convenience and ease of deployment, they also present inherent risks when it comes to hosting your user data:\\n\\n1. **Data Access and Control**: Entrusting your user data to a SaaS provider means relinquishing control over how that data is stored, accessed, and managed. You are reliant on the provider to implement robust security measures and adhere to data privacy regulations, with limited visibility and oversight on your part.\\n\\n2. **Vendor Lock-In**: Adopting a SaaS IAM solution may result in vendor lock-in, where migrating away from the solution becomes challenging or costly. This lock-in can restrict your ability to switch providers or transition to a self-hosted solution in the future, potentially limiting your flexibility and independence.\\n\\n3. **Data Sovereignty Concerns**: Depending on the jurisdiction in which the SaaS provider operates, you may encounter data sovereignty issues that impact your ability to control where your data is stored and processed. This lack of control over data residency can complicate compliance efforts and expose your organization to regulatory risks.\\n\\n#### Conclusion: Empowering Organizations with Data Ownership\\n\\nIn conclusion, owning and controlling your user data offers numerous benefits, including enhanced security, compliance, customization, and integration capabilities. While SaaS solutions may offer convenience, organizations must carefully weigh the risks associated with relinquishing control over their data and consider the long-term implications for security, privacy, and regulatory compliance.\\n\\nIn order to provide customers who are used to SaaS solutions with flexibility in data sovereignty, Phase Two has developed \\"BYODB\\" (bring your own Database). BYODB allows customers the ability to benefit from the ease, scalability, and robustness of our [hosted offering](/hosting) while still owning and controlling their data.\\n\\nFor those hosting Keycloak entirely themselves, Phase Two offers [Enterprise level support](/support) to ensure that systems are properly configured, setup, upgraded, and managed by customers.\\n\\nBy prioritizing data ownership and implementing robust IAM solutions that align with organizational objectives and values, organizations can mitigate risks, safeguard sensitive information, and maintain sovereignty over their data assets in an increasingly interconnected and data-driven world.\\n\\n_Read [Part 3: Customizability for Tailored Solutions](./2024-11-04-keycloak-for-startups-customization.md) now_\\n\\nGet in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io) to learn more."},{"id":"keycloak-for-startups-standards","metadata":{"permalink":"/blog/keycloak-for-startups-standards","source":"@site/blog/2024-10-21-keycloak-for-startups-standards.md","title":"Why your startup should use Keycloak for SSO and User Management - Part 1: Standards","description":"Every commercial and open source IAM offering is an implementation of the same standards.","date":"2024-10-21T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"},{"inline":true,"label":"standards","permalink":"/blog/tags/standards"}],"readingTime":2.94,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-for-startups-standards","title":"Why your startup should use Keycloak for SSO and User Management - Part 1: Standards","description":"Every commercial and open source IAM offering is an implementation of the same standards.","authors":"phasetwo","tags":["keycloak","phase_two","startup","standards"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 2: Data","permalink":"/blog/keycloak-for-startups-data"},"nextItem":{"title":"Why your startup should use Keycloak for SSO and User Management","permalink":"/blog/keycloak-for-startups-overview"}},"content":":::note\\n\\nIn this [series](./2024-10-18-keycloak-for-startups-overview.md) we are proposing Keycloak as a superior alternative to commercial identity offerings.\\n\\n- [Part 1: Standards](./2024-10-21-keycloak-for-startups-standards.md)\\n- [Part 2: Data Ownership](./2024-10-28-keycloak-for-startups-data.md)\\n- [Part 3: Customization](./2024-11-04-keycloak-for-startups-customization.md)\\n- [Part 4: Cost](./2024-12-02-keycloak-for-startups-cost.md)\\n\\n:::\\n\\n### Part 1: Standardized Protocols and Minimal Feature Set Differentiation\\n\\nIn the realm of Identity and Access Management (IAM) solutions, it\'s essential to recognize that many offerings, both commercial and open source, operate on standardized protocols such as OpenID Connect (OIDC), Security Assertion Markup Language (SAML), System for Cross-domain Identity Management (SCIM), Lightweight Directory Access Protocol (LDAP), and more. This adherence to standardized protocols often results in minimal differentiation at the feature set level across various options. Let\'s delve into this further:\\n\\n\x3c!--truncate--\x3e\\n\\n1. **Protocol Compliance**: Whether it\'s OIDC for modern authentication, SAML for Single Sign-On ([SSO](/product/sso/)), SCIM for user provisioning, or LDAP for directory services, IAM solutions are built upon established industry standards. This adherence ensures interoperability and compatibility with a wide range of applications and systems, irrespective of the chosen solution.\\n\\n2. **Core Functionality**: At their core, [IAM solutions](./2024-03-11-open-source-iam.md) primarily focus on fundamental functionalities such as authentication, authorization, user provisioning, and identity federation. These functionalities form the backbone of IAM systems and are present across all offerings, regardless of whether they are commercial or open source.\\n\\n3. **Feature Parity**: While commercial IAM solutions may tout additional features or value-added services, the underlying feature set remains largely consistent across the board. Basic [functionalities](/product/identity/) such as user authentication, role-based access control (RBAC), multi-factor authentication (MFA), and audit logging are standard offerings in both commercial and open-source IAM solutions.\\n\\n4. **Customization and Extensibility**: Differentiation often occurs at the level of [customization and extensibility](./2024-09-27-keycloak-extensions-presentation.md) rather than core features. Both commercial and open-source IAM solutions provide APIs, SDKs, and extension points that enable organizations to tailor the platform to their specific requirements, integrate with existing systems, and extend functionality as needed.\\n\\n5. **Vendor-Specific Enhancements**: While the core feature set may be similar across IAM solutions, vendors may differentiate themselves through vendor-specific enhancements, integrations, or ecosystem partnerships. However, these enhancements typically cater to niche use cases or specific industries and may not significantly impact the overall feature parity among IAM solutions.\\n\\n6. **Closed Development**: One of the key issues is that many commercial solutions are developed in isolation of public audits and community scrutiny. Companies build and operate these core secuirty protocols and standards behind a veil of secrecy, not sharing their implementations to allow review by security professionals and standards bodies. In contrast, open source solutions are built to allow full review and participation by both. Keycloak has been through many independent reviews and audits, and has a mature process for handling security issues in a timely fashion. Do you want these critical security implementations to be built with a rigor for review, or something one developer slapped together from a few examples and ChatGPT sessions?\\n\\n#### Conclusion 1: Making Informed Decisions Beyond Feature Sets\\n\\nIn conclusion, while it\'s true that there is minimal differentiation on the feature set level among IAM solutions due to standardized protocols, organizations should focus on other factors when evaluating and selecting a solution. Considerations such as cost-effectiveness, customization capabilities, vendor support, community engagement, and alignment with organizational goals should weigh heavily in the decision-making process.\\n\\nUltimately, the choice between commercial and open-source IAM solutions should be driven by factors beyond the core feature set, with organizations prioritizing flexibility, scalability, security, and long-term sustainability in their IAM strategy.\\n\\n_Read [Part 2: Data Ownership](./2024-10-28-keycloak-for-startups-data.md) now._\\n\\nGet in touch at [sales@phasetwo.io](mailto:sales@phasetwo.io) to learn more."},{"id":"keycloak-for-startups-overview","metadata":{"permalink":"/blog/keycloak-for-startups-overview","source":"@site/blog/2024-10-18-keycloak-for-startups-overview.md","title":"Why your startup should use Keycloak for SSO and User Management","description":"Startups are striving for excellence in user experience and security, while simultaneously focusing on their core competencies. That means picking the best tools that expedite their time to market, with as few compromises as possible. Learn why Keycloak excels where commercial solutions fail.","date":"2024-10-18T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"startup","permalink":"/blog/tags/startup"}],"readingTime":1.205,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-for-startups-overview","title":"Why your startup should use Keycloak for SSO and User Management","description":"Startups are striving for excellence in user experience and security, while simultaneously focusing on their core competencies. That means picking the best tools that expedite their time to market, with as few compromises as possible. Learn why Keycloak excels where commercial solutions fail.","authors":"phasetwo","tags":["keycloak","phase_two","startup"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management - Part 1: Standards","permalink":"/blog/keycloak-for-startups-standards"},"nextItem":{"title":"Securing Keycloak with OIDC SPA and Phase Two","permalink":"/blog/keycloak-oidc-spa-phasetwo"}},"content":"In the ever-evolving landscape of Enterprise SaaS, navigating the complexities of identity and access management (IAM) can be a daunting task. As a startup striving for excellence in user experience and security, choosing the right IAM solution is paramount. Enter Keycloak, a powerful open-source IAM tool that not only meets but exceeds the demands of modern startups.\\n\\n\x3c!--truncate--\x3e\\n\\nThere are a glut of commercial startups that solve some of the core challenges of authentication and authorization. But most of them rely on obscuring their true nature as a _commodity_ as a way of _marketing_ their products as _somehow differentiated_.\\n\\nThe purpose of this series is to dive into the key issues that separate an open source solution like Keycloak from commercial entities like [Auth0](./2024-05-01-alternatives-auth0.md), [Okta](./2024-06-03-alternatives-okta.md), or [WorkOs](./2024-07-22-keycloak-vs-workos.md). This should give a startup engineer or manager ample background to understand the decision, and to cut through the marketing gibberish.\\n\\nThis series will address the following key issues in 4 parts:\\n\\n1.  [Part 1](./2024-10-21-keycloak-for-startups-standards.md): Every commercial offering is an implementation of the same standards.\\n2.  [Part 2](./2024-10-28-keycloak-for-startups-data.md): The ability to control your data is essential, now and in the future.\\n3.  [Part 3](./2024-11-04-keycloak-for-startups-customization.md): Extensibility and customization will always be necessary.\\n4.  [Part 4](./2024-12-02-keycloak-for-startups-cost.md): There is no justification for variable cost for individual features.\\n\\nPlease stay tuned as we release a new section each week! If you would like to try out Keycloak, [sign-up](https://phasetwo.io/dashboard/) for Phase Two\'s free tier and test it out now."},{"id":"keycloak-oidc-spa-phasetwo","metadata":{"permalink":"/blog/keycloak-oidc-spa-phasetwo","source":"@site/blog/2024-10-10-oidc-spa.mdx","title":"Securing Keycloak with OIDC SPA and Phase Two","description":"OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.","date":"2024-10-10T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"oidc_spa","permalink":"/blog/tags/oidc-spa"},{"inline":true,"label":"keycloakify","permalink":"/blog/tags/keycloakify"}],"readingTime":5.335,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Securing Keycloak with OIDC SPA and Phase Two","description":"OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.","slug":"keycloak-oidc-spa-phasetwo","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","keycloak","oidc_spa","keycloakify"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management","permalink":"/blog/keycloak-for-startups-overview"},"nextItem":{"title":"Phase Two and Keycloakify, Making Keycloak Better Together","permalink":"/blog/phasetwo-keycloakify-partnership"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\n<img\\n  src=\\"/blog/oidcspa-logo.svg\\"\\n  style={{ width: \\"150px\\", boxShadow: \\"none\\" }}\\n  alt=\\"OIDC SPA Logo\\"\\n></img>\\n\\nOur pal over at [Keycloakify](https://www.keycloakify.dev/) has been working on creating a simple OpenId Connect (OIDC) library called, [OIDC Spa](https://www.oidc-spa.dev/). As with [Joseph](https://github.com/garronej)\'s usual approach to user friendliness, OIDC SPA simplifies a lot of the integration work than can come with adding an Authentication and Authorization layer to your application. Follow along as we show you how to integrate OIDC SPA with a Phase Two\'s free Keycloak instance.\\n\\n\x3c!--truncate--\x3e\\n\\nWe\'re going to work through an example of how to add OIDC SPA to a React application. If you just want to skip to code, check out our [React example](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs).\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a ReactJS Project\\n\\nAs this is a more interactive project, we\'re going to walk through a bit more integration. We\'ve got a very basic starter template which you can find [here](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter). If you\'d like to see more examples, check out the [oidc-spa repo](https://github.com/keycloakify/oidc-spa/tree/main/examples)\\n\\n1. Clone the [starter repo](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter) and install the OIDC SPA library:\\n\\n```bash\\nnpm install oidc-spa\\n```\\n\\n2. Add an OIDC Provider in `index.tsx`. We\'ll be using the params from the Keycloak instance we set up earlier (update `issuerUri` and `clientId` as needed):\\n\\n```tsx\\nimport { createReactOidc } from \\"oidc-spa/react\\";\\n\\nexport const { OidcProvider, useOidc, getOidc } = createReactOidc({\\n  // NOTE: If you don\'t have the params right away see note below.\\n  issuerUri: \\"https://app.phasetwo.io/auth/realms/p2examples\\",\\n  clientId: \\"reactjs-example\\",\\n  /**\\n   * Vite:  `publicUrl: import.meta.env.BASE_URL`\\n   * CRA:   `publicUrl: process.env.PUBLIC_URL`\\n   * Other: `publicUrl: \\"/\\"` (Usually)\\n   */\\n  publicUrl: process.env.BASE_URL,\\n});\\n```\\n\\nOnce that is added, we can render the App within the `OidcProvider`:\\n\\n```tsx\\nReactDOM.createRoot(document.getElementById(\\"root\\")!).render(\\n  <OidcProvider\\n    // Optional\\n    fallback={<>Checking authentication \u231b\ufe0f</>}\\n  >\\n    <App />\\n  </OidcProvider>\\n);\\n```\\n\\n3. Use the `useOidc` hook to access the OIDC context from `index.tsx` in the `Auth.tsx` file. This will allow you to check if the user is logged in, log them in, log them out, and access the OIDC tokens:\\n\\n```tsx\\nimport { useOidc } from \\"./index\\";\\n\\nconst Auth = () => {\\n  const { isUserLoggedIn, login, logout, oidcTokens } = useOidc();\\n  ...\\n};\\n\\nexport default Auth;\\n```\\n\\nLooking at what comes back, we have a few main items:\\n\\n- `isUserLoggedIn` - A boolean value that tells you if the user is logged in.\\n- `login` - A function that will log the user in.\\n- `logout` - A function that will log the user out.\\n- `oidcTokens` - An object that contains the OIDC tokens. From this we can grab the `decodedIdToken` and to see information about the user. There are other tokens within this like `accessToken`, `refreshToken`, and `idToken`, which can be used for various purposes.\\n\\n:::info\\nOne of the nicest things that OIDC SPA does well is handling your token refresh for you. This is a common issue with OIDC libraries and OIDC SPA has a nice solution.\\n:::\\n\\nLet\'s move forward with building out this component and adding some logic to handle the user\'s authentication state. Some of the mark is purely for layout and styling, but the logic is what we\'re after:\\n\\n- `oidcTokens.decodedIdToken?.email as string` we type this as since the `decodedIdToken` isn\'t defined. If you want to pretype the `decodedIdToken` in the `createReactOidc` function, do so by providing a `decodedIdTokenSchema` key and optionally validate it with [zod](https://zod.dev/).\\n\\n```tsx\\nlet content;\\n\\nif (isUserLoggedIn) {\\n  content = (\\n    <div>\\n      <div className=\\"mb-2 text-p2blue-700 text-2xl\\">Authenticated</div>\\n      <div className=\\"mb-6 text-p2blue-700 text-md\\">\\n        <div>{oidcTokens.decodedIdToken?.email as string}</div>\\n        <div>{oidcTokens.decodedIdToken?.sub as string}</div>\\n      </div>\\n      <button\\n        className=\\"rounded-md bg-indigo-500 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500\\"\\n        onClick={() => logout({ redirectTo: \\"current page\\" })}\\n      >\\n        Log out\\n      </button>\\n      <Token />\\n    </div>\\n  );\\n} else {\\n  content = (\\n    <div>\\n      <div className=\\"mb-6 text-p2blue-700 text-2xl\\">Not authenticated.</div>\\n      <button\\n        className=\\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\\"\\n        onClick={() => login({ doesCurrentHrefRequiresAuth: true })}\\n      >\\n        Log in\\n      </button>\\n    </div>\\n  );\\n}\\n\\nreturn (\\n  <div>\\n    <div className=\\"text-xl pb-8 italic\\">Your current status is:</div>\\n    {content}\\n  </div>\\n);\\n```\\n\\n4. Run the application:\\n\\n```bash\\nnpm run start\\n```\\n\\n5. Test the login and logout functionality. You should see the user\'s email and sub displayed when logged in. If you\'re using the Keycloak instance we set up earlier, you can use the non-admin user we created.\\n\\n### Bonus\\n\\nA very common use case is security API calls. An example `api.ts` file below shows how you would intercept all requests and append the `accessToken` to the headers.\\n\\nThis example is provided with Axios by [Keycloakify](https://docs.oidc-spa.dev/documentation/web-api). We\'ll implement it in `fetch` as an alternative.\\n\\n```tsx\\nimport { getOidc } from \\"oidc\\";\\n\\ntype Api = {\\n  getTodos: () => Promise<{ id: number; title: string }[]>;\\n  addTodo: (todo: { title: string }) => Promise<void>;\\n};\\n\\nconst baseURL = import.meta.env.API_URL;\\n\\nconst fetchWithAuth = async (url: string, options: RequestInit = {}) => {\\n  const oidc = await getOidc();\\n\\n  if (!oidc.isUserLoggedIn) {\\n    throw new Error(\\n      \\"We made a logic error: The user should be logged in at this point\\"\\n    );\\n  }\\n\\n  const headers = {\\n    ...options.headers,\\n    Authorization: `Bearer ${oidc.getTokens().accessToken}`,\\n    \\"Content-Type\\": \\"application/json\\",\\n  };\\n\\n  const response = await fetch(`${baseURL}${url}`, { ...options, headers });\\n\\n  if (!response.ok) {\\n    throw new Error(`HTTP error! status: ${response.status}`);\\n  }\\n\\n  return response.json();\\n};\\n\\nexport const api: Api = {\\n  getTodos: () => fetchWithAuth(\\"/todo\\"),\\n  addTodo: (todo) =>\\n    fetchWithAuth(\\"/todo\\", {\\n      method: \\"POST\\",\\n      body: JSON.stringify(todo),\\n    }),\\n};\\n```\\n\\nWe aren\'t setting this actual backend up, but you can see how you would use the `api.ts` file to make authenticated requests.\\n\\n## Conclusion\\n\\nThis only covers the most very basic installation and usage of this library. There are a lot of different ways you leverage the tool and we invite you to investigate further. Some of which are:\\n\\n- Auto Logout (due to inactivity)\\n- Error Management (when login fails)\\n- Globally enforced authentication (every route requires authentication)\\n- Usage with routing libraries\\n\\nWe\'d love to hear how you\'re using OIDC SPA in your applications. If you have any questions or need help, feel free to reach out to us at [Phase Two](https://phasetwo.io/contact/). We\'re always happy to help.\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"phasetwo-keycloakify-partnership","metadata":{"permalink":"/blog/phasetwo-keycloakify-partnership","source":"@site/blog/2024-10-09-keycloakify.mdx","title":"Phase Two and Keycloakify, Making Keycloak Better Together","description":"Phase Two and Keycloakify deepen their relationship with sponsorship and adding our extension templates.","date":"2024-10-09T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"keycloak themes","permalink":"/blog/tags/keycloak-themes"},{"inline":true,"label":"partnership","permalink":"/blog/tags/partnership"},{"inline":true,"label":"keycloakify","permalink":"/blog/tags/keycloakify"}],"readingTime":1.25,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Phase Two and Keycloakify, Making Keycloak Better Together","description":"Phase Two and Keycloakify deepen their relationship with sponsorship and adding our extension templates.","slug":"phasetwo-keycloakify-partnership","authors":"phasetwo","tags":["phase_two","open_source","keycloak","keycloak themes","partnership","keycloakify"]},"unlisted":false,"prevItem":{"title":"Securing Keycloak with OIDC SPA and Phase Two","permalink":"/blog/keycloak-oidc-spa-phasetwo"},"nextItem":{"title":"Presentation on Extending Keycloak for All Your Identity Use Cases","permalink":"/blog/keycloak-extensions-presentation"}},"content":"<div id=\\"illustrationId\\" style={{ position: \\"relative\\" }}>\\n  <img\\n    src=\\"/blog/keycloakify/keycloakify-logo-hero-moving-DW_SYkPC.png\\"\\n    alt=\\"Rotating react logo\\"\\n    style={{\\n      width: \\"200px\\",\\n      boxShadow: \\"none\\",\\n      animation: \\"rotate 20s linear infinite\\",\\n    }}\\n  ></img>\\n  <img\\n    src=\\"/blog/keycloakify/keycloakify-logo-hero-still-NiNHhekl.png\\"\\n    alt=\\"keyhole\\"\\n    style={{\\n      width: \\"200px\\",\\n      boxShadow: \\"none\\",\\n      position: \\"absolute\\",\\n      top: \\"0\\",\\n      left: \\"0\\",\\n    }}\\n  ></img>\\n</div>\\n\\nPhase Two has long been big fans of [Keycloakify](https://www.keycloakify.dev/). The work being done by [Joseph Garrone](https://github.com/garronej) is in our opinion some of the best user-focused work in the Keycloak community. Keycloakify brings the ability to theme the Keycloak frontend applications: Login, Account, Admin(coming) using modern toolsets like React or Angular and theming systems like Tailwind or Material-UI. Keycloakify allows you to build quickly and deploy themes to your Keycloak installation in a manner that the existing Keycloak toolset (ftl templates) does not.\\n\\n\x3c!-- truncate --\x3e\\n\\nMany of Phase Two customers use Keycloakify and because we value it as an important piece of the Keycloak community, Phase Two has officially entered into a sponsorship agreement with Keycloakify.\\n\\nTo make using our [extensions](https://github.com/p2-inc#our-extensions-) easier with Keycloakify, we\'ve started with porting our [Magic Link](https://phasetwo.io/blog/set-up-magic-links/) [extension](https://github.com/p2-inc/keycloak-magic-link) to Keycloakify templates. At present, those templates can be found in Phase Two\'s forked [Keycloakify Starter](https://github.com/p2-inc/keycloakify-starter/tree/p2/magic-link-extension-templates/src/login/pages). We are actively working on adding them to the main line of templates which can be customized directly from the Keycloakify CLI. Until that time, follow the [instructions](https://docs.keycloakify.dev/styling-custom-extension-page) from Keycloakify to integrate those templates.\\n\\nWe\'ve also joined the Keycloakify [Discord](https://discord.gg/mJdYJSdcm4) for quick and direct communication.\\n\\nJoin us and the Keycloakify [community](https://discord.gg/mJdYJSdcm4) to build themes and improve the experience of working with Keycloak."},{"id":"keycloak-extensions-presentation","metadata":{"permalink":"/blog/keycloak-extensions-presentation","source":"@site/blog/2024-09-27-keycloak-extensions-presentation.md","title":"Presentation on Extending Keycloak for All Your Identity Use Cases","description":"A detailed introduction to building Keycloak extensions. This talk presents an overview of Keycloak\u2019s commonly used extension mechanisms, best practices for development and testing of extensions, and several exemplary, real-world examples. Finally, it puts it all together with a deep-dive into one such extension that is available in the Phase Two keycloak-events extension.","date":"2024-09-27T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"extensions","permalink":"/blog/tags/extensions"},{"inline":true,"label":"events","permalink":"/blog/tags/events"},{"inline":true,"label":"webhooks","permalink":"/blog/tags/webhooks"}],"readingTime":0.505,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-extensions-presentation","title":"Presentation on Extending Keycloak for All Your Identity Use Cases","description":"A detailed introduction to building Keycloak extensions. This talk presents an overview of Keycloak\u2019s commonly used extension mechanisms, best practices for development and testing of extensions, and several exemplary, real-world examples. Finally, it puts it all together with a deep-dive into one such extension that is available in the Phase Two keycloak-events extension.","authors":"phasetwo","tags":["release","keycloak","phase_two","extensions","events","webhooks"]},"unlisted":false,"prevItem":{"title":"Phase Two and Keycloakify, Making Keycloak Better Together","permalink":"/blog/phasetwo-keycloakify-partnership"},"nextItem":{"title":"Keycloak vs. FrontEgg, an Open-Source Alternative","permalink":"/blog/keycloak-vs-frontegg-open-source-alternative"}},"content":"We recently gave a talk at the [Keyconf24](https://keyconf.dev/) conference in Vienna on how to extend Keycloak using its extensible SPI structure. In addition to showing what is possible and how to get started in building extensions, we also use our [Events and Webhooks](https://github.com/p2-inc/keycloak-events) extension as a real-world example. The hosts of the conference have posted the [video of the talk](https://www.youtube.com/watch?v=t8u-QO02Qn8?si=OH6V1w564UysihSu) on Youtube.\\n\\n\x3c!--truncate--\x3e\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/t8u-QO02Qn8?si=OH6V1w564UysihSu\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nTake a look, and try it out today with our [free hosted Keycloak](https://phasetwo.io/dashboard/) instances that run all of our [open source Keycloak extensions](https://github.com/p2-inc)."},{"id":"keycloak-vs-frontegg-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-frontegg-open-source-alternative","source":"@site/blog/2024-08-10-keycloak-vs-frontegg.md","title":"Keycloak vs. FrontEgg, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus FrontEgg and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","date":"2024-08-10T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"frontegg","permalink":"/blog/tags/frontegg"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":5.54,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. FrontEgg, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus FrontEgg and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-frontegg-open-source-alternative","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","frontegg","keycloak"]},"unlisted":false,"prevItem":{"title":"Presentation on Extending Keycloak for All Your Identity Use Cases","permalink":"/blog/keycloak-extensions-presentation"},"nextItem":{"title":"Keycloak vs. PingIdentity, an Open-Source Alternative","permalink":"/blog/keycloak-vs-PingIdentity-open-source-alternative"}},"content":"Keycloak and Frontegg are two prominent solutions in the identity and access management (IAM) space, each serving distinct needs. Keycloak is an open-source IAM solution with over eight years of development, known for its scalability and deep customization options, allowing organizations full control over user identity management. On the other hand, Frontegg is a cloud-native platform designed for quick deployment and integration, specifically tailored for SaaS applications, offering a user-friendly management experience. In this blog post, we will compare Keycloak and Frontegg based on cost structure, deployment options, customization, scalability, functionality, and support.\\n\\n\x3c!--truncate--\x3e\\n\\n### Cost Structure\\n\\n**Keycloak**\\nAs an open-source solution, Keycloak is free to use, making it an attractive option for organizations of all sizes. While there are no licensing fees, organizations need to consider hosting costs and the resources required for system management. This cost model makes Keycloak particularly appealing for startups and enterprises that can manage their own infrastructure effectively.\\n\\n**Frontegg**\\nFrontegg operates on a subscription-based pricing model, starting with a free 30-day trial that unlocks all features. Following the trial, costs begin at $499 per month for the Growth Plan. While it simplifies IAM implementation and reduces developmental burden, organizations must weigh the recurring costs against the value gained from Frontegg\'s streamlined user management capabilities.  \\nFrontegg provides a nice \u201cfree forever\u201d tier that gives you enough to play with the platform. You would not want to use this for a production application with serious user covenants. To move upward, it is based on features and requires sales contact to assess pricing. While the next tiers allow for \u201cgrowth to unlimited users\u201d, pricing is heavily dependent on that usage.\\n\\n**Winner**\\n\\nKeycloak stands out as a more economically advantageous option, particularly for organizations with the technical capability to manage their own infrastructure. Leverage [Phase Two\'s Free Hosting Tier](https://phasetwo.io/hosting/) to test and integrate Authorization and Authentication into an application(s).\\n\\n### Deployment Options\\n\\n**Keycloak**\\nKeycloak offers flexibility in deployment, supporting both on-premises and cloud-based solutions. This capability allows organizations to maintain control over their identity management infrastructure, making it suitable for varying operational requirements and compliance needs.\\n\\n**Frontegg**\\nFrontegg is primarily a cloud-based solution designed for rapid deployment, offering a plug-and-play experience that facilitates quick integration into existing applications. While it doesn\u2019t provide robust on-premises capabilities, it excels in cloud environments, catering particularly well to SaaS platforms aiming for fast time-to-market.\\n\\n**Winner**\\n\\nKeycloak offers superior deployment flexibility, accommodating both complex cloud and on-premises infrastructures. Frontegg, however, excels in ease of use for cloud-based deployments.\\n\\n### Customization and Branding\\n\\n**Keycloak**\\nKeycloak is renowned for its extensive customization options, enabling organizations to tailor authentication flows, user interfaces, and security protocols to meet their specific needs. Its open-source nature allows for modifications that avoid vendor lock-in, facilitating a user experience that matches organizational needs. While branding and theming Keycloak is possible, the current ability to do so is not straightforward. Phase Two has made this easier through extending the Keycloak Admin UI ([https://phasetwo.io/docs/getting-started/customizing-ui/](https://phasetwo.io/docs/getting-started/customizing-ui/)) which is available in all its [hosted](https://phasetwo.io/hosting/) offerings.\\n\\n**Frontegg**\\nFrontegg also provides customization capabilities but focuses on delivering a user-friendly interface that prioritizes speed and accessibility. It allows basic branding and minor adjustments but may not match the depth of customization available in Keycloak. The branding tool built by Frontegg is well done and prioritizes the user experience.\\n\\n**Winner**\\n\\nKeycloak takes the lead in customization and flexibility, providing organizations more granular control over user interfaces and workflows. While Frontegg leads with providing the a strong user experience for branding customization.\\n\\n### Scalability and Performance\\n\\n**Keycloak**\\nKeycloak is designed for high scalability, accommodating large user bases through horizontal scaling and clustered deployments. This architecture makes it suitable for extensive enterprise environments that require robust performance under varying loads.\\n\\n**Frontegg**\\nFrontegg is also built with scalability in mind, catering to growing SaaS applications through its multi-tenant architecture. While it\'s designed to manage increasing user volumes effectively, its performance may not yet match Keycloak\'s capabilities in extremely large-scale environments.\\n\\n**Winner**\\n\\nKeycloak is the preferred option for larger applications requiring robust scalability. However, Frontegg is well-suited for rapidly growing applications, especially in the SaaS space.\\n\\n### Functionality and Flexibility\\n\\n**Keycloak**:Keycloak provides a comprehensive suite of IAM features, including various authentication methods, fine-grained access control, and advanced identity federation capabilities. Its versatility in integrating with existing infrastructures makes Keycloak a powerful solution for complex IAM scenarios.\\n\\n**Frontegg**\\nFrontegg focuses on user management, facilitating seamless authentication and role management. Its end-to-end user management platform integrates easily with existing applications, offering a robust alternative for companies seeking quick implementation without extensive customization.\\n\\n**Winner**\\n\\nKeycloak leads in functionality and versatility, offering a broader range of advanced IAM features, making it a better choice for diverse security needs. Phase Two can provide [expert enterprise help](https://phasetwo.io/support/), custom development, and migrations.\\n\\n### Integration Capabilities\\n\\n**Keycloak**\\nKeycloak\u2019s extensive integration capabilities include support for various identity providers and protocols like SAML, OAuth 2.0, and OpenID Connect. This allows organizations to leverage existing systems while enabling seamless authentication across applications.\\n\\n**Frontegg**\\nFrontegg also supports a wide range of integrations but primarily focuses on simplifying connections for SaaS applications. Its plug-and-play approach makes it easy to incorporate into existing products but may lack the depth of integration options available in Keycloak.\\n\\n**Winner**\\n\\nKeycloak emerges as the more versatile option, providing greater flexibility for organizations with complex integration requirements. Frontegg offers a great and easy interface to integrate with things they have support for.\\n\\n### Community and Support\\n\\n**Keycloak**\\nKeycloak benefits from a robust open-source community, with extensive documentation, forums, and active user contributions. Organizations can rely on community-driven support and resources to troubleshoot issues and share best practices.\\n\\n**Frontegg**\\nFrontegg provides dedicated customer support along with a library of resources. While still relatively new, it focuses on delivering good customer experiences and support for its users. Much of Frontegg\u2019s Enterprise tier is focused on providing support.\\n\\n**Winner**\\n\\nKeycloak\'s established community offers a good way to get answers and help. Frontegg\u2019s support channels are only available with the correct license. Phase Two helps to fill the gap between community help and Enterprise support ([https://phasetwo.io/support/](https://phasetwo.io/support/)).\\n\\n### How Should I Choose IAMs?\\n\\nChoosing the right IAM solution depends on your organization\'s specific needs and strategic goals. Keycloak is ideal for those seeking a customizable, open-source platform with extensive features and deployment flexibility. Frontegg, with its focus on rapid implementation and simplicity for SaaS applications, is a compelling option for tech companies looking to reduce development time and overhead.\\n\\nIf you\'re looking to explore Keycloak further or have questions about [integrating](https://phasetwo.io/support/migrate-to-keycloak/) it into your organization, please [reach out for assistance](mailto:sales@phasetwo.io). The right IAM solution can help you secure your digital environment and streamline user management effectively."},{"id":"keycloak-vs-PingIdentity-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-PingIdentity-open-source-alternative","source":"@site/blog/2024-08-05-keycloak-vs-pingidentity.md","title":"Keycloak vs. PingIdentity, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus PingIdentity and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","date":"2024-08-05T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"pingidentity","permalink":"/blog/tags/pingidentity"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":4.44,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. PingIdentity, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus PingIdentity and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-PingIdentity-open-source-alternative","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","pingidentity","keycloak"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. FrontEgg, an Open-Source Alternative","permalink":"/blog/keycloak-vs-frontegg-open-source-alternative"},"nextItem":{"title":"Securing Angular Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-angular"}},"content":"Exploring Keycloak as an alternative to PingIdentity for Authentication Solutions\\n\\nIn the evolving landscape of identity and access management (IAM), organizations face critical decisions regarding the tools that will best meet their needs. Keycloak and [Ping Identity](https://www.pingidentity.com/) are two noteworthy solutions, each exhibiting unique features that cater to different organizational requirements. This blog provides a detailed comparison of open-source Keycloak and the commercial offering of Ping Identity across essential aspects of IAM solutions.\\n\\n\x3c!--truncate--\x3e\\n\\n### Deployment Model\\n\\n**Keycloak:**\\nKeycloak is an open-source IAM solution that can be deployed both [on-prem](https://phasetwo.io/product/onprem/) and in cloud environments. This flexibility allows organizations to choose their preferred hosting option while maintaining control over their identity management infrastructure. Its ability to adapt quickly to new standards makes it particularly suitable for agile development environments.\\n\\n**PingIdentity:**\\nPing Identity offers a hybrid deployment model that combines both cloud-based and on-premises options. This versatility is particularly beneficial for large enterprises where regulatory compliance dictates specific control over identity services.\\n\\n**Winner**\\n\\nTie. Both solutions offer strong options for those seeking to deploy the way they want to and need to. Both provide enterprise-centric hybrid options that accommodate complex infrastructure needs.\\n\\n### Customization and Flexibility\\n\\n**Keycloak:**\\nKeycloak shines with its extensive customization features, allowing developers to modify everything from login pages to role-based access controls. Being open-source software, organizations have the freedom to make adjustments at any time without vendor lock-in, making it a powerful and cost-effective solution. It can be used as a standalone solution or integrated as an element of a broader IT infrastructure.\\n\\n**PingIdentity:**\\nPing Identity also offers customization capabilities but often demands more technical effort to implement tailored solutions. While it is configurable, achieving significant customizations may be more challenging compared to Keycloak.\\n\\n**Winner**\\n\\nKeycloak wins for its superior flexibility and ease of customization, particularly appealing to developers.\\n\\n### User Experience and Ease of Use\\n\\n**Keycloak:**\\nKeycloak is designed with usability in mind, featuring an intuitive interface and straightforward setup process. Its fast, agile nature allows it to adapt quickly to changing application landscapes, ensuring accessibility for users. It supports Single Sign-On (SSO), identity brokering, and various protocols (OAuth2, OpenID Connect, SAML), streamlining user experience.\\n\\n**PingIdentity:**\\nPing Identity prioritizes a comprehensive user experience targeting both technical and non-technical users. Although it features a polished interface, the initial setup can be complex, resulting in a steeper learning curve for administrators.\\n\\n**Winner**\\n\\nKeycloak edges out in user-friendliness during initial setup and usability.\\n\\n### Scalability and Performance\\n\\n**Keycloak:**\\nWith its cloud-native adaptation and support for high-volume user bases, Keycloak scales effectively to meet organizational needs. However, the management of a scaled Keycloak system can require significant time and resources without [proper enterprise support](https://phasetwo.io/support/).\\n\\n**PingIdentity:**\\nPing Identity is designed for large-scale environments with robust scalability features, ensuring seamless performance under heavy loads, making it particularly suited for large organizations.\\n\\n**Winner**\\n\\nPing Identity excels in scalability and performance, proving its capability to manage large-scale authentication requests. However, this comes at a larger cost which could be offset by taking on the management of Keycloak.\\n\\n### Pricing Model\\n\\n**Keycloak:**\\nBeing open-source software, Keycloak has no licensing fees, making it highly cost-effective. However, organizations should consider potential indirect costs related to deployment and system management.\\n\\n**PingIdentity:**\\nPing Identity operates on a traditional licensing model based on user count and features, which can lead to higher costs, particularly for larger deployments.\\n\\n**Winner**\\n\\nKeycloak is the clear winner for pricing, offering a more budget-friendly option. Coupled with a cost-conscious hosting provider, this can save a corporation literal millions of dollars over the course of an implementation.\\n\\n### Integration Ecosystem\\n\\n**Keycloak:**\\nKeycloak provides a strong API and powerful Admin portal, making it compatible with a wide range of frameworks like Spring Boot, Django, React, and more. Its supportive community extensions with integrations and continuous improvements, enhancing its adaptability.\\n\\n**PingIdentity:**\\nPing Identity features a curated integration ecosystem focused on enterprise-level applications, providing documentation and support for integrations, but may lack the range of community-driven options available with Keycloak.\\n\\n**Winner**\\nKeycloak takes the lead for its extensive integration options and supportive community. Leverage [Phase Two\'s Free Hosting Tier](https://phasetwo.io/hosting/) to test and integrate Authorization and Authentication into an application(s).\\n\\n### Advanced Features\\n\\n**Keycloak:**\\nKeycloak supports fine-grained authorization and customizable themes, making it a flexible and cost-effective solution for diverse security needs. Its rapid adaptability to new technologies ensures organizations can stay relevant in a changing landscape.\\n\\n**PingIdentity:**\\nPing Identity excels with advanced features such as fraud detection, identity verification, and robust orchestration capabilities, positioning it as a strong choice for larger enterprises requiring comprehensive security and compliance.\\n\\n**Winner**\\nBoth Keycloak and Ping Identity offer valuable advanced features, with Keycloak providing flexibility for diverse environments, while Ping Identity delivers robust security measures suitable for complex enterprise needs.\\n\\n### Which one is best for me?\\n\\nBoth Keycloak and Ping Identity provide essential IAM solutions, but their strengths cater to different organizational needs. Keycloak excels in customization, user experience, cost-effectiveness, and flexibility, making it ideal for organizations prioritizing quick adaptation and flexibility. In contrast, Ping Identity stands out with its hybrid deployment capabilities, scalability, and advanced security functionalities, positioning it as a strong choice for larger enterprises. Ultimately, the decision should align with the specific requirements, resources, and strategic goals of your organization.\\n\\nIf you\u2019re looking to [migrate to Keycloak](https://phasetwo.io/support/migrate-to-keycloak/), or have questions about Phase Two\u2019s [enterprise support](https://phasetwo.io/support/), please [contact us](https://scheduler.zoom.us/phasetwo)."},{"id":"instant-user-management-and-sso-for-angular","metadata":{"permalink":"/blog/instant-user-management-and-sso-for-angular","source":"@site/blog/2024-08-01-secure-angular.mdx","title":"Securing Angular Apps with Keycloak","description":"Learn how to quickly secure a Angular application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2024-08-01T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"angular","permalink":"/blog/tags/angular"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":0.915,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-management-and-sso-for-angular","title":"Securing Angular Apps with Keycloak","description":"Learn how to quickly secure a Angular application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","angular","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. PingIdentity, an Open-Source Alternative","permalink":"/blog/keycloak-vs-PingIdentity-open-source-alternative"},"nextItem":{"title":"Keycloak vs. OneLogin, an Open-Source Alternative","permalink":"/blog/keycloak-vs-onelogin-open-source-alternative"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport Angular from \\"/templates/frameworks/_angular.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly secure a Angular application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Angular example](https://github.com/p2-inc/examples/tree/main/frameworks/angular).\\n\\nIf you want to see a live example, visit the [Phase Two Angular example](https://phasetwo-angular-example.vercel.app).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Angular Project\\n\\n<Angular />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"keycloak-vs-onelogin-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-onelogin-open-source-alternative","source":"@site/blog/2024-07-31-keycloak-vs-onelogin.md","title":"Keycloak vs. OneLogin, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus OneLogin and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","date":"2024-07-31T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"onelogin","permalink":"/blog/tags/onelogin"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":4.31,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. OneLogin, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus OneLogin and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-onelogin-open-source-alternative","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","onelogin","keycloak"]},"unlisted":false,"prevItem":{"title":"Securing Angular Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-angular"},"nextItem":{"title":"Keycloak vs. WorkOS, an Open-Source Alternative","permalink":"/blog/keycloak-vs-workos-open-source-alternative"}},"content":"Exploring Keycloak as an alternative to OneLogin for Authentication Solutions\\n\\nKeycloak and [OneLogin](https://www.onelogin.com) (by One Identity) are both important players in the identity and access management (IAM) space, each catering to different organizational needs. Keycloak is an open-source solution with over eight years of active development, known for its scalability and customization. OneLogin, on the other hand, is a commercial product emphasizing user-friendly interfaces and extensive integration options. This article compares Keycloak and OneLogin based on cost, deployment, customization, scalability, functionality, integration, and support.\\n\\n\x3c!--truncate--\x3e\\n\\n### Cost Structure\\n\\n**Keycloak:**\\nAs an open-source platform, Keycloak is free to use, making it a cost-effective option for businesses of all sizes. While there are no licensing fees, users must be prepared to manage their own hosting and infrastructure, which can incur costs depending on resource needs.\\n\\n**OneLogin:**\\nOneLogin operates on a subscription model, with pricing starting at $2 per month per user for its basic services. Advanced features, such as multi-factor authentication (MFA), require higher-tier licenses, which can lead to increased costs, particularly for large enterprises with many users requiring advanced security features. Further pricing is opaque and requires engaging OneLogin sales.\\n\\n**Winner**\\n\\nKeycloak is more economically advantageous and transparent, particularly for organizations equipped to manage their own hosting. Leverage Phase Two\'s [Free Hosting](https://phasetwo.io/hosting/) Tier to test and integrate Authorization and Authentication into an application(s).\\n\\n### Deployment and Maintenance\\n\\n**Keycloak:**\\nKeycloak supports on-premises and private cloud deployments. Organizations have full control over configurations, but they must also bear the responsibility of maintenance and updates.\\n\\n**OneLogin:**\\nOneLogin is primarily a cloud-based solution but also provides on-premises options. It is managed by the vendor, meaning organizations benefit from automatic updates and less internal maintenance.\\n\\n**Winner**\\n\\nOneLogin simplifies deployment and reduces maintenance tasks for IT teams.\\n\\n### Customization and Branding\\n\\n**Keycloak:**\\nKeycloak allows extensive customization, enabling organizations to tailor authentication workflows and user interfaces according to specific needs. When unifying login from multiple systems to a single one, that means Keycloak and adapt and support as necessary. However, this level of customization may require more technical expertise.\\n\\n**OneLogin:**\\nWhile OneLogin offers a customizable interface, its options are more limited compared to Keycloak. It focuses on providing a unified experience without deep customization. Specific business use-cases may not be supported.\\n\\n**Winner**\\n\\nKeycloak wins in customization and flexibility; OneLogin provides some simplicity without the ability to adapt to specific needs.\\n\\n### Scalability and Performance\\n\\n**Keycloak:**\\nKeycloak is designed to scale efficiently, accommodating large user bases through horizontal scaling and clustered deployments, making it suitable for extensive enterprise environments.\\n\\n**OneLogin:**\\nAs a cloud solution, OneLogin is also scalable, but is typically geared towards medium-sized enterprises. It can handle multiple applications but may not perform optimally under very high user loads.\\n\\n**Winner**\\n\\nBoth will likely be able to scale, but Keycloak is the better choice for large-scale applications requiring high concurrency and user sessions.\\n\\n### Functionality and Flexibility\\n\\n**Keycloak:**\\nKeycloak provides a comprehensive suite of features, including diverse authentication methods, fine-grained access control, and strong identity federation capabilities (OpenID Connect, OAuth 2.0, SAML 2.0). It allows for deeper integration with existing systems.\\n\\n**OneLogin:**\\nOneLogin is built using Ruby on Rails and includes essential features such as SSO and MFA, using artificial intelligence to assess user risk scores, enhancing security functionality. However, it may not match Keycloak in offering a wide array of advanced features for complex IAM scenarios.\\n\\n**Winner**\\n\\nKeycloak holds an advantage with its broader range of functionalities and flexibility of integration.\\n\\n### Integration Capabilities\\n\\n**Keycloak:**\\nKeycloak supports integration with various Identity Providers and protocols, enabling flexible authentication across systems. It also has built-in support for many Social Identity Providers, like Google, Twitter, Facebook, Stack Overflow. These can be configured in an advanced manner.\\n\\n**OneLogin:**\\nOneLogin features a well-developed library of pre-built integrations for third-party applications, providing a straightforward way to manage user access across different systems. It also integrates with HR systems and supports directory integrations, which can be particularly useful for SMEs relying on a variety of SaaS applications.\\n\\n**Winner**\\n\\nThe choice depends on specific needs; OneLogin is easier for basic integrations, while Keycloak offers greater versatility for complex requirements.\\n\\n### Community and Support\\n\\n**Keycloak:**\\n[Keycloak](https://github.com/keycloak) has a supportive open-source community, with extensive documentation and user forums for troubleshooting and guidance. Phase Two offers [enterprise support](https://phasetwo.io/support/) for hosted and on-prem customers, or those with their own Keycloak deployment.\\n\\n**OneLogin:**\\nOneLogin provides dedicated customer support, along with comprehensive documentation and professional services for additional assistance.\\n\\n**Winner**\\n\\nKeycloak\u2019s community offers robust support for users, while OneLogin provides more direct, vendor-driven help.\\n\\n### Which one is best for me?\\n\\nWhen selecting an IAM solution, it\u2019s essential to evaluate your organization\u2019s specific needs. Keycloak is ideal for those seeking an open-source, highly customizable platform that can scale to meet complex requirements. In contrast, OneLogin is well-suited for enterprises looking for an easy-to-use, managed service with a focus on integrations. As one\u2019s implementation grows in size, the cost may become too high to entertain.\\n\\nWorking with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.\\n\\nIf you\u2019re looking to [migrate to Keycloak](https://phasetwo.io/support/migrate-to-keycloak/), or have questions about Phase Two\u2019s [enterprise support](https://phasetwo.io/support/), please [contact us](https://scheduler.zoom.us/phasetwo)."},{"id":"keycloak-vs-workos-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-workos-open-source-alternative","source":"@site/blog/2024-07-22-keycloak-vs-workos.md","title":"Keycloak vs. WorkOS, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus WorkOS and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","date":"2024-07-22T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"workos","permalink":"/blog/tags/workos"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":6.82,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. WorkOS, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus WorkOS and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-workos-open-source-alternative","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","workos","keycloak"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. OneLogin, an Open-Source Alternative","permalink":"/blog/keycloak-vs-onelogin-open-source-alternative"},"nextItem":{"title":"Phase Two Organizations now support shared Identity Providers (IdPs)","permalink":"/blog/phase-two-organizations-shared-idps"}},"content":"Exploring Keycloak as an Alternative to WorkOS for Authentication Solutions\\n\\nKeycloak and WorkOS are both identity and access management (IAM) solutions that offer various features for authentication, authorization, and user management. While they serve similar purposes, there are key differences between the two platforms that make them unique and suitable for different use cases. Keycloak is an open source platform under active development for over 8 years and known for its scalability and customization options. WorkOS is a closed-source platform that can quickly integrate SSO to an application. In this blog post, we\'ll explore the key differences between Keycloak and WorkOS, focusing on factors such as cost of ownership, scalability, deployments, and maintenance.\\n\\n\x3c!--truncate--\x3e\\n\\n### Cost of Ownership\\n\\n**Keycloak:**\\nKeycloak is an open-source solution and is available for free, making it a cost-effective choice for startups, small businesses, and enterprises alike. It allows organizations to save on licensing fees and scale without worrying about escalating SSO, authentication, and other costs. It does, however, require infrastructure to host and run the application, which can run up costs if a business does not have the proper internal resources or external support. This provides a more predictable cost model when bringing together multiple applications, knowing that as additional connections are created, costs will not increase. The biggest factor in cost becomes the scale of needed infrastructure.\\n\\n**WorkOS:**\\nWorkOS operates on a subscription-based model, where pricing is tied to the number of monthly active users. While the first million users are included (at time of publishing), WorkOs charges for Custom domains, SSO connections, SCIM, and Audit logs. The more enterprise customers you have, the more your costs will grow. This approach allows customers to scale their identity management solution as needed, while also gaining access to additional features and support based on their chosen plan. Organizations must keep in mind that with every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket, becoming a large financial piece of the overall IT spend.\\n\\n**Winner**\\n\\nWith the proper hosting solution, Keycloak is a far more cost-effective choice. Since cost isn\'t driven by features or users, the ongoing cost is fixed, enabling organizations to allocate funds to other resources. Leverage [Phase Two\'s Free Hosting Tier](https://phasetwo.io/hosting/) to test and integrate Authorization and Authentication into an application(s).\\n\\n### Deployment and Maintenance\\n\\n**Keycloak:**\\nKeycloak is a solution that can be deployed on-premises or in a private cloud. It provides complete control over the infrastructure and allows customization and integration with existing systems. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.\\n\\nDue to Keycloak\u2019s self-hosted nature, however, organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure.\\n\\n**WorkOS:**\\nWorkOS is a cloud-based identity platform that is hosted and managed by WorkOS. It offers a simpler deployment process as there is no need to set up or maintain any infrastructure.\\nOrganizations benefit from reduced internal IT burden, as WorkOS handles updates, security patches, and system maintenance.\\n\\n**Winner**\\n\\nWorkOS provides a more hassle-free identity management experience by offloading infrastructure responsibilities through a fully managed service.\\n\\n### Customization and Branding\\n\\n**Keycloak:**\\nKeycloak offers unparalleled customization and extensibility -- from authentication flows and user federation to role-based access control (RBAC) and fine-grained permission -- enabling organizations to tailor the user experience, login screens, and authentication process to their specific needs. This level of customization requires working in and gaining knowledge of the capabilities of Keycloak.\\n\\n**WorkOS:**\\nWorkOS on the other hand, offers limited customization options and focuses more on providing a unified user experience across different identity providers. We certainly tip our hats to WorkOS for the fantastic job they\u2019ve done at creating a wonderful user experience from a design and user experience perspective.\\n\\n**Winner**\\n\\nKeycloak by a nose. Keycloak offers complete control over the look and feel of the authentication and authorization process. However, WorkOS has done a strong job at simplifying and constraining the world for quick implementation.\\n\\n### Scalability and Performance\\n\\n**Keycloak:**\\nWith its robust architecture, Keycloak is designed to handle large-scale user bases, making it an ideal choice for enterprises. It can be easily scaled horizontally by adding more instances or running in a clustered mode, ensuring high performance and reliability. Keycloak offers a great platform to unify on for companies that find themselves with a burgeoning number of applications that have each gone their own way of IAM implementation.\\n\\n**WorkOS:**\\nWhile WorkOS offers scalable infrastructure, it\'s better suited for smaller to medium-sized applications with moderate to high traffic volumes. Its architecture is optimized for efficient performance, but may not be as well-equipped to handle extremely high volumes of user traffic or a ballooning of connected enterprises. It\u2019s better at working with a specific application rather than connecting multiple applications.\\n\\n**Winner**\\n\\nDepends. Keycloak is a strong contender for large-scale applications looking to scale, but WorkOS may deliver stronger performance for small-mediums sized apps.\\n\\n### Functionality and Flexibility\\n\\n**Keycloak:**\\nKeycloak offers a comprehensive suite of features to meet the needs of modern apps. It provides secure authentication methods, including username/password, social logins, and MFA, as well as fine-grained authorization controls through RBAC and ABAC. Keycloak excels in identity federation with support for SAML and OpenID Connect, and its SSO feature offers a seamless user experience across apps. It also offers robust user management capabilities, customization options, self-registration, and active community support. For any functionality that might be missing, extensions to Keycloak can be written and deployed. This allows for Keycloak to bend and mold to the needs of its developers.\\n\\n**WorkOS:**\\nWorkOS offers robust authentication and authorization capabilities, including role-based access control, policy management, and support for multiple identity standards. Its single sign-on feature provides a seamless user experience across apps and services. WorkOS also features self-service registration, account recovery, and a comprehensive user directory. Integration with third-party apps is simplified through APIs and pre-built integrations, while analytics and logging tools help with monitoring and compliance.\\n\\n**Winner**\\n\\nBoth WorkOS and Keycloak offer robust functionality, but Keycloak\'s advanced identity federation capabilities, fine-grained authorization controls, and ability to customize and extend give it an edge over WorkOS.\\n\\n### Integration Capabilities\\n\\n**Keycloak:**\\nThe identity brokering capability of Keycloak enables delegation authentication to external Identity Providers (IdPs), applications, and protocols such as LDAP, SAML, OAuth, OpenID Connect. Managing internal permissions and roles, security checks, login experiences across different systems can be done seamlessly.\\n\\nIf you\u2019re switching from WorkOS, for example, Keycloak can be configured to act as a broker that sits between WorkOS and your applications to leverage the strengths of both platforms. For example, WorkOS can be used for external user management, while Keycloak can handle more sensitive, internal authentication needs.\\n\\n**WorkOS:**\\nThere is a narrower focus on authentication, but WorkOS provides a uniform API to integrate with popular identity providers like Google, Microsoft, and Okta. The unified interface reduces the complexity and development time.\\n\\n**Winner**\\n\\nKeycloak is the most versatile choice for organizations with complex requirements.\\n\\n### Community and Support\\n\\n[Keycloak](https://github.com/keycloak) has a large and active community of developers and contributors, ensuring continuous development, bug fixes, and updates. It has extensive documentation, forums, and [community support channels](https://keycloak.discourse.group/) where users can seek help and share knowledge. WorkOS also provides support but may have limitations in terms of community contributions and public resources. It offers dedicated support channels and resources to its users for assistance and issue resolution.\\n\\n### Which One Is Best for Me?\\n\\nIn determining the most suitable identity and access management solution for your organization, it is essential to consider the specific requirements and priorities of your enterprise. In summary, Keycloak is an open-source identity and access management solution that offers extensive customization and integration capabilities, making it suitable for organizations with complex requirements. WorkOS, on the other hand, is a cloud-based identity platform that simplifies integration and deployment but may have limitations in terms of scalability and customization options.\\n\\nWorking with Phase Two provides some of the best of both worlds: easy integration with ability to scale without incurring additional costs.\\n\\nIf you\u2019re looking to [migrate to Keycloak](https://phasetwo.io/support/migrate-to-keycloak/), or have questions about Phase Two\u2019s [enterprise support](https://phasetwo.io/support/), please [contact us](https://scheduler.zoom.us/phasetwo)."},{"id":"phase-two-organizations-shared-idps","metadata":{"permalink":"/blog/phase-two-organizations-shared-idps","source":"@site/blog/2024-07-09-organizations-shared-idps.mdx","title":"Phase Two Organizations now support shared Identity Providers (IdPs)","description":"Phase Two Organizations now support shared Identity Providers (IdPs) for mapping multiple organizations to a single IDP.","date":"2024-07-09T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"organizations","permalink":"/blog/tags/organizations"},{"inline":true,"label":"idp","permalink":"/blog/tags/idp"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":0.98,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Phase Two Organizations now support shared Identity Providers (IdPs)","description":"Phase Two Organizations now support shared Identity Providers (IdPs) for mapping multiple organizations to a single IDP.","slug":"phase-two-organizations-shared-idps","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","organizations","idp","keycloak"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. WorkOS, an Open-Source Alternative","permalink":"/blog/keycloak-vs-workos-open-source-alternative"},"nextItem":{"title":"Keycloak vs. Okta, a Open-Source Alternative","permalink":"/blog/keycloak-vs-okta-open-source-alternative"}},"content":"An exciting new feature has been added to [Phase Two Organizations Extension](https://github.com/p2-inc/keycloak-orgs)! Organizations now support [shared Identity Providers](https://github.com/p2-inc/keycloak-orgs/issues/249) (IdPs) for mapping multiple organizations to a single IDP. This feature is especially useful for organizations that have multiple organizations that need to share the same IDP.\\n\\n\x3c!--truncate--\x3e\\n\\nOften asked for by customers, this feature will now allow organizations to share the same IDP across multiple organizations. This will allow for a more streamlined user experience and easier management of users across multiple organizations. Meaning that admins can still keep organizations logically separated, but support the same IdP for authentication and authorization. The primary use case for this is applications that support both **Google social login and Google Workspace enterprise SSO login**. Some of our customers have 100\'s of organizations that use Google Workspace SSO. This change allows you to use a single OIDC integration with Google, rather than configuring 100\'s of SAML integrations.\\n\\nConfiguration is fully supported in the Keycloak Admin UI, is up-to-date with the latest Keycloak version, and is fully tested. This feature is available now to any Phase Two hosted customers and can be adopted by anyone leveraging the Phase Two Keycloak Organization Extension."},{"id":"keycloak-vs-okta-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-okta-open-source-alternative","source":"@site/blog/2024-06-03-alternatives-okta.md","title":"Keycloak vs. Okta, a Open-Source Alternative","description":"An in-depth comparison of Keycloak versus Okta and why Keycloak offers a strong and compelling alternative to a paid Authentication and Authorization service.","date":"2024-06-03T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"okta","permalink":"/blog/tags/okta"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":7.19,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. Okta, a Open-Source Alternative","description":"An in-depth comparison of Keycloak versus Okta and why Keycloak offers a strong and compelling alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-okta-open-source-alternative","date":"2024-06-03T00:00:00.000Z","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","okta","keycloak"]},"unlisted":false,"prevItem":{"title":"Phase Two Organizations now support shared Identity Providers (IdPs)","permalink":"/blog/phase-two-organizations-shared-idps"},"nextItem":{"title":"Phase Two\'s Organizations, a Keycloak Multi-Tenant Extension and Keycloak\'s Upcoming Organization\'s Feature","permalink":"/blog/organgizations-multi-tenant-update"}},"content":"## Exploring Keycloak as an Alternative to Okta for Authentication Solutions\\n\\nIn today\'s rapidly evolving digital landscape, securing and managing user identities has become more critical than ever. Organizations are faced with the challenge of choosing the right Identity and Access Management (IAM) solution that balances cost, ease of implementation, and robust feature sets. Two popular contenders in this space are Keycloak and Okta. Keycloak, an open-source solution developed by Red Hat, offers extensive customizability and a community-driven support model. On the other hand, Okta, a leading cloud-based IAM provider, promises quick deployment and comprehensive security features through its subscription-based service. In this blog post, we will delve into a detailed comparison of Keycloak and Okta, examining their costs, total cost of ownership, implementation processes, and the rich array of features and capabilities each brings to the table. Whether you\'re a small startup or a large enterprise, understanding these key differences will help you make an informed decision for your identity management needs.\\n\\n\x3c!--truncate--\x3e\\n\\nWe\'ve compared [Keycloak to Auth0](./2024-05-01-alternatives-auth0.md) and it\'s worth noting that Auth0 is owned by Okta. The differences between the offerings are subtle, where Auth0 bills it more as the \\"developer\\" tool while Okta is for \\"SSO\\". They are separate subscriptions.\\n\\n### Cost of Ownership\\n\\nWhen evaluating Identity and Access Management (IAM) solutions, both upfront cost and total cost of ownership (TCO) are critical considerations. There are many factors to think about with a total cost-of-ownership. We\'ve written extensively about [choosing an Open-Source IAM](./2024-03-11-open-source-iam.md) over a managed service.\\n\\n#### Okta:\\n\\nOkta operates on a subscription-based pricing model, with costs varying based on the number of users and selected features. This SaaS solution tries to simplify cost management by bundling infrastructure, maintenance, and support into its subscription fees. Organizations benefit from reduced internal IT burden, as Okta handles updates, patches, and system maintenance. However, the per-user costs can add up, especially for larger organizations, potentially leading to higher ongoing expenses compared to an open-source alternative like Keycloak. While Okta provides scalability, allowing businesses to grow without worrying about infrastructure investments, the costs that are incurred can quickly balloon far out of the original projections. With every feature enabled, the per user cost grows significantly and bills can rapidly sky-rocket in multi $100K+, becoming a large financial piece of the overall IT spend.\\n\\n#### Keycloak:\\n\\nKeycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures.\\n\\nKeycloak, being an open-source solution, stands out with its zero licensing fees, regardless of the number of users or the scale of the project. This makes it an attractive option for organizations looking to minimize expenditures. However, it\'s important to note that while Keycloak is free to use, it does require infrastructure to [host](https://phasetwo.io/hosting/) and run the application. This could involve costs related to cloud services or on-premises hardware. Additionally, maintaining and updating Keycloak, as well as implementing customizations, may necessitate dedicated internal resources or external support, which can add to the overall expenses. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.\\n\\n**Winner**\\n\\nKeycloak\\n\\nLeveraging Phase Two\'s [managed hosting](https://phasetwo.io/hosting/) provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application\'s needs grow for users and integrations, Keycloak quickly becomes a far more cost-effective choice.\\n\\n### Maintenance\\n\\n#### Okta:\\n\\nA strong advantage of Okta is that it is a managed service. From a Dev Ops perspective, it requires minimal maintenance. The Okta team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date. This comes at a cost though since customization of Okta is limited.\\n\\n#### Keycloak:\\n\\nConversely, Keycloak requires more attention since it\'s self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.\\n\\n**Winner**\\n\\nOkta.\\n\\nAs a fully managed service, Okta abstracts away this work.\\n\\n### Functionality and Flexibility\\n\\n#### Okta:\\n\\nOkta\u2019s authentication mechanisms support multiple methods for enhanced security and user convenience. The platform\u2019s authorization capabilities include role-based access control (RBAC) and policy management, allowing organizations to enforce detailed security policies. Okta supports identity federation through SAML, OpenID Connect, and other standards, facilitating integration with various identity providers. Its single sign-on (SSO) functionality ensures a seamless user experience across different applications and services. Okta\u2019s user management features are extensive, offering self-service registration, account recovery, and a comprehensive user directory. Additionally, Okta\u2019s APIs and pre-built integrations with numerous third-party applications simplify the implementation process. The platform also provides detailed analytics, logging, and reporting features for monitoring and compliance, as well as automated user provisioning, deprovisioning, and workflow management through its lifecycle management capabilities.\\n\\n#### Keycloak:\\n\\nKeycloak offers a comprehensive suite of features designed to meet the needs of modern applications that are at parity (or better) in many ways with Okta. Keycloak provides various authentication methods, including username/password, social logins, and multi-factor authentication (MFA), ensuring secure access for users. It also supports fine-grained authorization capabilities through role-based access control ([RBAC](https://phasetwo.io/product/organizations/)) and attribute-based access control ([ABAC](https://phasetwo.io/product/organizations/)), enabling precise management of user permissions. Keycloak excels in identity federation, supporting protocols like SAML and OpenID Connect, which allows seamless integration with other identity providers. Additionally, Keycloak\u2019s single sign-on ([SSO](https://phasetwo.io/product/sso/)) feature facilitates a smooth user experience across multiple applications, while its extensive [user management](https://phasetwo.io/product/adminportal/) capabilities, including user registration, password policies, and account linking, ensure comprehensive control over user identities. The platform is highly customizable, offering themes, custom code, and extensive configuration options, and benefits from strong community support and a wide range of extensions and plugins.\\n\\nA main point is that the features that Okta and Auth0 try to cover (somewhat separately) are all covered by why Keycloak can do.\\n\\n**Winner**\\n\\nKeycloak\\n\\nOkta and Keycloak offer much of the same functionality for Authentication and Authorization, however Keycloak is extremely flexible to extend and configure. It\'s a system that can adjust and grow with an application. In addition, there is no distinction in capabilities between different products, meaning Keycloak centralizes more use-cases.\\n\\n### Integrating Keycloak with External Systems like Okta\\n\\nFor organizations looking to transition from Okta to Keycloak or integrate Keycloak with systems that are already using Okta, Keycloak\'s flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Okta and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Okta for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.\\n\\nThe identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Okta. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Okta simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.\\n\\n### Which IAM Solution Is Best for Me?\\n\\nChoosing between Okta and Keycloak largely depends on your organization\u2019s specific needs and capabilities. Okta is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.\\n\\nBoth platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.\\n\\nUltimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust Keyloak [hosting](https://phasetwo.io/hosting/), migration, and support options that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control in SSO, authenication, authorization, user management, and other areas. **Leveraging Keycloak means that ongoing costs are relatively fixed**, since concerns about user growth or feature needs don\'t have to factor into every decision."},{"id":"organgizations-multi-tenant-update","metadata":{"permalink":"/blog/organgizations-multi-tenant-update","source":"@site/blog/2024-05-29-keycloak-orgs.md","title":"Phase Two\'s Organizations, a Keycloak Multi-Tenant Extension and Keycloak\'s Upcoming Organization\'s Feature","description":"Phase Two\'s Organization extensions bring single-realm multi-tenancy to Keycloak. Keycloak is officially developing a native version, but it\'s not a one-to-one replacement.","date":"2024-05-29T00:00:00.000Z","tags":[{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"organizations","permalink":"/blog/tags/organizations"},{"inline":true,"label":"multi_tenant","permalink":"/blog/tags/multi-tenant"},{"inline":true,"label":"multi_tenancy","permalink":"/blog/tags/multi-tenancy"}],"readingTime":4.7,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"organgizations-multi-tenant-update","title":"Phase Two\'s Organizations, a Keycloak Multi-Tenant Extension and Keycloak\'s Upcoming Organization\'s Feature","description":"Phase Two\'s Organization extensions bring single-realm multi-tenancy to Keycloak. Keycloak is officially developing a native version, but it\'s not a one-to-one replacement.","authors":"phasetwo","tags":["open_source","release","keycloak","phase_two","organizations","multi_tenant","multi_tenancy"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. Okta, a Open-Source Alternative","permalink":"/blog/keycloak-vs-okta-open-source-alternative"},"nextItem":{"title":"Securing an Angular and Spring Boot Application with Keycloak","permalink":"/blog/secure-spring-boot"}},"content":"Since we first released our (most) popular Keycloak extension, Keycloak [Organizations](https://phasetwo.io/product/organizations/) (Orgs) and made it available as open source on [Github](https://github.com/p2-inc/keycloak-orgs), the Keycloak maintainers have decided to build into native organization support.\\n\\nThis begs the question? What is different between Keycloak\'s upcoming organizations feature and the Phase Two Organization Extension?\\n\\n\x3c!--truncate--\x3e\\n\\nTo understand the difference it\'s important to first understand what the Phase Two Organization extension is. When we initially built this extension, we were struggling to solve the problem of \\"multi-tenant\\" Keycloak. During that process we learned a lot.\\n\\nOther approaches that we tried and decided against were:\\n\\n- One Realm for each tenant\\n- Using existing Keycloak Groups to model Organizations, Roles and Memberships\\n\\nEach of these approaches had trade-offs of scale or frailty we found undesirable or unacceptable to meet our requirements. We proceeded to create the Organization extension now in use by hundreds of companies.\\n\\n### What you get in Phase Two\'s Organization Extension\\n\\nWithin the extension, the following are treated in a first-class manner\\n\\n1. **Organizations**: \\"tenants\\" or \\"customers\\" as commonly used. A Realm can have multiple Organizations.\\n1. **Memberships**: the relationship of Users to Organizations. Users may be members of multiple Organizations.\\n1. **Roles**: mechanisms of role-based security specific to an Organization, much like Keycloak Realm Roles and Client Roles. In addition to a set of standard roles related to Organization data visibility and management, administrators can create Roles unique to an organization. Users who are Members of Organizations can be granted that Organization\'s Roles.\\n1. **Invitations**: allow Users and non-Users to be invited to join an Organization. Invitations can be created by administrators or Organization members with permission.\\n1. **Domains**: email domains that are used to automatically select Organization IdPs using the optional authenticators. Included is a facility to validate customer domain ownership using DNS records.\\n\\n### What does that translate to for my workflow and business use-cases?\\n\\nOrganizations are about empowering your customers and developers. They are about being able to segment customers into the right logical unit for interaction with your application. Effectively, they allow much more fine-grained ability to mimic the structure of a business in real-life within Keycloak, including permissions (roles, authorization).\\n\\n1. Self-management for your customers through the [Admin Portal](https://phasetwo.io/product/adminportal/) to enable [membership management](https://phasetwo.io/docs/organizations/membership/) and [invitations](https://phasetwo.io/docs/organizations/invitations/).\\n1. Self-management for your developers via strong [API capabilities](https://phasetwo.io/api/category/organizations/)\\n1. Enterprise [SSO](https://phasetwo.io/docs/sso/) Login for each customer\\n1. Enhanced [roles](https://phasetwo.io/docs/organizations/roles/), permissions and authorization per customer.\\n1. [Domain-based association](https://phasetwo.io/docs/sso/setup/#associating-organizations) for registration and sign-up.\\n1. Attribute management to apply and manage metadata to members of the organization.\\n1. [Active organization](https://github.com/p2-inc/keycloak-orgs/blob/main/docs/active-organization.md) for the ability to switch between organizations (when part of many organizations).\\n\\n### Main differences between Keycloak\'s Organization feature and Phase Two\'s Organzation extension\\n\\nThe Keycloak team at RedHat has [announced](https://github.com/keycloak/keycloak/discussions/23948) that they will be building an Organizations feature into the core product. We have previously offered to change our license and donate our extension to the project, but this was not considered. We participated in some of the public discussions around this feature, as well as provided feedback on their product features privately.\\n\\nWork has begun, and they plan to [release](https://github.com/keycloak/keycloak/issues/28609) some base features with `experimental` support in Keycloak `25`. They expect a full feature set and promotion to `preview` by Keycloak `26`. There are a few GitHub issues that indicate the features they plan to release, but there is not a comprehensive requirements or product feature plan available publicly.\\n\\nIt has been our goal since building this extension to have this approach to multi-tenancy built into Keycloak, and we have proven through many customers/user that is serves a real need. We\'re excited to see what they will build, and are flattered they have used our extension for inspiration.\\n\\nWe have several hundred customers and users of this extension, and there have been many asking about the future of this extension, given the above. We\'ve put together these notes, and will continue to update them as we learn more.\\n\\n- First of all, **this extension is not going away**. In addition to the fact we have long-term support agreements with many of our customers, we also don\'t currently have a picture of what Keycloak\'s implementation will ultimately look like.\\n- We continue to believe that our (Phase Two\'s) value is in **making Keycloak easy to use**, primarily for an audience that is using it as a **CIAM tool for enterprise SaaS applications**. We have tailored the feature set to that audience, and will continue to build out tools on top of our own organizations extension, such as the [admin portal](https://github.com/p2-inc/phasetwo-admin-portal) and [IdP wizards](https://github.com/p2-inc/idp-wizard) to facilitate making your app enterprise-ready quickly.\\n- We plan **not to enable native Keycloak organizations** in our hosted product, and it will be set (in env vars) off in our Docker images.\\n- We have initiated a project to **move our organizations (and other) admin UI tools outside of the Keycloak Admin UI**. In addition to proving very time consuming because of the pace of breaking changes, we realized that we can iterate faster for customer value by building our own admin UI. More information on that coming soon.\\n- We will continue to **participate in discussions with RedHat** and the Keycloak maintainers to advocate for our customers\' needs and the features we have proven over >3 years.\\n- If there is **eventually sufficient feature parity** between native Keycloak organizations and this extension, **we will provide a migration path**.\\n\\nThis will probably cause a lot of confusion as native Keycloak organizations is released. We appreciate the patience and support that customers and users have shown us, and we hope to continue to support you with [great Keycloak extensions and tools](https://github.com/p2-inc)."},{"id":"secure-spring-boot","metadata":{"permalink":"/blog/secure-spring-boot","source":"@site/blog/2024-05-09-secure-spring-boot.mdx","title":"Securing an Angular and Spring Boot Application with Keycloak","description":"Learn how to secure resources and access of an Angular and Spring Boot application using Keycloak for Authentication and Authorizationusing the open source IAMs Keycloak for Authentication and Authorization","date":"2024-05-09T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"spring_boot","permalink":"/blog/tags/spring-boot"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":2.2,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"secure-spring-boot","title":"Securing an Angular and Spring Boot Application with Keycloak","description":"Learn how to secure resources and access of an Angular and Spring Boot application using Keycloak for Authentication and Authorizationusing the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","spring_boot","authentication","authorization","sso"],"image":"/blog/og/springboot@2x.png"},"unlisted":false,"prevItem":{"title":"Phase Two\'s Organizations, a Keycloak Multi-Tenant Extension and Keycloak\'s Upcoming Organization\'s Feature","permalink":"/blog/organgizations-multi-tenant-update"},"nextItem":{"title":"Keycloak vs. Auth0, an Open-Source Alternative","permalink":"/blog/keycloak-vs-auth0-open-source-alternative"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport SpringBoot from \\"/templates/frameworks/_springboot.mdx\\";\\n\\n[Spring Boot](https://spring.io/projects/spring-boot) is a open-source tool which uses Java-based frameworks for building web applications.\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to secure an [Angular](https://angular.io/) application and access secured resources from a Spring Boot Web application.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Spring Boot example](https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak). We are also building [Keycloak examples](https://github.com/p2-inc/examples) for other frameworks.\\n\\n:::\\n\\n## Setting up a Spring Boot project\\n\\nIn order to setup a Spring Boot project, a JDK version must be chosen. As of the time of writing, to be inline with the latest changes from Keycloak 24, the Java 17 baseline will be used. Other JDK versions can also be used for developing the resource server according to the preference of the developer.\\n\\nStarting with Spring Boot 2.x the Keycloak client adapters were deprecated. In Spring Boot 3.x we will use native functionalities of the [`spring-boot-oauth2-resource-server`](https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html) to be able to configure the application security context.\\n\\n### Quick Start\\n\\nTo get this project up and running locally on your computer you can clone the Phase Two [Spring Boot example](https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak) or follow the instructions below to generate a project from scratch.\\n\\n1. Set up the Spring Boot project.\\n\\n   To kickstart a project, we will use (and recommend) using the Spring Boot [Initializr](https://start.spring.io/), a Web-based tool that provides a simple UI to generate the project.\\n\\n   Provide the following values to spring initializr for the project metadata:\\n\\n   ```\\n\\n   Group: com.example\\n   Artifact: spring-boot-keycloak\\n   Name: spring-boot-keycloak\\n   Description: Demo project for Spring Boot\\n   Package name: com.example.spring-boot-keycloak\\n   ```\\n\\n   ![Spring Boot Initializr](/blog/2024-05-10-create-spring-boot-project-template.png)\\n\\n2. Add the required dependencies in spring initializr.\\n\\n   For the purpose of this project we will add the following dependencies:\\n\\n   - Oauth2 Resource Server\\n   - Spring Web\\n   - Spring Security\\n\\n   This will result in the following lines within `build.gradle`.\\n\\n   ```\\n   implementation \'org.springframework.boot:spring-boot-starter-security\'\\n   implementation \'org.springframework.boot:spring-boot-starter-web\'\\n   implementation \'org.springframework.boot:spring-boot-starter-oauth2-resource-server\'\\n   ```\\n\\n   Generate the project with those settings. Open the .zip in your preferred text editor.\\n\\n3. Setup JDK 17 for the project. Follow instructions on the [JDK setup](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) page.\\n\\n## Setting up a Keycloak Instance\\n\\nBefore customizing the Spring Boot app, we need to set up and configure our Keycloak instance.\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n<SpringBoot />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"keycloak-vs-auth0-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-auth0-open-source-alternative","source":"@site/blog/2024-05-01-alternatives-auth0.md","title":"Keycloak vs. Auth0, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus Auth0 and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","date":"2024-05-01T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"auth0","permalink":"/blog/tags/auth-0"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":7.195,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak vs. Auth0, an Open-Source Alternative","description":"An in-depth comparison of Keycloak versus Auth0 and why Keycloak is a strong alternative to a paid Authentication and Authorization service.","slug":"keycloak-vs-auth0-open-source-alternative","date":"2024-05-01T00:00:00.000Z","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","auth0","keycloak"]},"unlisted":false,"prevItem":{"title":"Securing an Angular and Spring Boot Application with Keycloak","permalink":"/blog/secure-spring-boot"},"nextItem":{"title":"Securing SvelteKit Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-sveltekit"}},"content":"## Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions\\n\\nWhen it comes to implementing authentication and authorization in web applications, Auth0 and Keycloak are two prominent solutions that offer robust security features. While Auth0 is a popular choice for many developers due to its comprehensive, cloud-based platform, Keycloak presents a compelling alternative, especially in terms of cost and flexibility. This blog post will delve into how Keycloak stacks up against Auth0, focusing on cost of ownership, architecture and deployment, maintenance, functionality, community and support.\\n\\n\x3c!--truncate--\x3e\\n\\nIn searching for information about Keycloak in relation to Auth0, many of the limitations brought up about Keycloak have been rapidly addressed over the last couple of years. Those articles will call out things brought up by G2 reviews that are over four years old. In terms of [Keycloak versions](https://github.com/keycloak/keycloak/releases), that is over 10 major versions behind. Be mindful when doing research about Keycloak and understanding what versions are being discussed. We do our best to make sure that information below reflects the most recent Keycloak versions.\\n\\n### Cost of Ownership\\n\\nThere are many factors to think about with a total cost-of-ownership. We\'ve written extensively about [choosing an Open-Source IAM](./2024-03-11-open-source-iam.md) over a managed service.\\n\\n**Auth0:**\\nAuth0 operates on a subscription model, which can be quite enticing for startups or small projects with minimal authentication needs. It offers a free tier limited by the number of authentications per month, active users, MFA setups, and more. As needs quickly increase for a business to setup a modest number of IDP connections, include minimal additional \\"users\\" (which could be people or devices), extract logs, customize deployments, and more, those bills can quickly spiral into $100K+. For SMB\'s to Enterprise, dedicating that amount of resources to your Auth solution can be untenable.\\n\\nAdditionally, as the need to add more connections and functionality grows, so will one\'s cost. Features like SAML, LDAP, AD, the ability for customers to manage their own employees through the Okta identity cloud, or even the simple use of [magic link](https://phasetwo.io/blog/set-up-magic-links/), all necessitate instant shift to the Enterprise plan. Introducing basic features like immediately shift Auth0 accounts into a much pricier band. When building an application, having to continuously reevaluate the pricing for your vendor is cumbersome from a financial and process standpoint.\\n\\nRecently, price-per-user (MAU) of Auth0 went up by 300% from $0.023 to $0.07. The financial burden this is placing on existing customers and new customers is extremely high.\\n\\n**Keycloak:**\\nKeycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.\\n\\n**Winner**\\n\\nKeycloak\\n\\nLeveraging Phase Two\'s managed hosting provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application\'s needs grow, Keycloak quickly becomes a far more cost-effective choice.\\n\\n### Architecture and Deployment\\n\\n**Auth0:**\\n\\nAuth0 primarily functions as a cloud-based service, providing a hassle-free setup without the need for managing infrastructure. This approach favors organizations looking for quick deployment and minimal maintenance efforts. However, enterprises often require on-premise solutions due to strict regulatory and data residency requirements.\\n\\nAuth0 is a cloud-based service, which can provide less initial setup and configuration of infrastructure. This helps with doing a quick deployment and relieving organizations of the DevOps burden of a system.\\n\\n**Keycloak**\\n\\nKeycloak can be deployed as an on-premise solution or via a [cloud service](https://phasetwo.io/hosting/). Because it provides full control over the deployment environment, it conforms to any compliance and data sovereignty needs. Enterprises needing to adapt the solution to their environments, can adopt Keycloak knowing it will work. From an infrastructure standpoint, Keycloak may initially take more time but it also provides a very straightforward way to integrate applications.\\n\\n**Winner**\\n\\nDepends. If you need on-premise, Keycloak is a better option. For a hosted option, either is a strong choice. Keycloak has some flexibility allowing you to host yourself or leverage a service like Phase Two\'s [hosting]((https://phasetwo.io/hosting/).\\n\\n### Maintenance\\n\\n**Auth0:**\\nOne of the main advantages of Auth0 is that being a managed service, it requires minimal maintenance from the user\'s side. The Auth0 team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date.\\n\\n**Keycloak:**\\nConversely, Keycloak requires more attention since it\'s self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.\\n\\n**Winner**\\n\\nAuth0.\\n\\nAs a fully managed service, Auth0 abstracts away this work.\\n\\n### Functionality and Flexibility\\n\\n**Auth0:**\\nAuth0 offers a wide range of authentication features out-of-the-box, including social logins, enterprise federation, database connections, and more. It supports a variety of standards like OAuth2, OpenID Connect, and SAML, making it highly versatile for modern web applications. The platform also provides robust analytics and real-time monitoring tools that can be crucial for understanding user behavior and mitigating potential security threats.\\n\\nWhile Auth0 offer customization through its Actions framework, it can quickly become difficult to manage additional logic outside of the main application via API interaction.\\n\\n**Keycloak:**\\nKeycloak matches Auth0 in terms of functionality, supporting similar authentication protocols and user federation. It also offers customizable user interfaces for login, registration, and account management, which can be tailored to match the specific needs of a business. Being open-source, Keycloak allows developers to modify the codebase and integrate with other systems more freely than Auth0, offering a higher degree of customization at the cost of additional developer effort.\\n\\nA key feature of keycloak is it\'s ability to be [hosted on-premise](/product/onprem) in a variety of ways. This means that as you choose to deploy something within your own systems, you\'ll be able to do this with Keycloak. If your requirements include an on-premise solution, [learn more](https://phasetwo.io/blog/identity-brokering-on-prem/) about this how Keycloak can help with user management and identity brokering for on-premise.\\n\\n**Winner**\\n\\nKeycloak\\n\\nAuth0 and Keycloak offer much of the same functionality for Authentication and Authorization, however Keycloak is extremely flexible to extend and configure. It\'s a system that can adjust and grow with an application. Lastly, the ability to host Keycloak on-premise makes it a strong option for companies.\\n\\n### Integrating Keycloak with External Systems like Auth0\\n\\nFor organizations looking to transition from Auth0 to Keycloak or integrate Keycloak with systems that are already using Auth0, Keycloak\'s flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Auth0 and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Auth0 for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.\\n\\nThe identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Auth0. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Auth0 simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.\\n\\n### Which One Is Best for Me?\\n\\nChoosing between Auth0 and Keycloak largely depends on your organization\u2019s specific needs and capabilities. Auth0 is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.\\n\\nBoth platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.\\n\\nUltimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust [hosting options](https://phasetwo.io/hosting/) that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control. **Leveraging Keycloak means that ongoing costs are relatively fixed**, since concerns about user growth or feature needs don\'t have to factor into every decision."},{"id":"instant-user-management-and-sso-for-sveltekit","metadata":{"permalink":"/blog/instant-user-management-and-sso-for-sveltekit","source":"@site/blog/2024-04-29-secure-sveltekit.mdx","title":"Securing SvelteKit Apps with Keycloak","description":"Learn how to quickly secure a SvelteKit application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2024-04-29T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"sveltekit","permalink":"/blog/tags/sveltekit"},{"inline":true,"label":"svelte","permalink":"/blog/tags/svelte"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":0.845,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-management-and-sso-for-sveltekit","title":"Securing SvelteKit Apps with Keycloak","description":"Learn how to quickly secure a SvelteKit application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","sveltekit","svelte","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Keycloak vs. Auth0, an Open-Source Alternative","permalink":"/blog/keycloak-vs-auth0-open-source-alternative"},"nextItem":{"title":"Securing Remix Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-remix"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport SvelteKit from \\"/templates/frameworks/_sveltekit.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly secure a SvelteKit application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [SvelteKit example](https://github.com/p2-inc/examples/tree/main/frameworks/sveltekit).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a SvelteKit Project\\n\\n<SvelteKit />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-management-and-sso-for-remix","metadata":{"permalink":"/blog/instant-user-management-and-sso-for-remix","source":"@site/blog/2024-04-24-secure-remix.mdx","title":"Securing Remix Apps with Keycloak","description":"Learn how to quickly secure a Remix application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2024-04-24T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"remix","permalink":"/blog/tags/remix"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"reactjs","permalink":"/blog/tags/reactjs"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":0.88,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-management-and-sso-for-remix","title":"Securing Remix Apps with Keycloak","description":"Learn how to quickly secure a Remix application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","remix","react","reactjs","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Securing SvelteKit Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-sveltekit"},"nextItem":{"title":"Presentation on Multi-Tenancy within a Single Realm in Keycloak","permalink":"/blog/keycloak-orgs-presentation"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport Remix from \\"/templates/frameworks/_remix.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly secure a Remix application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Remix example](https://github.com/p2-inc/examples/tree/main/frameworks/remix). We also have a plain [React example](https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Remix Project\\n\\n<Remix />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"keycloak-orgs-presentation","metadata":{"permalink":"/blog/keycloak-orgs-presentation","source":"@site/blog/2024-04-10-keycloak-orgs-presentation.md","title":"Presentation on Multi-Tenancy within a Single Realm in Keycloak","description":"A detailed talk on how the Phase Two Organization Keycloak extension provides a single realm multi-tenancy solution for modern Saas Applications.","date":"2024-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"organizations","permalink":"/blog/tags/organizations"},{"inline":true,"label":"multi_tenancy","permalink":"/blog/tags/multi-tenancy"}],"readingTime":0.405,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-orgs-presentation","title":"Presentation on Multi-Tenancy within a Single Realm in Keycloak","description":"A detailed talk on how the Phase Two Organization Keycloak extension provides a single realm multi-tenancy solution for modern Saas Applications.","authors":"phasetwo","tags":["release","keycloak","phase_two","organizations","multi_tenancy"]},"unlisted":false,"prevItem":{"title":"Securing Remix Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-remix"},"nextItem":{"title":"How to Customize Email Templates in Keycloak","permalink":"/blog/customizing-email-templates"}},"content":"We recently gave a talk at the [Keycloak DevDay 2024](https://www.keycloak-day.dev/) conference in Frankfurt on our [Organizations](https://github.com/p2-inc/keycloak-orgs) extension which provides single Realm multi-tenancy to Keycloak for modern SaaS applications. The hosts of the conference have posted the [video of the talk](https://www.youtube.com/watch?v=DNq51wWw3F4) on Youtube.\\n\\n\x3c!--truncate--\x3e\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/DNq51wWw3F4\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nTake a look, and try it out today with our [free hosted Keycloak](https://phasetwo.io/dashboard/) instances that run all of our [open source Keycloak extensions](https://github.com/p2-inc)."},{"id":"customizing-email-templates","metadata":{"permalink":"/blog/customizing-email-templates","source":"@site/blog/2024-04-08-customizing-emails-in-keycloak.md","title":"How to Customize Email Templates in Keycloak","description":"Customize email templates and branding for use in Keycloak","date":"2024-04-08T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"idp_wizard","permalink":"/blog/tags/idp-wizard"},{"inline":true,"label":"on_prem","permalink":"/blog/tags/on-prem"},{"inline":true,"label":"private_cloud","permalink":"/blog/tags/private-cloud"},{"inline":true,"label":"email","permalink":"/blog/tags/email"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"}],"readingTime":1.46,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"customizing-email-templates","title":"How to Customize Email Templates in Keycloak","description":"Customize email templates and branding for use in Keycloak","authors":"phasetwo","tags":["keycloak","phase_two","open_source","idp_wizard","on_prem","private_cloud","email","customization"]},"unlisted":false,"prevItem":{"title":"Presentation on Multi-Tenancy within a Single Realm in Keycloak","permalink":"/blog/keycloak-orgs-presentation"},"nextItem":{"title":"User Management and Identity Brokering for On-Prem Apps","permalink":"/blog/identity-brokering-on-prem"}},"content":"Keeping your brand consistent across user touch-points is important to modern Saas companies. Just like customizing [Login Pages](https://phasetwo.io/blog/customizing-login-pages), customizing your email templates is just as important. Keycloak has a number of [templates](https://phasetwo.io/docs/getting-started/email#content-templates) which can be customized.\\n\\nKeycloak starts out with simple text templates, but unless you like spending your days looking at Unix terminals, you probably prefer some color and images in your emails.\\n\\n\x3c!--truncate--\x3e\\n\\n## Template Customization\\n\\nPhase Two exposes an interface in the Admin UI to adjust the HTML and Text template. In the Styles > _Emails_ tab, select a template to edit.\\n\\n![Customizing Email Template Example](/blog/2024-04-08-email-templates.png)\\n\\nEnter the new HTML for the HTML template along with a matching Text template.\\n\\nUsing a test user, visit the flow of the templates you changed to have those emails sent to you and confirm you\'re happy with your changes.\\n\\n## Example Template\\n\\nThe Attributes theme in our Phase Two deployment automatically make use of these themes. The [sample template](https://github.com/p2-inc/keycloak-themes) can be customized to fit your need. All you have to do is adjust the CSS colors and inject a link to your hosted logo file somewhere. There is a content section which you can copy/paste the default content from Keycloak into and customize. A simple HTML preview of the template lets you get an idea of how it will look.\\n\\n![Email example template](/blog/2024-04-08-email-example-phaseII.png)\\n\\n# Success\\n\\nKaboom! Done. We challenge you to tell us the last time a change in Keycloak was that easy \ud83d\udcaa\\n\\nAs always, our success is based on the success of our customers. We hope this extension and guide has helped you update the default Keycloak email branding to match that of your needs. If you have suggestions for further improvement of this feature, please reach out on [GitHub](https://github.com/p2-inc)!"},{"id":"identity-brokering-on-prem","metadata":{"permalink":"/blog/identity-brokering-on-prem","source":"@site/blog/2024-03-19-identity-brokering-on-prem.md","title":"User Management and Identity Brokering for On-Prem Apps","description":"A deep-dive into the process to use an open-source software, Keycloak, to solve an important need of Identity Brokering within modern Saas applications.","date":"2024-03-19T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"idp_wizard","permalink":"/blog/tags/idp-wizard"},{"inline":true,"label":"on_prem","permalink":"/blog/tags/on-prem"},{"inline":true,"label":"private_cloud","permalink":"/blog/tags/private-cloud"}],"readingTime":3.85,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"identity-brokering-on-prem","title":"User Management and Identity Brokering for On-Prem Apps","description":"A deep-dive into the process to use an open-source software, Keycloak, to solve an important need of Identity Brokering within modern Saas applications.","authors":"phasetwo","tags":["keycloak","phase_two","open_source","idp_wizard","on_prem","private_cloud"]},"unlisted":false,"prevItem":{"title":"How to Customize Email Templates in Keycloak","permalink":"/blog/customizing-email-templates"},"nextItem":{"title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","permalink":"/blog/open-source-iam"}},"content":"With many companies racing into the cloud, very little is written about the huge opportunity, and potential pitfalls of building software for on-prem and private cloud deployments. With the growing Kubernetes and CNCF ecosystems, the balance point to justify self-hosting is constantly shifting. This is great news for companies that must host data and applications inside the enterprise. For software vendors looking to serve this exploding market, authentication can be a blind spot.\\n\\n### A story, inspired by customer use cases:\\n\\n> You\u2019ve built a successful enterprise SaaS product, and your cloud offering has taken off. Recently, you\u2019ve been getting inquiries from government agencies, large companies in regulated industries, and foreign companies \u2013 all of which have legal, compliance or regulatory requirements that prohibit them from using your product in the cloud.\\n>\\n> Given the size of the opportunity, you\u2019ve decided to go for it. Your team has packaged your application up as a set of Kubernetes manifests, making changes, replacing cloud services with open source alternatives, and even built out a runbook to help your devops peers at the customer operate it themselves.\\n>\\n> The big day comes, and you\u2019re installing at your first customer. You expect that there will be some minor bumps along the way, but their first question just flattens you: \u201cHow do we connect this to our in-house identity provider?\u201d It was a question that was never on your radar, but now it\u2019s the most important thing for the customer.\\n>\\n> Like most SaaS companies, you\u2019re probably either hand-rolling your authentication and user management using something like Passport.js, Devise, Django, etc., using some social login options, or using a cloud-only service like Auth0 or WorkOS. If you had implemented SAML, the most common protocol for just-in-time user provisioning with enterprise identity providers, you probably went for a basic approach. You wrongly assumed that user management and identity brokering would be easier for on-prem.\\n>\\n> You throw some engineering and customer success resources at the problem, but quickly realize it\u2019s not a scalable solution. The customer wants to map their groups, and manage access and authorization through _their_ IdP. Just the overhead of connecting to every possible type of IdP, and supporting that for every customer, will eat up your margin before they start using your application.\\n\\n\x3c!--truncate--\x3e\\n\\nThe **good news** is that you\u2019re not alone in missing this key enterprise need. Many companies who are new to on-prem and private cloud deployments learn this the hard way, many without losing customers.\\n\\nHowever, the reality is that for an application that is used by an entire enterprise, who can use it (authentication) and how (authorization) is equally as important for on-prem applications as cloud. And, being hosted and operated by your customer, simplicity of management and transparency is more important than cloud.\\n\\n### An open source solution to the rescue\\n\\nFortunately, there is feature complete identity and access management system that is equally at home both on-premise and in the cloud. It can easily facilitate identity brokering with the customer identity provider, as well as give their IT staff access to critical access and operational information.\\n\\nAt Phase Two, we\u2019ve had a front row seat in solving this problem. Our customers have deployed [Keycloak](https://www.keycloak.org/), bundled with their application to over 300 of their customer sites. In these deployments, Keycloak is used for identity brokering to the customer identity provider, SSO authentication for all of their deployed applications, and role and access management to broker and manage authorization within their applications.\\n\\n### Tools to empower the customer\\n\\nIn addition to solving these core challenges, Phase Two has built [tools](https://github.com/p2-inc) to extend enterprise [use-cases](https://phasetwo.io/product/organizations) and facilitate [customer onboarding](https://phasetwo.io/product/adminportal), one of the biggest drags on Customer Success hours, and ultimately a huge margin drain.\\n\\nTo this end, the most valuable tool, from our customers\u2019 perspectives is our [Identity Provider Setup Wizard](https://github.com/p2-inc/idp-wizard). This tool is meant as a guide for customers\u2019 initial IdP connection, turning an esoteric form into a clear step-by-step process for specific IDPs (what keys to get, where to store them, and so on). This had previously been the long pole in the onboarding tent. By giving the customers a tool to self-configure and manage their own IdP connection, Phase Two has gifted back valuable Customer Success hours and margin dollars.\\n\\n![idp-wizard-video-gif](https://github.com/p2-inc/idp-wizard/assets/244253/e9b421c0-b487-4c07-9eed-87ea89fc574b)\\n\\nWe conveniently bundle all of these tools in [Docker images](https://github.com/p2-inc/phasetwo-containers) for easy deployment.\\n\\nDoes the above story sound familiar, or something you might be stumbling into? [Contact sales](mailto:sales@phasetwo.io) to find out how we can help your journey to on-prem be as painless as possible and supercharge your customer identity onboarding process."},{"id":"open-source-iam","metadata":{"permalink":"/blog/open-source-iam","source":"@site/blog/2024-03-11-open-source-iam.md","title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","description":"Keycloak is a financially sustainable, open source alternative to many paid identity and access management providers.","date":"2024-03-11T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"auth0","permalink":"/blog/tags/auth-0"},{"inline":true,"label":"workos","permalink":"/blog/tags/workos"},{"inline":true,"label":"okta","permalink":"/blog/tags/okta"},{"inline":true,"label":"cognito","permalink":"/blog/tags/cognito"},{"inline":true,"label":"keycloak_support","permalink":"/blog/tags/keycloak-support"}],"readingTime":6.315,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"open-source-iam","title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","description":"Keycloak is a financially sustainable, open source alternative to many paid identity and access management providers.","authors":"phasetwo","tags":["keycloak","phase_two","open_source","auth0","workos","okta","cognito","keycloak_support"]},"unlisted":false,"prevItem":{"title":"User Management and Identity Brokering for On-Prem Apps","permalink":"/blog/identity-brokering-on-prem"},"nextItem":{"title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","permalink":"/blog/keycloak-on-cockroachdb"}},"content":"In today\'s digital landscape, managing user identities and securing access to applications and services is paramount for businesses of all sizes. As the demand for robust identity and access management (IAM) solutions grows, so does the market, with various commercial options vying for attention. When we first started using [Keycloak](https://keycloak.org) over 7 years ago, we were surprised that there was a relatively unknown, but completely open-source alternative to commercial offerings in the Identity and Access Management market.\\n\\n\x3c!--truncate--\x3e\\n\\n### Commercial offerings\\n\\nCompanies such as [Auth0](https://www.auth0.com), [Okta](https://www.okta.com), Microsoft (through [AzureAD](https://www.microsoft.com/en-us/security/business/microsoft-entra)) had created cloud authentication services, and helped bring standardization to the market through implementation of standards, such as OIDC, SAML, SCIM, LDAP, etc. However, there was little differentiation among them, and despite their pricing models, were essentially commodities that were the same.\\n\\nAmazon released [AWS Cognito](https://aws.amazon.com/cognito), which did price it as a commodity, but failed so miserably in UI and developer ergonomics, that it failed to reach a dominant market position despite its de minimis cost.\\n\\nMore recently, nascent companies such as [WorkOS](https://workos.com) and [Frontegg](https://www.frontegg.com), while casting themselves as CIAM and \u201cSSO made easy\u201d to enterprise SaaS customers, are really just repackaging the same IAM features and protocol implementations that have been available in Keycloak for years. Furthermore, the pricing models have tilted back towards predatory on your company\u2019s business model.\\n\\n### Keycloak advantages\\n\\nAmidst this landscape, open-source alternatives like Keycloak are emerging as powerful contenders, offering unique advantages over their commercial counterparts. Because the market has settled on standard protocols, it opened the door for superior open-source implementations to emerge with feature parity and standards compliance. Keycloak stands out as an alternative to commercial IAM solutions, enabling your business to unlock both flexibility and control.\\n\\n1. **Open Source Foundation:** At the heart of Keycloak lies its open-source nature. Developed by Red Hat, Keycloak provides a fully-fledged IAM solution that is freely available for anyone to use, modify, and extend according to their requirements. This open ethos empowers organizations with unparalleled flexibility and control over their identity infrastructure, without being tied to proprietary vendors or licensing agreements. Furthermore, given the core security requirements of the protocol implementations, developing in the open gives customers the reassurance that the code has been audited by others, unlike closed source, buggy, commercial implementations that come with zero transparency or guarantees.\\n2. **Cost-Effectiveness:** One of the most significant advantages of Keycloak is its cost-effectiveness. Unlike commercial IAM solutions that operate on subscription-based pricing models, Keycloak eliminates licensing fees, enabling organizations to allocate resources more efficiently. With Keycloak, businesses can scale their identity infrastructure without worrying about escalating SSO, authentication, and other costs, making it an attractive option for startups, small businesses, and enterprises alike.\\n3. **Customization and Extensibility:** Keycloak stands out for its robust customization and extensibility capabilities. From authentication flows and user federation to role-based access control (RBAC) and fine-grained permissions, Keycloak provides a plethora of features that can be tailored to suit specific use cases and compliance requirements. Moreover, its modular architecture and comprehensive API support facilitate seamless integration with existing systems and third-party services, empowering developers to build bespoke identity solutions with ease.\\n4. **On-Premise and Cloud Deployment:** Whether organizations prefer on-premise deployment for enhanced security and compliance or cloud-based solutions for scalability and convenience, Keycloak offers the flexibility to meet diverse deployment needs. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.\\n5. **Active Community and Support:** Backed by a vibrant community of developers and contributors, Keycloak benefits from ongoing enhancements, bug fixes, and feature additions. This active ecosystem fosters innovation and collaboration, with users sharing best practices, troubleshooting tips, and extensions through forums, mailing lists, and code repositories. Additionally, organizations seeking professional support and services can leverage expertise of a growing ecosystem of companies providing support, ensuring reliable deployment and ongoing maintenance of their Keycloak instances.\\n\\n### Keycloak disadvantages\\n\\nSo, given Keycloak\'s inherent advantages, while solving all of the same problems, why has it failed to receive broad market adoption? Looking back, and polling our customer base, it seems that Keycloak has suffered from a couple of barriers:\\n\\n1. **Awareness:** Other than a couple of markets (e.g. Germany) Keycloak is still relatively unknown. Because it\u2019s not a commercial entity, there isn\u2019t a content marketing engine that focuses on discovery for common use cases.\\n1. **Onboarding**: Documentation for getting successful for common use cases is fragmented and often hard to find. When solving a new problem, examples are a great way to get a developer \u201chooked\u201d, but these are largely missing from official Keycloak documentation.\\n1. **Community**: Because the core Keycloak developers have largely been working for one customer (RedHat) and not the community at large, developers who are exploring Keycloak for the first time can find it hard to know where to ask question. While the Discourse, GitHub, Slack and mailing lists are a good direction, there\u2019s not a definitive way to get support.\\n1. **UI**: The Keycloak Admin UI, while complete, is intimidating to new users. Unlike the commercial alternatives, that have invested resources in building and measuring customer success into their UIs, while Keycloak\u2019s attitude has been \\"[RTFM](https://en.wikipedia.org/wiki/RTFM)\\". Furthermore, the user facing UIs of Keycloak are notoriously \u201crough edged\u201d, commercial alternatives are beautiful, modern, and capable of easy customization and branding.\\n\\nObviously, we think that the barriers are something that can be solved, and [Phase Two](https://phasetwo.io) has been working hard in its [open source extensions](https://github.com/p2-inc) and [cloud offerings](https://phasetwo.io/#pricing) to overcome these barriers. We\'ve already made great strides, and believe that we\'re at the point where customers can realize the above advantages, while compromising relatively little -- All while achieving tremendous cost savings in SSO, authentication, and user manangement.\\n\\n### Migrating to Keycloak from your current identity provider\\n\\nAlready using one of the commercial systems? Keycloak is a complete, robust and mature identity solution that can replace your identity provider and user management systems **today**. It has complete parity with all of the major features of commercial IAM systems, and because of reliance on standards, migration is easier than you think. By migrating to Keycloak, you gain full control over your authentication and authorization processes, enabling seamless integration, customization, and scalability tailored to your organization\'s unique needs.\\n\\nPhase two has implemented [user migration](https://phasetwo.io/docs/user-migration/) support in the product for all tiers. This is meant to ease your transition from your existing user management system so that migration can occur incrementally with a complete fallback plan.\\n\\n### Keycloak Support\\n\\nConfiguring, integrating, and operating an Identity and Access Management (IAM) system can be a daunting task, especially for those new to Keycloak. For Premium and Enterprise subscribers, we include migration support. Whether you\'re a hosted or on-prem customer, or have your own Keycloak deployment, Phase Two can support your goals from configuration and integration to operation and maintenance. Don\'t let the complexities of IAM hold you back. [Contact us today](email:sales@phasetwo.io) to learn more about how we can support your Keycloak journey and take your organization to the next level.\\n\\n### Conclusion\\n\\nIn a landscape dominated by commercial IAM solutions, Keycloak shines as a compelling alternative that combines the power of open source with enterprise-grade features and flexibility. With its cost-effectiveness, customization capabilities, deployment flexibility, and active community support, Keycloak empowers organizations to take control of their identity infrastructure, unlock new possibilities, and adapt to evolving security and compliance requirements. Whether you\'re a startup looking to bootstrap your identity management or an enterprise seeking to streamline operations, Keycloak offers a compelling solution that puts you in the driver\'s seat of your IAM journey."},{"id":"keycloak-on-cockroachdb","metadata":{"permalink":"/blog/keycloak-on-cockroachdb","source":"@site/blog/2023-12-06-keycloak-on-cockroachdb.mdx","title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","description":"Phase Two\'s CockroachDB multi-region Database support for Keycloak provides a scalable, resilient, open-source identity and access management solution.","date":"2023-12-06T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":5.615,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak-on-cockroachdb","title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","description":"Phase Two\'s CockroachDB multi-region Database support for Keycloak provides a scalable, resilient, open-source identity and access management solution.","authors":"phasetwo","tags":["keycloak","phase_two","cockroach"]},"unlisted":false,"prevItem":{"title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","permalink":"/blog/open-source-iam"},"nextItem":{"title":"Securing Vue Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-vue"}},"content":"![Keycloak Phase Two CockroachDb Logos](/blog/2023-12-06-keycloak-on-cockroachdb-kcpluscrdb.png)\\n\\n[Keycloak](https://www.keycloak.org/) has been a leader in the Identity and Access Management (IAM) world since its launch almost 9 years ago. The market for IAM tools had several commercial offerings that failed to meet many business model and price needs, and Keycloak filled the hole with an open-source offering.\\n\\nFast-forward to today, Keycloak still leads with mature protocol implementations, hardened security, and a reliable architecture that has been battle-tested for years, under the stewardship of the maintainers at [Red Hat](https://www.redhat.com/). Whether deploying an in-house identity provider, or a user management system for a SaaS offering, Keycloak is an obvious choice.\\n\\n\x3c!--truncate--\x3e\\n\\nWith time, customer needs have evolved to include greater resiliency, expanded database selection, deploying in multiple regions, and operating across clouds. Because of operational complexity and architectural barriers, the Keycloak team decided to embark on a project to build a new underlying storage architecture. While promising, the project has taken longer than expected, and has yet to produce a production-ready result.\\n\\nOne of the great aspects of open source, is that it allows anyone to participate. About 18 months ago, [Phase Two](https://phasetwo.io) decided to implement support for CockroachDB for the existing storage architecture in order to meet this growing customer demand.\\n\\n## Remind me, what is Phase Two?\\n\\nPhase Two helps SaaS builders accelerate time-to-market and enterprise adoption with powerful SSO, identity and user management features. To that end, Phase Two has created an enhanced distribution of Keycloak that bundles several essential [open source extensions](https://github.com/p2-inc) for modern SaaS use cases. Phase Two supports hosted and on-premise customers for a variety of use cases.\\n\\n## How we built support for CockroachDB\\n\\nWe eagerly dove into the challenge of adding CockroachDB support, but we quickly encountered a few key issues:\\n\\n#### 1. SQL\\n\\nKeycloak internally uses the [Hibernate ORM framework](https://hibernate.org/), which generates the SQL for the database type selected (called a \\"dialect\\" by them). Fortunately for us, the [Cockroach Labs](https://www.cockroachlabs.com/) team had already built a custom [CockroachDB Hibernate dialect](https://www.cockroachlabs.com/blog/building-support-for-java-orm-hibernate-in-cockroachdb/) that we were able to use without modification.\\n\\n#### 2. Migrations\\n\\nThe [Liquibase](https://www.liquibase.org/) library is used by Keycloak for tracking, managing, and applying database schema changes. However, the authors had not anticipated adding support for entirely new database types without making code changes. We had to add CRDB, the Hibernate dialect, and the correct JDBC driver classes to the code to enable first-class support.\\n\\nWe ported the migrations that were incompatible with CRDB. This was required because of a few SQL semantics that are not supported in CRDB the same way they are in PostgreSQL.\\n\\n#### 3. Transactions\\n\\nBecause CRDB uses [serializable isolation](https://www.cockroachlabs.com/docs/stable/transactions#serializable-isolation) by default, it was incompatible with Keycloak\'s use of distributed (\\"XA\\") or two-phase commit (\\"JTA\\") transaction managers. However, because the use of these is not necessary outside of an environment where other applications are using the same resources, it was possible to disable them. The Keycloak team was helpful in adding some environment variables to disable these, as they had also seen other database use cases that required it.\\n\\n#### 4. An **Incredible** Team\\n\\nIt also wouldn\'t have been possible to complete the changes without tireless support from the Cockroach Labs engineering team. They patiently helped us understand how CRDB is different, wrote code examples and tests, and were never shy about giving us access to everyone in the organization, regardless of level and how busy they were.\\n\\nA **HUGE** thank you to the whole Cockroach team!\\n\\n## How does it work?\\n\\nAbout 12 months ago, we launched our self-service, free product, built on our CRDB port and running on Cockroach Labs\' managed serverless product. Over that period, we\'ve provided over 900 free deployments, without a single production incident for both CockroachDB serverless and Phase Two enhanced Keycloak.\\n\\nFurthermore, we\'ve built out a test system that we run prior to releasing new versions in order to ensure that there are no regressions compared to the main Keycloak distributions. We run that test system and several benchmarks prior to releasing each new version of our fork.\\n\\n## Why is this important now?\\n\\nThe Keycloak team had embarked on an ambitious project over 2 years ago to completely overhaul the storage architecture. The so-called \\"map store\\" was designed, among other things, to provide a basis for high-availability by replicating data with multiple data centers. However, after that time period, there was still a lot of uncertainty and risk involved in getting to the point where the store was production ready. Thus the team decided to drop the project. [See the announcement](https://www.keycloak.org/2023/10/map-store-removal).\\n\\nThat leaves Phase Two\'s CRDB support in a unique position, as it is the only version of Keycloak that will support Cockroach\'s multi-region database.\\n\\n## Take me to it!\\n\\nWe get it! Here are a few links to help you jump-start your work:\\n\\n#### 1. Keycloak Managed Hosting\\n\\nPhase Two provides self-service deployments of Keycloak hosted on multiple clouds. [Plans](https://phasetwo.io/#pricing) start with a free version for testing and small production use cases. Dedicated clusters are available for customers requiring an SLA, isolated resources, and the ability to grow into larger use cases.\\n\\nThe database tier for our shared and dedicated clusters uses the [CockroachDB serverless](https://www.cockroachlabs.com/lp/serverless-database-p) service. Working with Cockroach Labs gives us the expertise and reliability of hosting thousands of customer clusters at a massive scale.\\n\\n#### 2. Community Distribution\\n\\nIf you\'re more DIY, and you\'re planning to run everything yourself, the base distribution image that contains our changes to Keycloak to enable CockroachDB support is available in the Phase Two [Keycloak CockroachDB docker repository](https://quay.io/repository/phasetwo/keycloak-crdb?tab=info). It\'s a drop-in replacement for Keycloak that doesn\'t require much configuration beyond the [official guides](https://www.keycloak.org/guides). We generally release a version within 1-2 days of the official Keycloak release.\\n\\nFor the impatient, we\'ve also put together a complete [docker compose](https://github.com/p2-inc/phasetwo-containers/blob/main/examples/cockroach/docker-compose.yml) example that includes a single node CockroachDB instance. You can also modify the configuration to use your own CockroachDB dedicated or serverless database.\\n\\n## The Future\\n\\n#### Keycloak on CRDB\\n\\nBecause of the uncertainty around the direction of the Keycloak storage architecture, Phase Two is committed to maintaining support for the \\"legacy store\\" and our port to CRDB for the long term.\\n\\n#### Phase Two and Cockroach Labs\\n\\nMany of our on-premise, support customers with large use cases asked us to build out a solution for massive-scale, fault-tolerant, multi-region use cases. One of the great parts of building support for Keycloak\'s existing storage architecture for CRDB is that we\'ve been able to explore use cases that were previously impossible using the standard Keycloak distribution. For use cases with these requirements, plus global proximity to users and regional failover, we built global clusters, backed by CRDB multi-region database, for which we are now in Beta.\\n\\nWe\'re excited to see what you build with Keycloak and CRDB!"},{"id":"instant-user-managemenet-and-sso-for-vue","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-vue","source":"@site/blog/2023-09-14-secure-vue.mdx","title":"Securing Vue Apps with Keycloak","description":"Learn how to quickly secure a Vue application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2023-09-14T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"nuxt","permalink":"/blog/tags/nuxt"},{"inline":true,"label":"vue","permalink":"/blog/tags/vue"},{"inline":true,"label":"vuejs","permalink":"/blog/tags/vuejs"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":0.845,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-vue","title":"Securing Vue Apps with Keycloak","description":"Learn how to quickly secure a Vue application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","nuxt","vue","vuejs","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","permalink":"/blog/keycloak-on-cockroachdb"},"nextItem":{"title":"Securing Nuxt Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport VueJs from \\"/templates/frameworks/_vuejs.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly secure a Vue application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Vue example](https://github.com/p2-inc/examples/tree/main/frameworks/vue).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Vue.js Project\\n\\n<VueJs />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-nuxt","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt","source":"@site/blog/2023-09-08-secure-nuxt.mdx","title":"Securing Nuxt Apps with Keycloak","description":"Learn how to quickly secure a Nuxt application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2023-09-08T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"nuxt","permalink":"/blog/tags/nuxt"},{"inline":true,"label":"vue","permalink":"/blog/tags/vue"},{"inline":true,"label":"vuejs","permalink":"/blog/tags/vuejs"},{"inline":true,"label":"nuxt","permalink":"/blog/tags/nuxt"},{"inline":true,"label":"nuxtjs","permalink":"/blog/tags/nuxtjs"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":7.005,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-nuxt","title":"Securing Nuxt Apps with Keycloak","description":"Learn how to quickly secure a Nuxt application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","nuxt","vue","vuejs","nuxt","nuxtjs","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Securing Vue Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-vue"},"nextItem":{"title":"Django Web Authentication with Keycloak","permalink":"/blog/secure-django"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly secure a Nuxt application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Nuxt example](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Nuxt Project\\n\\n:::info\\nWe will use the Phase Two Nuxt example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\nThis example uses Nuxt3. There are a couple methods by which you can integrate Keycloak to your Nuxt application. We\'re going to explore two methods here, one uses [`keycloak-js`](https://www.npmjs.com/package/keycloak-js) and the other leverages [`oidc-client-ts`](https://www.npmjs.com/package/oidc-client-ts). The `keycloak-js` library provides a simple, client-only method, but lacks some of the sophistication provided by the `oidc-client` library that is heavily supported and more widely used.\\n\\n### Using `keycloak-js`\\n\\n:::info\\nFor this example, we need to disable \\"Client Authentication\\" in the OIDC client that was setup earlier. This is available under Client > Settings > Capability config > Client authentication to OFF.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Nuxt [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt) within `/frameworks/nuxt` and open the `keycloak-js` folder within `/frameworks/nuxt/keycloak-js`.\\n1. Run `npm install` and then `npm run dev`. [`keycloak-js`](https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter) is a Javascript library that provides a fast way to secure an application.\\n1. The project makes use of the following Nuxt items: components, composables, layouts, and plugins. We\'ll review each in kind.\\n1. The main component that shows the User\'s authenticated state is in `/components/User`. In this component we call the `useKeycloak` composable, which let\'s us key into the `keycloak-js` functions that we\'ve wrapped to make easily availble.\\n\\n   ```javascript\\n   const { keycloak, authState } = useKeycloak();\\n\\n   function login() {\\n     keycloak.login();\\n   }\\n\\n   function logout() {\\n     keycloak.logout();\\n   }\\n   ```\\n\\n   Lower in the file the component leverages `v-if` checks to determine if the `authState` is `authenticated` or not. Depending on the state, a Log in or Log out button is available.\\n\\n1. Let\'s take a look at the setup for the composable next. Our composable is in `/composables/keycloak-c`. A composable is a function defined that can be called anywhere in the Nuxt application. It\'s a good way to abstract logic to be reused. In our case we use it to wrap a `keycloak-js` plugin (more on that in the next step) and help provided a state value for the authenticated state.\\n\\n   ```javascript\\n   export const useKeycloak = () => {\\n     const nuxtApp = useNuxtApp();\\n     const keycloak = nuxtApp.$keycloak as Keycloak;\\n     const authState = useState(\\"authState\\", () => \\"unAuthenticated\\");\\n\\n     keycloak.onAuthSuccess = () => (authState.value = \\"authenticated\\");\\n     keycloak.onAuthError = () => (authState.value = \\"error\\");\\n\\n     return {\\n       keycloak,\\n       authState,\\n     };\\n   };\\n   ```\\n\\n1. In the plugin, `/plugins/keycloak.client.ts` we instantiate the `keycloak-js` library. We can then attach that instance to the `NuxtApp` instance. Substitute the correct values for your Keycloak instance that we created earlier in the tutorial.\\n\\n   ```javascript\\n   export default defineNuxtPlugin((nuxtApp) => {\\n     const initOptions: KeycloakConfig = {\\n       url: \\"https://euc1.auth.ac/auth/\\",\\n       realm: \\"shared-deployment-001\\",\\n       clientId: \\"reg-example-1\\",\\n     };\\n\\n     const keycloak = new Keycloak(initOptions);\\n\\n     nuxtApp.$keycloak = keycloak;\\n\\n     keycloak.init({\\n       onLoad: \\"check-sso\\",\\n     });\\n   });\\n   ```\\n\\n1. The logic for checking the `authenticated` state can be used to expand in ways to secure your site in a number of ways.\\n\\n### Using `oidc-client`\\n\\nThe [`oidc-client-ts`](https://www.npmjs.com/package/oidc-client-ts) package is a well-maintained and used library. It provides a lot of utilities for building out a fully production app.\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Nuxt [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt) within `/frameworks/nuxt` and open the `/nuxt/oidc-client-ts` folder.\\n1. Run `npm install` and then `npm run dev`.\\n1. The structure of the project is similar to the `keycloak-js` version but with a the use of services, stores, and middleware.\\n1. We\'ll review where we configure out Keycloak instance. First open `/services/keycloak-config.ts`. In this file you will want to update it with the values for the Keycloak instance we set-up earlier in the tutorial. Make sure you are using the one with Client Authentication enabled. Update the `clientSecret` with the value. Use and environment variable here if you wish.\\n\\n   ```json\\n   export const keycloakConfig = {\\n     authorityUrl: \\"https://euc1.auth.ac\\",\\n     applicationUrl: \\"http://localhost:3000\\",\\n     realm: \\"shared-deployment-001\\",\\n     clientId: \\"reg-example-1\\",\\n     clientSecret: \\"CLIENT_SECRET\\",\\n   };\\n   ```\\n\\n1. Switch over to the `/services/auth-service` now to see how the Oidc instance is started. The class pulls in values from the `keycloakConfig` to use in the constructor. The other functions are wrappers around methods provided by the `oidc-client` library. This allows us to key into things like `signInRedirect` and `signoutRedirect`.\\n\\n   How the settings are integrated:\\n\\n   ```javascript\\n   const settings = {\\n     authority: `${keycloakConfig.authorityUrl}/auth/realms/${keycloakConfig.realm}`,\\n     client_id: keycloakConfig.clientId,\\n     client_secret: keycloakConfig.clientSecret,\\n     redirect_uri: `${window.location.origin}/auth`,\\n     silent_redirect_uri: `${window.location.origin}/silent-refresh`,\\n     post_logout_redirect_uri: `${window.location.origin}`,\\n     response_type: \\"code\\",\\n     userStore: new WebStorageStateStore(),\\n     loadUserInfo: true,\\n   };\\n   this.userManager = new UserManager(settings);\\n   ```\\n\\n   Example function wrapper:\\n\\n   ```javascript\\n   public signInRedirect() {\\n     return this.userManager.signinRedirect();\\n   }\\n   ```\\n\\n1. With the `AuthService` defined, we can now expose that through a composable. Switch to the `/composables/useServices` file. The file is simple but provides a way for any component to hook into the service instance.\\n\\n   ```javascript\\n   import AuthService from \\"@/services/auth-service\\";\\n   import ApplicationService from \\"@/services/application-service\\";\\n   import { useAuth } from \\"@/stores/auth\\";\\n\\n   export const useServices = () => {\\n     const authStore = useAuth();\\n\\n     return {\\n       $auth: new AuthService(),\\n       $application: new ApplicationService(authStore.access_token),\\n     };\\n   };\\n   ```\\n\\n   We pull in the `AuthService` then expose it through the `$auth` variable. The `$application` variable exposes the `ApplicationService` which is provided as an example of how you could secure API calls.\\n\\n1. We leverage the [`pinia`](https://pinia.vuejs.org/) library to make store User information to make it easily accessible. Open `/stores/auth/index`. From within this file, we can wrap the `User` object exposed by the `oidc-client` package. This can then be leveraged in the middleware function we want to define or to pull information quickly about the user.\\n1. There are a few main pages in play here that we define to create paths the library can leverage. The `/pages/auth`, `/pages/logout`, `/pages/silent-refresh` create paths at the same name. These are used to do the redirection during authentication or log out. From within these we use the `AuthService` to direct the user around within the app. For instance in `/auth`:\\n\\n   ```javascript\\n   const authenticateOidc = async () => {\\n     try {\\n       await services.$auth.signInCallback();\\n       router.push(\\"/\\");\\n     } catch (error) {\\n       console.error(error);\\n     }\\n   };\\n\\n   await authenticateOidc();\\n   ```\\n\\n   The `router.push` naively sends someone to the home page. This could be updated to go to any number of places, including the page one started the login flow from if you were to store that information to be retrieved.\\n\\n1. We have also created a middleware file in `/middleware/auth.global` to be used in a couple of ways. It checks if the user is authenticated and based on that knowledge, stores the user information in the store (if not there) or could be used to send someone to login. For our example, we created buttons to initiate that but there is a comment which shows how you could force a set of paths to require login.\\n\\n   ```javascript\\n   const authFlowRoutes = [\\"/auth\\", \\"/silent-refresh\\", \\"/logout\\"];\\n\\n   export default defineNuxtRouteMiddleware(async (to, from) => {\\n     const authStore = useAuth();\\n     const services = useServices();\\n     const user = (await services.$auth.getUser()) as User;\\n\\n     if (!user && !authFlowRoutes.includes(to.path)) {\\n       // use this to automatically force a sign in and redirect\\n       // services.$auth.signInRedirect();\\n     } else {\\n       authStore.setUpUserCredentials(user);\\n     }\\n   });\\n   ```\\n\\n1. Now that we have all the things setup, we can define the user component `/components/User` to easily pull information about the user\'s state and display the appropriate UI.\\n\\n   ```javascript\\n   const authStore = useAuth();\\n   const user = authStore.user;\\n\\n   const signIn = () => services.$auth.signInRedirect();\\n   const signOut = () => services.$auth.logout();\\n   ```\\n\\n   With this, the user object is now easily available. A simple `v-if=\\"user\\"` allows the app to determine what UI to show.\\n\\n1. A bit more complicated of a setup, but more elegant in the handling of the logged in flow. The `oidc-client` allows for much better fine-tuning of the experience.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"secure-django","metadata":{"permalink":"/blog/secure-django","source":"@site/blog/2023-08-31-secure-django.mdx","title":"Django Web Authentication with Keycloak","description":"Learn how to quickly secure a Django application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2023-08-31T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"django","permalink":"/blog/tags/django"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":5.43,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"secure-django","title":"Django Web Authentication with Keycloak","description":"Learn how to quickly secure a Django application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","django","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Securing Nuxt Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt"},"nextItem":{"title":"Securing Next.js Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\n[Django](https://www.djangoproject.com/) is a high-level, open-source web framework for building web applications using the Python programming language. It follows the Model-View-Controller (MVC) architectural pattern.\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to secure a Django Web application.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Django example](https://github.com/p2-inc/examples/tree/main/frameworks/django). We are also building [Keycloak examples](https://github.com/p2-inc/examples) for other frameworks.\\n\\n:::\\n\\n## Setting up a Django Project\\n\\nThe following could be applied to an existing Django application, but we have chosen to use the excellent tutorial application built by [Mozilla](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django) as our example. If you aren\'t yet familiar with Django, we encourage you to follow the tutorial there.\\n\\nThe completed code for that tutorial is available in their GitHub repository. We\'ll clone it to get started.\\n\\n### Quick Start\\n\\nTo get this project up and running locally on your computer:\\n\\n1. Set up the [Python development environment](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/development_environment).\\n   We recommend using a Python virtual environment.\\n1. Assuming you have Python setup, run the following commands (if you\'re on Windows you may use `py` or `py -3` instead of `python` to start Python):\\n   ```\\n   pip install -r requirements.txt\\n   python manage.py makemigrations\\n   python manage.py migrate\\n   python manage.py collectstatic\\n   python manage.py test # Run the standard tests. These should all pass.\\n   python manage.py createsuperuser # Create a superuser\\n   python manage.py runserver\\n   ```\\n1. Open a browser to `http://127.0.0.1:8000/admin/` to open the admin site\\n1. Create a few test objects of each type.\\n1. Open tab to `http://127.0.0.1:8000` to see the main site, with your new objects.\\n\\n## Setting up a Keycloak Instance\\n\\nBefore customizing the Django app, we need to set up and configure our Keycloak instance.\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Install and configure the Django OIDC library\\n\\nNow that we\'ve installed and configured Keycloak, we need to setup Django to replace the native authentication method provided by the framework. The first task is to install a library that is compatible with Keycloak\'s OIDC implementation.\\n\\nThe [mozilla-django-oidc](https://mozilla-django-oidc.readthedocs.io/) library provides an easy way to integrate Keycloak (or any OpenID Connect-compliant identity provider) with your Django app. It abstracts many of the complexities of integrating authentication and authorization. Here\'s how you can set it up:\\n\\n1. **Install the Package**:\\n   Install the `mozilla-django-oidc` package using pip:\\n\\n   ```bash\\n   pip install mozilla-django-oidc\\n   ```\\n\\n2. **Configure Django Settings**:\\n   Update your Django app\'s `settings.py` to include the necessary configurations for `mozilla-django-oidc`:\\n\\n   ```python\\n   INSTALLED_APPS = [\\n       # ...\\n       \'django.contrib.auth\',\\n       \'mozilla_django_oidc\',  # Load after django.contrib.auth\\n       # ...\\n   ]\\n\\n   AUTHENTICATION_BACKENDS = (\\n       \'mozilla_django_oidc.auth.OIDCAuthenticationBackend\',\\n       # ...\\n   )\\n\\n   OIDC_RP_CLIENT_ID = \'your-client-id\'\\n   OIDC_RP_CLIENT_SECRET = \'your-client-secret\'\\n   OIDC_OP_AUTHORIZATION_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/auth\'\\n   OIDC_OP_TOKEN_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/token\'\\n   OIDC_OP_USER_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/userinfo\'\\n   OIDC_OP_JWKS_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/certs\'\\n   OIDC_RP_SIGN_ALGO = \'RS256\'\\n\\n   LOGIN_URL = \'oidc_authentication_init\'\\n   LOGOUT_REDIRECT_URL = \'/\'\\n   LOGIN_REDIRECT_URL = \'/\'\\n   ```\\n\\n   Replace `your-client-id`, `your-client-secret`, and the Keycloak URLs with your actual Keycloak configurations.\\n\\n3. **Add URLs**:\\n   Update your Django app\'s `urls.py` to include the authentication URLs provided by `mozilla-django-oidc`:\\n\\n   ```python\\n   urlpatterns += [\\n       path(\'oidc/\', include(\'mozilla_django_oidc.urls\')),\\n   ]\\n   ```\\n\\n## Using it in your app\\n\\n### Protect your views\\n\\nUse Decorators for Access Control. You can now use the `@oidc_protected` decorator to protect views that require authentication and potentially specific roles:\\n\\n```python\\nfrom mozilla_django_oidc.decorators import oidc_protected\\n\\n@oidc_protected\\ndef protected_view(request):\\n    # Your view logic\\n```\\n\\n### Accessing user information\\n\\nYou can access user information after authentication using the `request.oidc_user` attribute. For example:\\n\\n```python\\ndef profile_view(request):\\n    user_info = request.oidc_user.userinfo\\n    # Access user_info[\'sub\'], user_info[\'email\'], etc.\\n    # Your view logic\\n```\\n\\nBy default, `mozilla-django-oidc` looks up a Django user matching the email field to the email address returned in the user info data from Keycloak.\\n\\nIf a user logs into your site and doesn\u2019t already have an account, by default, `mozilla-django-oidc` will create a new Django user account. It will create the User instance filling in the username (hash of the email address) and email fields.\\n\\n#### Use Username rather than Email\\n\\n`mozilla-django-oidc` defaults to setting up Django users using the email address as the user name from keycloak was required. Fortunately, `preferred_username` is set up by default in Keycloak as a claim. The claim can used by overriding the `OIDCAuthenticationBackend` class in `mozilla_django_oidc.auth` and referring to this in `AUTHENTICATION_BACKENDS` as below:\\n\\n```python\\n\\n# Classes to override default OIDCAuthenticationBackend (Keycloak authentication)\\nfrom mozilla_django_oidc.auth import OIDCAuthenticationBackend\\n\\nclass KeycloakOIDCAuthenticationBackend(OIDCAuthenticationBackend):\\n\\n def create_user(self, claims):\\n     \\"\\"\\" Overrides Authentication Backend so that Django users are\\n         created with the keycloak preferred_username.\\n         If nothing found matching the email, then try the username.\\n     \\"\\"\\"\\n     user = super(KeycloakOIDCAuthenticationBackend, self).create_user(claims)\\n     user.first_name = claims.get(\'given_name\', \'\')\\n     user.last_name = claims.get(\'family_name\', \'\')\\n     user.email = claims.get(\'email\')\\n     user.username = claims.get(\'preferred_username\')\\n     user.save()\\n     return user\\n\\n def filter_users_by_claims(self, claims):\\n     \\"\\"\\" Return all users matching the specified email.\\n         If nothing found matching the email, then try the username\\n     \\"\\"\\"\\n     email = claims.get(\'email\')\\n     preferred_username = claims.get(\'preferred_username\')\\n\\n     if not email:\\n         return self.UserModel.objects.none()\\n     users = self.UserModel.objects.filter(email__iexact=email)\\n\\n     if len(users) < 1:\\n         if not preferred_username:\\n             return self.UserModel.objects.none()\\n         users = self.UserModel.objects.filter(username__iexact=preferred_username)\\n     return users\\n\\n def update_user(self, user, claims):\\n     user.first_name = claims.get(\'given_name\', \'\')\\n     user.last_name = claims.get(\'family_name\', \'\')\\n     user.email = claims.get(\'email\')\\n     user.username = claims.get(\'preferred_username\')\\n     user.save()\\n     return user\\n```\\n\\nIn settings.py, overide the new library you have just added in AUTHENTICATION_BACKENDS :\\n\\n```python\\n # mozilla_django_oidc - Keycloak authentication\\n \\"fragalysis.auth.KeycloakOIDCAuthenticationBackend\\",\\n```\\n\\n### Logging out\\n\\nYou can use the `@oidc_logout` decorator to log the user out of both your app and Keycloak:\\n\\n```python\\nfrom mozilla_django_oidc.decorators import oidc_logout\\n\\n@oidc_logout\\ndef logout_view(request):\\n    # Your logout view logic\\n```\\n\\n## Add support for Django Rest Framework\\n\\nDjango Rest Framework (DRF) is a flexible toolkit built on top of Django, specifically designed for building RESTful APIs.\\n\\nIf you want DRF to authenticate users based on an OAuth access token provided in the Authorization header, you can use the DRF-specific authentication class which ships with the package.\\n\\nAdd this to your settings:\\n\\n```python\\nREST_FRAMEWORK = {\\n    \'DEFAULT_AUTHENTICATION_CLASSES\': [\\n        \'mozilla_django_oidc.contrib.drf.OIDCAuthentication\',\\n        \'rest_framework.authentication.SessionAuthentication\',\\n        # other authentication classes, if needed\\n    ],\\n}\\n```\\n\\nNote that this only takes care of authenticating against an access token, and provides no options to create or renew tokens.\\n\\nIf you\u2019ve created a custom Django OIDCAuthenticationBackend and added that to your AUTHENTICATION_BACKENDS, the DRF class should be smart enough to figure that out. Alternatively, you can manually set the OIDC backend to use:\\n\\n```python\\nOIDC_DRF_AUTH_BACKEND = \'mozilla_django_oidc.auth.OIDCAuthenticationBackend\'\\n```\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-nextjs","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs","source":"@site/blog/2023-08-14-secure-nextjs.mdx","title":"Securing Next.js Apps with Keycloak","description":"Learn how to quickly secure a Next.js application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2023-08-14T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"nextjs","permalink":"/blog/tags/nextjs"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"reactjs","permalink":"/blog/tags/reactjs"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.4,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-nextjs","title":"Securing Next.js Apps with Keycloak","description":"Learn how to quickly secure a Next.js application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","nextjs","react","reactjs","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Django Web Authentication with Keycloak","permalink":"/blog/secure-django"},"nextItem":{"title":"Open Source User Management, SSO, and Secure Pages for ReactJS","permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to to quickly secure a Next.js application with user management and single sign on (SSO) using the open source IAMs Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Next.js example](https://github.com/p2-inc/examples/tree/main/frameworks/nextjs). We also have a plain [React example](https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Next.js Project\\n\\n:::info\\nWe will use the Phase Two Next.js example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\nThis example uses Next.js 13 and splits `server` and `client` components accordingly.\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Next.js [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nextjs) within `/frameworks/nextjs`.\\n1. Run `npm install` and then `npm run dev`. This example leverages [NextAuth.js](https://next-auth.js.org/) to provide hook and HOC support.\\n1. NextAuth.js configures an API route that is uses for the Authentication of the Client. It generates the routes automatically for you. These are added to Next.js in the `api/auth/[...nextauth]/route.ts` file.\\n1. Open the `src/lib/auth.ts` file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the **Client secret** from the OIDC client creation section for the value of `clientSecret`\\n\\n   ```js\\n   const authServerUrl = \\"https://euc1.auth.ac/auth/\\";\\n   const realm = \\"shared-deployment-001\\";\\n   const clientId = \\"reg-example-1\\";\\n   const clientSecret = \\"CLIENT_SECRET\\"; // Paste \\"Client secret\\" here. Use Environment variables in prod\\n   ```\\n\\n   Those are used to popluate the `AuthOptions` config for the `KeycloakProvider`:\\n\\n   ```js\\n   export const AuthOptions: NextAuthOptions = {\\n     providers: [\\n       KeycloakProvider({\\n         clientId,\\n         clientSecret,\\n         issuer: `${authServerUrl}realms/${realm}`,\\n       }),\\n     ],\\n   };\\n   ```\\n\\n   The config is then provided to the `AuthProvider` in the `/src/app/layout.tsx` file. Next.js uses this file to generate an HTML view for this page.\\n\\n   ```js\\n   import { NextAuthProvider as AuthProvider } from \\"./providers\\";\\n   ...\\n   <AuthProvider {...oidcConfig}>\\n     <App />\\n   </AuthProvider>\\n   ```\\n\\n   At this point our entire application will be able to access all information and methods needed to perform authentication. View the `providers.tsx` file for additional information about how the `SessionProvider` is used. The `SessionProvider` enables use of Hooks to derive the authenticated state. View `user.component.tsx` for exactly how the code is authenticating your user. The sections rendering the \\"Log in\\" and \\"Log out\\" buttons are conditional areas based on the authenticated context. The buttons invoke functions provided by NextAuth.\\n\\n   The logic using the hook to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n1. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be \\"Not authenticated\\". Click **Log In**. This will redirect you to your login page.\\n\\n   :::info\\n   Use the non-admin user created in the previous section to sign in.\\n   :::\\n\\n1. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your \\"Authenticated\\" state, displaying your user\'s email and their Token.\\n1. After your first log in, click **Log out**. Then click **Log in** again. Notice how this time you will not be redirected to sign in as your state is already in the browser. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-reactjs","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs","source":"@site/blog/2023-08-02-secure-reactjs.mdx","title":"Open Source User Management, SSO, and Secure Pages for ReactJS","description":"Learn how to quickly secure a Reactjs application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","date":"2023-08-02T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"frameworks","permalink":"/blog/tags/frameworks"},{"inline":true,"label":"reactjs","permalink":"/blog/tags/reactjs"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":2.635,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-reactjs","title":"Open Source User Management, SSO, and Secure Pages for ReactJS","description":"Learn how to quickly secure a Reactjs application with user management and SSO using the open source IAMs Keycloak for Authentication and Authorization","authors":"phasetwo","tags":["phase_two","tutorial","frameworks","reactjs","react","authentication","authorization","sso"]},"unlisted":false,"prevItem":{"title":"Securing Next.js Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs"},"nextItem":{"title":"Launching Dedicated Clusters of Phase Two\'s Enhanced Keycloak Distribution","permalink":"/blog/dedicated-launch"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and single sign on (SSO) using the open source Identity and Access Management System (IAM) Keycloak for Authentication and Authorization. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [ReactJS example](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a ReactJS Project\\n\\n:::info\\nWe will use the Phase Two ReactJS example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the ReactJS [folder](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs) within `/frameworks/reactjs`.\\n1. Run `npm install` and then `npm start`. This example leverages [react-oidc-context](https://github.com/authts/react-oidc-context/tree/f175dcba6ab09871b027d6a2f2224a17712b67c5) (which uses [oidc-client-ts](https://github.com/authts/oidc-client-ts)) to provide hook and HOC support.\\n1. Open the `index.tsx` file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code.\\n\\n   ```js\\n   const authServerUrl = \\"https://euc1.auth.ac/auth/\\";\\n   const realm = \\"shared-deployment-001\\";\\n   const client = \\"reg-example-1\\";\\n   ```\\n\\n   Those are used to popluate the OIDC config\\n\\n   ```js\\n   const oidcConfig = {\\n     authority: `${authServerUrl}realms/${realm}`,\\n     client_id: client,\\n     redirect_uri: \\"http://localhost:3000/authenticated\\",\\n     onSigninCallback: (args: any) =>\\n       window.history.replaceState(\\n         {},\\n         document.title,\\n         window.location.pathname\\n       ),\\n   };\\n   ```\\n\\n   The config is then provided to the `AuthProvider`.\\n\\n   ```js\\n   <AuthProvider {...oidcConfig}>\\n     <App />\\n   </AuthProvider>\\n   ```\\n\\n   At this point our entire applicationw will be able to access all information and methods needed to perform authentication. View `Auth.tsx` for exactly how the code is authenticating your user. The sections rendering the \\"Log in\\" and \\"Log out\\" buttons are conditional areas based on the authenticated context.\\n\\n   The logic using the hook to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n1. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be \\"Not authenticated\\". Click **Log In**. This will redirect you to your login page.\\n\\n   :::info\\n   Use the non-admin user created in the previous section to sign in.\\n   :::\\n\\n1. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your \\"Authenticated\\" state, displaying your user\'s email and their Token.\\n1. After your first log in, click **Log out**. Then click **Log in** again. Notice how this time you will not be redirected to sign in as your state is already in the browser. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (passwordless sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"dedicated-launch","metadata":{"permalink":"/blog/dedicated-launch","source":"@site/blog/2023-07-10-dedicated-launch.md","title":"Launching Dedicated Clusters of Phase Two\'s Enhanced Keycloak Distribution","description":"Phase Two launches dedicated clusters to host their enhanced Keycloak distribution for better compute, network, and storage isolation for customer workloads.","date":"2023-07-10T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":3.82,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"dedicated-launch","title":"Launching Dedicated Clusters of Phase Two\'s Enhanced Keycloak Distribution","description":"Phase Two launches dedicated clusters to host their enhanced Keycloak distribution for better compute, network, and storage isolation for customer workloads.","authors":"phasetwo","tags":["release","keycloak","phase_two","cockroach"]},"unlisted":false,"prevItem":{"title":"Open Source User Management, SSO, and Secure Pages for ReactJS","permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs"},"nextItem":{"title":"How To Customize Login Pages","permalink":"/blog/customizing-login-pages"}},"content":"We\'re excited today to announce the launch of our dedicated clusters offering. Our Phase Two enhanced Keycloak distribution is now available as a hosted, dedicated cluster in the region of your choice.\\n\\nAbout 9 months ago, we launched our self-service, shared deployments, offering customers the ability to [create](https://phasetwo.io/dashboard/) Phase Two enhanced Keycloak realms on our shared clusters. Over that period, we\'ve provided over 700 free realms for testing and small production use cases. Many of you have reached out to us asking about an SLA, isolated resources, and ability to grow into larger use cases. Based on your requests and feedback, we built out our dedicated cluster offering.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is Phase Two again?\\n\\nPhase Two helps SaaS builders accelerate time-to-market and enterprise adoption with powerful SSO, identity and user management features. To that end, Phase Two has created an enhanced distribution of [Keycloak](https://www.keycloak.org/) that bundles several essential [open source extensions](https://github.com/p2-inc) for modern SaaS use cases. We support hosted and on-prem customers for a variety of use cases.\\n\\n### Why dedicated?\\n\\nDedicated clusters allow us to provide compute, network and storage isolation for customer workloads, and to easily deploy in the region where customer\'s users are. With dedicated clusters, we can guarantee an [SLA](/docs/sla) that meets customer\'s needs with no resource contention from other customers.\\n\\nFurthermore, it allows us to support customer-provided domain names, and access to monitoring and management capabilities not available in the shared clusters.\\n\\n### How did you do it?\\n\\nWe built out our dedicated cluster offering using the best-of-breed open source tools and managed services.\\n\\nThe core consists of Kubernetes clusters in each [supported AWS and GCP region](/docs/self-service/dedicated-clusters#regions). New dedicated clusters are provisioned instantly using FluxCD, a continuous delivery solution that gives us the history and auditability of git. Monitoring and alerting is done using Prometheus, Grafana, and a suite of external services that give us a complete view of cluster health.\\n\\nThe database tier uses a managed CockroachDB service provided by [Cockroach Labs](https://www.cockroachlabs.com/). Phase Two is the only provider that is capable of hosting the current Keycloak distribution (the \\"legacy\\" store) using CockroachDB. Working with Cockroach Labs gives us the expertise and reliability from hosting thousands of customer clusters at massive scale.\\n\\n### Take me to it!\\n\\nStarting today, you\'ll be able to [log into the updated dashboard](https://phasetwo.io/dashboard), and create your dedicated cluster by selecting a region and setting up your billing information.\\n\\n![Keycloak Phase Two Self-Host Cluster Creation](/docs/dedicated-clusters-create.png)\\n\\nFollowing successful billing setup, you will be returned to the Dashboard while your Cluster is provisioned. Once provisioned, you\'ll be able to create up to 20 realms per cluster, using the same easy setup as you are used to in the shared deployment offering.\\n\\n![Keycloak Phase Two Self-Host Cluster Creation Status](/docs/dedicated-clusters-pending.png)\\n\\nMost clusters will be provisioned within 30 minutes, but some requests may take up to 24 hours. Additionally, for payment types such as ACH or SEPA, cluster provisioning will begin following payment clearing (up to 4 days in some cases).\\n\\n### How much does it cost?\\n\\n[Plans](/#pricing) start at $499US per month when paid annually. This provides a set of compute, network and storage resources that have been tested for common use cases for up to 20 realms and 1 million users. If your use case is uncommon or you plan to scale beyond that, our system is designed to scale up with your needs. Our plans scale linearly with resource demands beyond our minimums.\\n\\nWe will continue to support a robust Free tier.\\n\\n### What\'s next? (psst... Global clusters)\\n\\nMany of our on-prem, suppport customers with large use cases asked us to build out a solution for massive-scale, fault-tolerant, multi-region use cases. One of the great parts of building support for Keycloak\'s existing storage system for CockroacDB is that we\'ve been able to explore use cases that were previously impossible using the standard Keycloak distribution, or required complex, error-prone configurations. For use cases with these requirements, plus global proximity to users and regional failover, we built global clusters, backed by CockroachDB multi-region database, for which we are now in _beta_.\\n\\nThese clusters provide a minimum of 3 global regions, with 3 instances of Phase Two enhanced Keycloak per region. Global server load balancing provides geographic region affinity and failover to connect your users with the closest, available instances.\\n\\nThere will be two price tiers for global clusters, depending on your use of our shared CockroachDB clusters, or your own dedicated clusters. We expect to launch general availability of global clusters later in Q3 2023.\\n\\nPlease contact [sales@phasetwo.io](mailto:sales@phasetwo.io) to talk to us about your global cluster use case."},{"id":"customizing-login-pages","metadata":{"permalink":"/blog/customizing-login-pages","source":"@site/blog/2023-04-21-customizing-login-pages.md","title":"How To Customize Login Pages","description":"Brand is important to modern SaaS companies, and nowhere is that more apparent than at the front door: the login experience. Unfortunately, the default design of the Keycloak login experience has a \\"face only a mother could love\\".","date":"2023-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"themes","permalink":"/blog/tags/themes"},{"inline":true,"label":"login","permalink":"/blog/tags/login"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":2.515,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"customizing-login-pages","title":"How To Customize Login Pages","authors":"phasetwo","tags":["phase_two","themes","login","keycloak"]},"unlisted":false,"prevItem":{"title":"Launching Dedicated Clusters of Phase Two\'s Enhanced Keycloak Distribution","permalink":"/blog/dedicated-launch"},"nextItem":{"title":"Changing Our License to Elastic License v2 to Enable Hosting and Derivative Works","permalink":"/blog/licensing-change"}},"content":"Brand is important to modern SaaS companies, and nowhere is that more apparent than at the front door: the login experience. Unfortunately, the default design of the Keycloak login experience has a \\"face only a mother could love\\".\\n\\nIn order to allow customers to customize that experience, we\'ve extended the default Keycloak theming functionality to allow you to easily customize the login pages from the admin console. This eliminates the need to package and deploy a custom theme, and allows fast iteration without restart.\\n\\n\x3c!--truncate--\x3e\\n\\n## Simple customization\\n\\nIf you\'re in a hurry, logo and color customization can be achieved by adding your logo\'s URL and three color choices. These are available in the _General_ and _Login_ tabs of the **Styles** section.\\n\\n![Keycloak Phase Two Login Page Customization Logo URL](/blog/2023-04-21-styles-general.png)\\n\\n![Keycloak Phase Two Login Page Customization Styles Configuration](/blog/2023-04-21-styles-login.png)\\n\\nIn order for these setting to take effect, your **Realm Settings** _Themes_ must also be set to `Attributes` for the _Login theme_ type\\n\\n![Keycloak Phase Two Login Page Theme Setting](/blog/2023-04-21-theme-attributes.png)\\n\\n## Full customization using CSS\\n\\nMany of you will have more stringent branding requirements. For this, you can override the styles of the default Keycloak login theme. To discover the base styles that are available using this theme, we recommend\\n\\nNote that using CSS overrides will cause the colors from simple customization not to work.\\n\\nIn order to load your CSS, paste it into the \\"CSS\\" field in the _Login_ tab of the **Styles** section.\\n\\n![Keycloak Phase Two Login Page Custom CSS](/blog/2023-04-21-styles-css.png)\\n\\nThis CSS will be the last CSS loaded, overridding the styles in the default `keycloak` login theme.\\n\\nReferences:\\n\\n- [Keycloak login CSS](https://github.com/keycloak/keycloak/blob/main/themes/src/main/resources/theme/keycloak/login/resources/css/login.css) - The default CSS for the `keycloak` login theme.\\n- [Patternfly 4](https://www.patternfly.org/) - The styling library used by the theme.\\n\\n### CSS Examples\\n\\nTo get you started with some ideas, we\'ve created 3 example login themes that were done by overridding the CSS. These are free of license restriction, so feel free to download, use and customize the CSS at the links with the example images.\\n\\n- Consumer - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/consumer/login.css)\\n  ![Keycloak Phase Two Login Page Consumer Theme](/blog/2023-04-21-consumer-theme.png)\\n\\n- Enterprise - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/enterprise/login.css)\\n  ![Keycloak Phase Two Login Page Enterprise Theme](/blog/2023-04-21-enterprise-theme.png)\\n\\n- SaaS - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/saas/login.css)\\n  ![Keycloak Phase Two Login Page SaaS Theme](/blog/2023-04-21-saas-theme.png)\\n\\n#### Images and other assets\\n\\nYou\'ll notice that images, icons and fonts not found in the standard Keycloak themes are used. These are referenced by URL in the CSS. For example, if you are used to loading a custom font in the `<head>` of your HTML, it is possible to do it in CSS using `@import`:\\n\\n```css\\n@import url(\\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Lexend+Deca:wght@300;400;500;600;700&family=Lexend:wght@300;400;500;600;700&family=Work+Sans:wght@300;400;500;600;700&display=swap\\");\\n```\\n\\nAnd background and other images can be referenced by their full URL using `url(...)`:\\n\\n```css\\n.login-pf body {\\n  background-image: url(\\"https://raw.githubusercontent.com/p2-inc/keycloak-themes/main/examples/saas/assets/SaaS%20BG.webp\\");\\n}\\n```\\n\\n## Success!\\n\\nAs always, our success is based on the success of our customers. We hope this extension and guide has helped you update the default Keycloak login branding to match that of your needs. If you have suggestions for further improvement of this feature, please reach out on GitHub!"},{"id":"licensing-change","metadata":{"permalink":"/blog/licensing-change","source":"@site/blog/2023-01-28-licensing-change.md","title":"Changing Our License to Elastic License v2 to Enable Hosting and Derivative Works","description":"Phase Two changes to Elastic License v2 to enable hosting and usage of extensions by customers.","date":"2023-01-28T00:00:00.000Z","tags":[{"inline":true,"label":"oss","permalink":"/blog/tags/oss"},{"inline":true,"label":"license","permalink":"/blog/tags/license"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.355,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"licensing-change","title":"Changing Our License to Elastic License v2 to Enable Hosting and Derivative Works","description":"Phase Two changes to Elastic License v2 to enable hosting and usage of extensions by customers.","authors":"phasetwo","tags":["oss","license","phase_two"]},"unlisted":false,"prevItem":{"title":"How To Customize Login Pages","permalink":"/blog/customizing-login-pages"},"nextItem":{"title":"Setting up SSO with Phase Two and Keycloak","permalink":"/blog/sso-setup"}},"content":"### tl;dr\\n\\nWe\u2019ve changed the license of our [core extensions](/docs/introduction/open-source#components-and-repos) from the [AGPL v3](https://www.gnu.org/licenses/agpl-3.0.en.html) to the [Elastic License v2](https://github.com/elastic/elasticsearch/blob/main/licenses/ELASTIC-LICENSE-2.0.txt). We wanted to share why we made this change and what it means for our customers and community.\\n\\n\x3c!--truncate--\x3e\\n\\n### Why?\\n\\nFrom our earliest stages, Phase Two has been built as a set of extensions to [Keycloak](https://keycloak.org). We have made a commitment that source code for our core extensions will always be available so that our customers can migrate to their own deployment, while maintaining the extension functionality provided by Phase Two.\\n\\nAs our product matured and found a market fit, it became clear to us that our current license was failing to give our customers that guarantee, and failing to give our company the protection to ensure we could build a business and continue to invest in our extensions.\\n\\nWe\'ve had some very deep conversations with customers and contributors about the future of licensing, and learned a lot about what other companies in our shoes have done. We truly appreciate all of the engagement and feedback, and have done our best to make a decision that is in the best interest of our company, customers and community.\\n\\n### What\'s allowed?\\n\\n1. Hosting and using the extensions by companies as part of their own product.\\n2. Derivative works that maintain the same license.\\n\\n### What\'s prohibited?\\n\\n1. Providing the extensions as a hosted or managed service. This includes bundling and distribution by companies who sell their products for on-prem and private cloud use.\\n\\nWe believe that the Elastic License strikes a great balance, and we\'re excited for our next phase of growth!"},{"id":"sso-setup","metadata":{"permalink":"/blog/sso-setup","source":"@site/blog/2022-11-23-sso-setup.md","title":"Setting up SSO with Phase Two and Keycloak","description":"SSO setup and configuration with Phase Two\'s Hosted Keycloak offering","date":"2022-11-23T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.44,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"sso-setup","title":"Setting up SSO with Phase Two and Keycloak","description":"SSO setup and configuration with Phase Two\'s Hosted Keycloak offering","authors":"phasetwo","tags":["tutorial","keycloak","phase_two","sso"]},"unlisted":false,"prevItem":{"title":"Changing Our License to Elastic License v2 to Enable Hosting and Derivative Works","permalink":"/blog/licensing-change"},"nextItem":{"title":"Secure Your Application With Keycloak","permalink":"/blog/securing-apps-with-keycloak"}},"content":"We\'ve received a lot of support requests about the right way to set up [SSO](https://phasetwo.io/product/sso/) connections. We\'ve published a 5 minute video showing you how to do it easily. Also, the script is included below in case you miss anything!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/wAeT07JGhOI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\x3c!--truncate--\x3e\\n\\n### Script\\n\\nDevelopers have been asking for concise [setup instructions for SSO](https://phasetwo.io/docs/sso/). You\u2019re here for our enterprise SSO functionality. We hear you. Here\u2019s a quick live setup to show you how easy it is to leverage an open source SSO provider\\n\\nI\u2019m assuming you have already created a self-serve deployment.\\n\\n- Start by opening the console.\\n- Navigate to the **Organizations** tab.\\n- Create a new organization. In this case, set a domain when creating an organization that corresponds to the email domains you want to match to their SSO provider.\\n- Create a **Portal Link** by selecting it from the action menu of the organization. This is usually meant to be sent to the organization administrator, but in this case, we\u2019ll open this link in an incognito window and configure the identity provider ourselves.\\n\\nWe\u2019ll use the identity provider wizard to setup a SSO connection to Azure AD. I\u2019ve sped this up a bit, but you\u2019ll get an idea of what is happening. Depending on your setup and target identity provider, this will be different.\\n\\nNow let\u2019s secure an application and use our new SSO connection to log in. For this purpose, we\u2019ve got a debugging application on Github you can use to quickly see how a front end application is secured and what data is shared between Phase Two and the application.\\n\\n- Clone our [debug-app](https://github.com/p2-inc/debug-app) from github, and open up the `frontend` folder in your favorite editor or IDE.\\n- Go back to the admin console and navigate to the **Clients** tab. Create a new client. Let\u2019s call it `frontend`. This will be a public OIDC client, with localhost:3001 as the root and redirect uri.\\n- Get the `keycloak.json` from the configuration and copy it. Paste it into `keycloak.json` to configure your `debug-app`.\\n\\nBefore we continue, we need to configure an authentication flow that does our SSO redirect.\\n\\n- Navigate to the **Authentication** tab, and duplicate the **Browser** flow.\\n- Add the **Home IdP Discovery** authenticator and move it into the position before the user forms. Configure it to not require a verified domain nor email.\\n- Finally, using the action menu, bind it to the browser flow.\\n\\nGo back to the `debug-app`, and let\u2019s try a login using an email domain that matches the one we configured.\\n\\n- First, run `npm i` and `npm start` to start the debug app, and navigate to http://localhost:3001 in your browser. See that it redirects to the default login.\\n- Enter the email address in the new email only form.\\n- We are redirected to the Azure identity provider we set up.\\n- Log in to Azure, and then we are redirected to back to `debug-app`.\\n- Let\u2019s take a look at the token and see the data that came over from Azure.\\n\\nAs a bonus, let\u2019s map some information about the user\u2019s organization memberships into the token in case we need to do something with that information in our application.\\n\\n- Go back to the Admin UI and navigate to the Client we created.\\n- Select the **frontend-dedicated** client scope.\\n- Add a mapper by configuration.\\n- Select the **Organization Role** mapper and configure it as shown.\\n- Save the configuration.\\n\\nNow let\u2019s go back to the `debug-app` and reload.\\n\\n- Take a look at the token. It now contains information about the organization we created.\\n- The user was automatically created and added as a member to the organization when we logged in through the Azure identity provider.\\n\\nYou now have a fully working authentication and enterprise SSO setup for your application. It took about 5 minutes!\\n\\nIn addition, by choosing an open source SSO provider in Keycloak, you have also picked a cost-effective option too. Read more about [understanding the costs](https://phasetwo.io/blog/open-source-iam/) of implementing an open source provider for IAM."},{"id":"securing-apps-with-keycloak","metadata":{"permalink":"/blog/securing-apps-with-keycloak","source":"@site/blog/2022-10-17-securing-apps-with-keycloak.md","title":"Secure Your Application With Keycloak","description":"Enabling Authentication and Authorization on your Application using open source Keycloak to provide better security","date":"2022-10-17T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"}],"readingTime":5.94,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"securing-apps-with-keycloak","title":"Secure Your Application With Keycloak","description":"Enabling Authentication and Authorization on your Application using open source Keycloak to provide better security","authors":"phasetwo","tags":["tutorial","keycloak","phase_two","sso","authentication","authorization"]},"unlisted":false,"prevItem":{"title":"Setting up SSO with Phase Two and Keycloak","permalink":"/blog/sso-setup"},"nextItem":{"title":"Magic Links Guide, and 5 Minute Setup for Open Source Passwordless Authentication and Better Security","permalink":"/blog/set-up-magic-links"}},"content":"There are a lot of guides out there, official and unofficial, for how to secure applications with Keycloak. The subject is rather broad, so it\'s difficult to know where to start. To begin, we\'ll be focusing on Keycloak\'s use of OpenID Connect (OIDC), and how to use that standard, along with some helpful libraries, to secure a simple but instructive application.\\n\\nFor the purposes of the sample, we\'ll actually be using two common applications, a frontend single-page application (SPA) written in JavaScript, and a backend REST API written for Node.js. The language we selected for the sample is JavaScript, but the principles apply no matter the implementation technology you choose.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is OIDC?\\n\\nWhen learning about identity and access management technologies, you\'ll be confronted with an alphabet-soup of acronyms to learn. OIDC, or OpenID Connect is one of the most important ones for securing applications, be it browser-based, APIs, mobile or native. Our friend over at OneLogin does a great job of explaining [OIDC in plain english](https://www.onelogin.com/blog/openid-connect-explained-in-plain-english-2) for those that are curious.\\n\\nFor the purpose of this guide, it is sufficient to know that OIDC is an open authentication protocol that works on top of the OAuth 2.0 framework. OIDC allows individuals to use single sign-on (SSO) to access relying party sites using OpenID Providers (OPs), such as an email provider or social network, to authenticate their identities. It provides the application or service with information about the user, the context of their authentication, and access to their profile information.\\n\\n### Login flow\\n\\nA \\"flow\\" in OIDC terms is a mechanism of authenticating a user, and obtaning access tokens. The flow we\'ll be using in this guide is called the authorization code flow. Fortunately, the internals of the flow are not necessary to understand, as Keycloak handles the details for you.\\n\\nHowever, it is useful to see what is going on in the login process, so that you understand your user\'s experience.\\n\\n![Keycloak Authentication Flow Diagram](/blog/2022-10-17-authentication-flow.png)\\n\\n### Setup\\n\\nWe\'ll make an assumption for this guide that you are using a cloud deployment of Phase Two enhanced Keycloak. If you haven\'t already set one up, go over to the [self-service launch announcement](/blog/self-service) for details. You may also use your own Keycloak setup, but that setup is beyond the scope of this article.\\n\\nThe sample applications are available in our [demo repo](https://github.com/p2-inc/debug-app) on Github. Clone that repo to your local machine. You\'ll find the applications in the `frontend` and `backend` directory, and a set of supporting files for configuration and deployment.\\n\\n```\\ngit clone https://github.com/p2-inc/debug-app.git\\ncd debug-app\\n```\\n\\n### Client\\n\\nEvery application that Keycloak protects is considered a **Client**. Log into your Keycloak realm, and click on **Clients** in the left navigation, and click _Create client_.\\n\\n1. Enter `frontend` as the **Client ID** and click _Next_\\n2. In the **Capability config** screen, keep the defaults and click _Save_\\n3. In the **Access settings** screen, enter the following values:\\n   1. `http://localhost:3001/*` for **Valid redirect URIs**\\n   2. `+` in **Valid post logout redirect URIs**\\n   3. `+` in **Web origins**\\n4. Click _Save_\\n5. In the upper right corner, open the **Action** menu and select **Download adapter config**. Click _Download_ and move the file to the `debug-app` repo you cloned under the `frontend` folder.\\n\\n![Keycloak Client Details Setup Example](/blog/2022-10-17-client-setup.png)\\n\\n### Make a user\\n\\nBefore we run the application, we need to create a user to log in. Click on **Users** in the left navigation, and click _Add user_. You only need to give the user a username and click _Create_. Find the **Credentials** tab and click **Set password** to give the user a password.\\n\\n### Running the sample apps\\n\\nOpen two terminal windows and go to the directory of the repo you cloned in both. To start, run the following commands in each terminal:\\n\\nFrontend:\\n\\n```\\ncd frontend/\\nnpm install\\nnpm start\\n```\\n\\nBackend:\\n\\n```\\ncd backend/\\nnpm install\\nKC_REALM=<your-realm-name> KC_URL=<your-keycloak-url> npm start\\n```\\n\\nBe sure to replace the realm name, and the URL of your Keycloak installation (e.g. `https://usw2.auth.ac/auth/`).\\n\\nThis will install the necessary components using npm, and will start the servers for both applications. Note: the applications use ports 3001 and 3002 by default. If you have other applications running on these ports, you may have to temporarily shut them down.\\n\\n### Putting it all together\\n\\nLoad <a href=\\"http://localhost:3001/\\" target=\\"_blank\\">http://localhost:3001/</a> in your browser. This will load the frontend application, which will be immediately redirected to the Keycloak login page. Log in with the user you created.\\n\\nOnce you log in, you\'ll see your profile, and several menu items. First click to the **Access token** menu item. You\'ll see the information from the parsed access token that was returned by Keycloak. This contains information about the user, but also claims related to the users roles and groups. This is because access tokens are meant to be read and validated by resource servers (i.e. our backend service).\\n\\nNext, click **ID token**. You\'ll see similar information to what we saw in the access token, but limited to a standardized set of information that identifies the authentication state of the user. ID tokens are not meant for calling resource servers, and because of that, don\'t contain claims that are meant to be validated by backend services.\\n\\nClicking **Service** will call the backend service. You\'ll see a message that indicates the frontend called the backend, passing the access token, and was authorized to access a secured service.\\n\\nYou can also try the built-in Keycloak Account Management console by clicking **Account**, which gives the user a simple way to manage their information that is stored in Keycloak. It is not necessary to use this with your applications, as you may choose to build it in to your app. However, it\'s a good tool to have out of the box.\\n\\nFinally, clicking **Logout** will take you back to the login page. This is actually sending you to the frontend\'s initial page, which is redirecting you to the login page as its default behavior.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Wi9qipIDi4w\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n### What just happened?\\n\\nThere\'s a lot that goes into implementation of the OIDC flow we used to secure our sample applications. Part of the reason to use Keycloak is the mature implementation and client libraries that make protecting applications in a secure way almost trivial.\\n\\nWe encourage you to look at the source in the sample applications (specifically `frontend/app.js` and `backend/app.js`) and observe how the Keycloak client libraries are used to secure these applications. This will be a good place to start when you are working on securing your own applications.\\n\\n### Your application\\n\\nAnother incredible advantage to using standards like OIDC is that you are not constrained to using Keycloak libraries. Because your applications may not be written in JavaScript also, it\'s easy to use other language OIDC client libraries. We maintain a [list of OIDC libraries](/docs/securing-applications/#libraries), and the [OpenID Foundation](https://openid.net/) also maintains lists of [certified](https://openid.net/developers/certified/) and [uncertified](https://openid.net/developers/uncertified/) implementations\\n\\nToday you saw how to quickly secure an application using Keycloak, and learned more about the underlying OIDC standards. We look forward to seeing what you build!"},{"id":"set-up-magic-links","metadata":{"permalink":"/blog/set-up-magic-links","source":"@site/blog/2022-10-12-set-up-magic-links.md","title":"Magic Links Guide, and 5 Minute Setup for Open Source Passwordless Authentication and Better Security","description":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer passwordless authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.","date":"2022-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"magic_links","permalink":"/blog/tags/magic-links"}],"readingTime":5.545,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"set-up-magic-links","title":"Magic Links Guide, and 5 Minute Setup for Open Source Passwordless Authentication and Better Security","authors":"phasetwo","tags":["tutorial","keycloak","phase_two","magic_links"]},"unlisted":false,"prevItem":{"title":"Secure Your Application With Keycloak","permalink":"/blog/securing-apps-with-keycloak"},"nextItem":{"title":"Set Up Email in Phase Two for a Better Branding Experience","permalink":"/blog/set-up-email"}},"content":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer passwordless authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.\\n\\nBut you are here because you want to find a way to implement magic links quickly. First, some background.\\n\\nThe extension is available on [Github](https://github.com/p2-inc/keycloak-magic-link).\\n\\n\x3c!--truncate--\x3e\\n\\n### What are magic links?\\n\\nMagic links are a type of passwordless authentication that allow your users to log in to your application following a link that is emailed to them, rather than typing a username and password. Magic links can also be used as a part of a multi-factor authentication (MFA) strategy.\\n\\nIn a magic link flow, the application\'s authentication provider asks users for an email address rather than a password. The authentication provider generates a link with an embedded token, and sends to the user\'s email. There may be some other steps taken by the provider, such as verifying the provided email address matches an existing user. The user then opens the email, clicks the link, is verified by the authentication provider, and is granted access to the application\\n\\n![Keycloak Phase Two Magic Link Extension Flow Diagram](/blog/2022-10-12-set-up-magic-links-flow.png)\\n\\n### Pros and cons\\n\\nLike any mechanism that tries to streamline a security process such as authentication, there are both pros and cons to the magic link approach. First in the plus column:\\n\\n- Enhances user experience, which makes users more likely to use your application, and be satisfied with the experience. This drives user engagement.\\n- User onboarding is accelerated, as magic links can be sent to new users as well as existing ones. Registration for your application is as easy as entering your email address.\\n- You\'ll never have a password breach. When there are no passwords, there are no password breaches. A huge number of corporate data breaches are due to insufficient and compromised passwords.\\n- No more customer support requests related to lost passwords. Over half of customer support requests are due to authentication problems, many of those are users unable to remember their passwords. This eliminates a huge portion of those.\\n\\nNothing is perfect, and there are also several potential downsides to magic links:\\n\\n- Account security and access are now tied to the security of the user\'s email account. If the user\'s computer or other device is compromised, and attacker could potentially obtain the link and impersonate the user.\\n- If the user or email provider does not enforce encrypted network access to email, it may be possible for an attacker to perform a man-in-the-middle attack where they can obtain the link by observing network traffic.\\n- Ability to access your application is now tied to email deliverability. If your email service or the user\'s email provider fails to deliver the email containing the link in a timely fashion, it could deteriorate the experience for the user.\\n\\n### Limiting risk\\n\\nFortunately, there are things your application and the user can do in order to limit some of the possible downside risks of using magic links. Your application can:\\n\\n- Make the magic links single use, or set a very short expiration time for the links.\\n- Enforce an additional factor when using magic links.\\n\\nYour user can:\\n\\n- Choose an email provider that enforces the use of encrypted connections.\\n- Use multi-factor authentication (MFA) mechanisms to further protect their email accounts.\\n\\n### Setup guide\\n\\nSorry for the wait! We wanted to give you an overview of magic links before diving into how to set them up with Phase Two.\\n\\nIf you haven\'t already, get an account on [Phase Two](https://phasetwo.io/dashboard). You\'ll notice that we use magic links in addition to social login options. As we said above, we\'re trying to make it as frictionless as possible to get in and start using the product.\\n\\nOnce you log in and create your first deployment, open the Phase Two enhanced Keycloak console. In order to email links to your users, you\'ll need to set up email. If you haven\'t already done that, head over to our [email setup guide](/blog/2022-10-05-set-up-email.md).\\n\\nAfter you\'ve completed email setup, select the **Authentication** menu item, and then select the **Magic link** flow from the list.\\n\\n![Keycloak Phase Two Magic Link Authentication Page Flow Name](/blog/2022-10-12-set-up-magic-links-magiclinkauth.png)\\n\\nOpen the configuration for the **Magic Link Authenticator** by clicking the gear icon on the last line with the **Magic Link** execution. You\'ll notice two options:\\n\\n- **Force create user** creates a new user when an email is provided that does not match an existing user. This allows the use of magic links to register new users that have not been previously seen.\\n- **Update profile on create** adds an UPDATE_PROFILE required action if the user was created. This means that the user will need to fill out other required fields such as first/last name, etc.\\n\\nFor the purpose of our demonstration, let\'s set **Force create user** to ON and **Update profile on create** to OFF (remember, low friction). Save the configuration, and go back to the flow page.\\n\\nIn the **Action** menu of the flow page, select **Bind**, and select **Browser flow**.\\n\\n![Keycloak Phase Two Magic Link Bind Flow](/blog/2022-10-12-set-up-magic-links-bind.png)\\n\\nNow you\'re ready to test it out. If you don\'t have an application that is setup and protected by Keycloak, you can use the built-in account console to try it out. Navigate to the **Clients** menu, and open the link next to the **account** client in an incognito window (this will prevent conflict, as you are already logged in to the admin console as the administrator).\\n\\nClick **Sign In** and you\'ll be redirected to the authentication page. Enter your email address, and you\'ll be sent a magic link. Click on the link in your email, and you\'ll see your details in the account console.\\n\\n![Keycloak Phase Two Magic Link Login Page](/blog/2022-10-12-set-up-magic-links-login.png)\\n![Keycloak Phase Two Magic Link Confirm Page](/blog/2022-10-12-set-up-magic-links-confirm.png)\\n\\nGo back to the admin console in the other browser window, and navigate to the **Users** section. You will be able to find the user that was just created.\\n\\n![Keycloak Phase Two Magic Link Admin User View](/blog/2022-10-12-set-up-magic-links-admin-user.png)\\n\\nMagic links are a great way to streamline your user onboarding and experience to help you easily drive engagement across your application. Phase Two makes it quick and easy to integrate magic links (and social login, and enterprise SSO, and much more). Stay tuned for more guides that will help you build the authentication experience that is right for your app."},{"id":"set-up-email","metadata":{"permalink":"/blog/set-up-email","source":"@site/blog/2022-10-05-set-up-email.md","title":"Set Up Email in Phase Two for a Better Branding Experience","description":"Configure your email provider for better email and user management and to ensure security of your emails and application.","date":"2022-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"email","permalink":"/blog/tags/email"}],"readingTime":2.64,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"set-up-email","title":"Set Up Email in Phase Two for a Better Branding Experience","description":"Configure your email provider for better email and user management and to ensure security of your emails and application.","authors":"phasetwo","tags":["tutorial","keycloak","phase_two","email"]},"unlisted":false,"prevItem":{"title":"Magic Links Guide, and 5 Minute Setup for Open Source Passwordless Authentication and Better Security","permalink":"/blog/set-up-magic-links"},"nextItem":{"title":"Self-service (beta) Launch to Enable Management of Keycloak Realms","permalink":"/blog/self-service"}},"content":"Email is one of the highest touch-points for users with your application. Being able to configure and [customize emails](https://phasetwo.io/blog/customizing-email-templates/) is key to user management and experience.\\n\\nOne of the first things you will need to do when getting a Keycloak Realm ready for use is to set up your email server configuration. There are many system emails that are sent to users in the course of verifying and updating user accounts: Email address verification, magic links, password reset, account update, login failure notifications, identity provider linking, etc.\\n\\nIn order to provide your users with a positive experience, these messages need a way to get to them. Keycloak supports any internet reachable SMTP server. If you are currently testing, and don\'t have an email server or service that you currently use, [SendGrid](https://sendgrid.com/) provides free accounts that allow you to send up to 100 emails per day forever. For debugging, you can also use a service like [MailTrap](https://mailtrap.io/) to give you a catch-all for emails coming from Keycloak.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you are using a Phase Two Deployment, log in to the self-service dashboard, and click on the **Open Console** link for the Deployment you wish to use. Once in the Keycloak admin console, click **Realm settings** in the left menu, and then click the **Email** tab.\\n\\n![Keycloak Email Configuration](/blog/2022-10-05-set-up-email-template.png)\\n\\nIn the first section, labeled **Template**, you will set options that will be used in the templates for the emails that are sent to your users. The only required field is the **From** field, which must contain the email address the user will see the email originating from. This should be an email address that your email server is expecting, and it will not block for authorization reasons.\\n\\nThe other fields in the **Template** section are not required, but will enhance how your emails look:\\n\\n- **From** address used to send emails (required)\\n- **From display name** a user-friendly name displayed along **From**\\n- **Reply to** an email address that will be used by email clients when your user replies to an email\\n- **Reply to display name** a user-friendly name displayed along **Reply to**\\n- **Envelope from** Bounce Address used for the mails that are rejected\\n\\n![Keycloak Email Server Connection and Authentication](/blog/2022-10-05-set-up-email-connection.png)\\n\\nIn the **Connection & Authentication** section, you will provide details of your SMTP server:\\n\\n- **Host** indicates the SMTP server hostname used for sending emails\\n- **Port** indicates the SMTP server port (usually 25, 465, 587, or 2525)\\n- **Encryption** support encryption for communication with your SMTP server\\n- **Authentication** if your SMTP server requires authentication, and supply the **Username** and **Password**\\n\\n![Keycloak email setup buttons](/blog/2022-10-05-set-up-email-buttons.png)\\n\\nFinally, before you click **Save**, click the **Test connection** button to send a test email to the email address of the currently logged in user. If you don\'t have that set, you might have click **Save** and edit your user before you come back. You\'ll receive a success message, or information that will help you resolve problems.\\n\\nOnce you do that, you\'ll have accomplished a significant task which enables lots of other functionality!\\n\\nAlso, stay tuned for another post on how to customize your email templates to match your branding and messaging."},{"id":"self-service","metadata":{"permalink":"/blog/self-service","source":"@site/blog/2022-09-16-self-service.md","title":"Self-service (beta) Launch to Enable Management of Keycloak Realms","description":"Phase Two\'s self-service options allows customer to manage their own Keycloak Realms or dedicated Keycloak clusters.","date":"2022-09-16T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"cockroach","permalink":"/blog/tags/cockroach"},{"inline":true,"label":"cockroachdb","permalink":"/blog/tags/cockroachdb"}],"readingTime":1.165,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"self-service","title":"Self-service (beta) Launch to Enable Management of Keycloak Realms","description":"Phase Two\'s self-service options allows customer to manage their own Keycloak Realms or dedicated Keycloak clusters.","authors":"phasetwo","tags":["release","keycloak","phase_two","cockroach","cockroachdb"]},"unlisted":false,"prevItem":{"title":"Set Up Email in Phase Two for a Better Branding Experience","permalink":"/blog/set-up-email"},"nextItem":{"title":"Magic Links, Passwordless Sign-in with Keycloak and Open Sourcing the Extension","permalink":"/blog/magic-link"}},"content":"We\'ve been pretty quiet over the summer. Since we released the [Organizations](https://github.com/p2-inc/keycloak-orgs) and [Magic Link](https://github.com/p2-inc/keycloak-magic-link) extensions and open sourced them, there has been a lot of interest in using Phase Two.\\n\\nWe were flattered by the inbound interest, but our small team wasn\'t able to keep up with demand for trial accounts. Rather than scramble against that demand, we opted to pause new accounts, and instead build a [self-service tool](https://phasetwo.io/docs/self-service/) to allow anyone to quickly provision a new deployment a try it out.\\n\\nToday we\'re announcing the beta launch of the Phase Two Self-service deployment tool. This tool allows you to easily create new deployments of the Phase Two enhanced version of Keycloak in our secure, highly-available clusters. In the future, it will also allow you to deploy dedicated instances that use your own database.\\n\\n\x3c!--truncate--\x3e\\n\\nTake a look at how easy it is to get started:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/zzJPmwrEHmU\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nThe clusters that run our deployments are available in two regions (AWS, us-west-2 and eu-central-1), and are backed by [CockroachDB](https://www.cockroachlabs.com/), giving you scale, resilience and low-latency performance. In the future, clusters and dedicated instances will be available in other regions based on demand.\\n\\nWe hope you find this new tool valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\n[TRY IT NOW!](https://phasetwo.io/dashboard/)"},{"id":"magic-link","metadata":{"permalink":"/blog/magic-link","source":"@site/blog/2022-04-27-magic-link.md","title":"Magic Links, Passwordless Sign-in with Keycloak and Open Sourcing the Extension","description":"Phase Two\'s Magic Link extension provides a powerful and easy way to create a passwordless sign-in. In addition, the extension is now open source.","date":"2022-04-27T00:00:00.000Z","tags":[{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"passwordless","permalink":"/blog/tags/passwordless"}],"readingTime":1.4,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"magic-link","title":"Magic Links, Passwordless Sign-in with Keycloak and Open Sourcing the Extension","description":"Phase Two\'s Magic Link extension provides a powerful and easy way to create a passwordless sign-in. In addition, the extension is now open source.","authors":"phasetwo","tags":["open_source","release","keycloak","phase_two","passwordless"]},"unlisted":false,"prevItem":{"title":"Self-service (beta) Launch to Enable Management of Keycloak Realms","permalink":"/blog/self-service"},"nextItem":{"title":"Organizations, a Keycloak Multi-Tenant Extension","permalink":"/blog/orgs"}},"content":"Today we\'re making two announcements: A new, highly-requested feature, and the open sourcing of the extension at the same time. We\'ve received a lot of requests from customers to implement \\"magic link\\" login functionality that would allow users to login to an application using a link sent to their email or over some other secure channel.\\n\\n\x3c!--truncate--\x3e\\n\\nTo that end, we\'ve implemented two pathways for creating a magic link. One can be configured in the Authentication section of the admin UI by duplicating the Browser flow, and replacing the normal Username/Password/OTP forms with the Magic Link execution type\\n![Install Magic Link Authenticator in Browser Flow](https://github.com/p2-inc/keycloak-magic-link/raw/main/docs/assets/magic-authenticator.png)\\nThis mechanism inserts a authenticator in the login flow that intercepts the email address and sends the magic link in an email to to the user.\\n\\nWe\'ve also implemented a web service that allows you to create a magic link without necessarily sending an email. This will allow you to send the link through another channel. Specification for the new endpoint can be found in the [Magic Link API Documentation](/api/create-magic-link).\\n\\nBoth methods have the option of forcing the creation of a new user when an unknown email address is used. This allows a combination login/registration flow that combines an email verification. We think this really nails reducing friction in a new user flow.\\n\\nWe\'re open sourcing the Keycloak extensionsso that the broad Keycloak community can benefit right away. We are doing this in line with our commitment to keeping our core extensions [open source](/docs/introduction/open-source). We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-magic-link"},{"id":"orgs","metadata":{"permalink":"/blog/orgs","source":"@site/blog/2022-03-21-orgs.md","title":"Organizations, a Keycloak Multi-Tenant Extension","description":"Organizations bring single-realm multi-tenancy to Keycloak.","date":"2022-03-21T00:00:00.000Z","tags":[{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.755,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"orgs","title":"Organizations, a Keycloak Multi-Tenant Extension","description":"Organizations bring single-realm multi-tenancy to Keycloak.","authors":"phasetwo","tags":["open_source","release","keycloak","phase_two"]},"unlisted":false,"prevItem":{"title":"Magic Links, Passwordless Sign-in with Keycloak and Open Sourcing the Extension","permalink":"/blog/magic-link"},"nextItem":{"title":"Introducing Phase Two Connect to Reduce the Complexity of Configuring SSO Connections","permalink":"/blog/connect"}},"content":"Today we\'re open sourcing a set of Keycloak [extensions](https://github.com/p2-inc#our-extensions-), specifically our [Organizations extension](https://phasetwo.io/product/organizations/), that are focused on solving several of the common use cases of multi-tenant, SaaS applications that Keycloak does not solve out of the box. We are doing this in line with our commitment to keeping our core extensions [open source](/docs/introduction/open-source). These extensions are the basis of our [Organizations](https://phasetwo.io/docs/organizations/) features, which allow Phase Two customers to model their own customers in their systems and create enterprise \\"team\\" functionality that suits their business case.\\n\\n\x3c!--truncate--\x3e\\n\\nA variation of this code has been built, enhanced and used in production by several customers for almost two years. It is now available as open source for members of the broader Keycloak community. We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-orgs"},{"id":"connect","metadata":{"permalink":"/blog/connect","source":"@site/blog/2022-02-25-connect.md","title":"Introducing Phase Two Connect to Reduce the Complexity of Configuring SSO Connections","description":"Phase Two Connect greatly reduces the complexity and difficulty of configuring SSO connections allowing any team member to handle.","date":"2022-02-25T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"connect","permalink":"/blog/tags/connect"}],"readingTime":0.72,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"connect","title":"Introducing Phase Two Connect to Reduce the Complexity of Configuring SSO Connections","description":"Phase Two Connect greatly reduces the complexity and difficulty of configuring SSO connections allowing any team member to handle.","authors":"phasetwo","tags":["release","phase_two","connect"]},"unlisted":false,"prevItem":{"title":"Organizations, a Keycloak Multi-Tenant Extension","permalink":"/blog/orgs"},"nextItem":{"title":"SSO? Wave Your Magic Wand to Easily Setup SSO with Phase Two\'s IDP Wizards","permalink":"/blog/wizard"}},"content":"Following our [post about our wizard product](/blog/wizard), we received an overwhelming amount of interest in it. Many customers of our cloud offering asked for it as a portal for their organization administrators to set up their identity providers. On-prem customers said that one consistent onboarding hurdle was SSO complexity, and asked for it to be included in the bundled distribution.\\n\\n\x3c!--truncate--\x3e\\n\\nToday we\'re pleased to report that we\'ve listened to both use cases and completed embedding the \\"wizard\\" product into Phase Two. We\'re calling it \\"Connect\\", as it\'s the best way we could come up with characterizing its simplicity. It massively reduces the complexity of configuring Single Sign-on (SSO) connections, and distills the process into something any member of the team can understand.\\n\\n[Phase Two Connect](https://phasetwo.io/docs/hosting/connect/) is currently available by invitation only while we work out the final kinks. [Contact sales](mailto:sales@phasetwo.io) for more information."},{"id":"wizard","metadata":{"permalink":"/blog/wizard","source":"@site/blog/2022-01-24-wizard.md","title":"SSO? Wave Your Magic Wand to Easily Setup SSO with Phase Two\'s IDP Wizards","description":"IDP wizards make setting up Identity Providers in Keycloak extremely easy (within minutes). Phase Two bundles these into our distribution for easy use.","date":"2022-01-24T00:00:00.000Z","tags":[{"inline":true,"label":"sso","permalink":"/blog/tags/sso"},{"inline":true,"label":"wizard","permalink":"/blog/tags/wizard"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.06,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"wizard","title":"SSO? Wave Your Magic Wand to Easily Setup SSO with Phase Two\'s IDP Wizards","description":"IDP wizards make setting up Identity Providers in Keycloak extremely easy (within minutes). Phase Two bundles these into our distribution for easy use.","authors":"phasetwo","tags":["sso","wizard","release","phase_two"]},"unlisted":false,"prevItem":{"title":"Introducing Phase Two Connect to Reduce the Complexity of Configuring SSO Connections","permalink":"/blog/connect"},"nextItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"}},"content":":::info\\nUPDATE: The [Wizards](https://github.com/p2-inc/idp-wizard) are now open source and available to the community as a whole to make [SSO](https://phasetwo.io/docs/sso/) setup easier than ever.\\n:::\\n\\nWorking with one of our customers, we discovered that even the most technically literate developer or ops professional could look at the configuration for an [SSO](https://phasetwo.io/docs/sso/) connection like it was a foreign language. While our configuration interface attempts to cover all possible options, and document clearly what each option means, it can still be entirely unclear what is required during a setup.\\n\\n\x3c!--truncate--\x3e\\n\\nFurthermore, the identity provider that is being integrated can present a similarly extensive interface that may not use the same terms and language. However, after investigation into the most common identity providers, we found that most of the configuration options can simply be set by convention if the vendor is known.\\n\\nBased on that observation, we\'ve built what we call a \\"wizard\\" UI on top of our identity provider configuration to make it easy to integration the top commercial identity provider vendors. Take a look at a quick video of a setup using our most recent prototype.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/9HJWdJqnE0I\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nIf you\'re interested in early access to our \\"wizards\\", please [contact us](mailto:sales@phasetwo.io) today."},{"id":"events","metadata":{"permalink":"/blog/events","source":"@site/blog/2021-10-18-events.md","title":"Events and Audit Logging Extensions","description":"Audit Logging allows for strong integration of Keycloak into any enterprise logging system to allow enabling enterprise support for Authentication and Authorization.","date":"2021-10-18T00:00:00.000Z","tags":[{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.665,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"events","title":"Events and Audit Logging Extensions","authors":"phasetwo","description":"Audit Logging allows for strong integration of Keycloak into any enterprise logging system to allow enabling enterprise support for Authentication and Authorization.","tags":["open_source","release","keycloak","phase_two"]},"unlisted":false,"prevItem":{"title":"SSO? Wave Your Magic Wand to Easily Setup SSO with Phase Two\'s IDP Wizards","permalink":"/blog/wizard"},"nextItem":{"title":"Free as in Beer, Free Keycloak Realm in Phase Two\'s Hosted Keycloak","permalink":"/blog/free-realm"}},"content":"Per our commitment to keeping our core extensions [open source](/docs/introduction/open-source), today we\'re releasing our Keycloak extensions to the event system. These extensions form the basis of how our [Audit Log](/docs/audit-logs/) features are built.\\n\\n\x3c!--truncate--\x3e\\n\\nAdditionally, we\'re providing several goodies that will be valuable to others building extensions on top of Keycloak, including a generic scriptable event listener, an event emitter to send events to any HTTP endpoint, a mechanism for retrieving event listener configurations from realm attributes, a mechanism for running multiple event listeners of the same type with different configurations, and a unified event model with facility for subscribing to webhooks.\\n\\nWe hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-events"},{"id":"free-realm","metadata":{"permalink":"/blog/free-realm","source":"@site/blog/2021-05-31-free-realm.md","title":"Free as in Beer, Free Keycloak Realm in Phase Two\'s Hosted Keycloak","description":"Phase Two offers a free Keycloak realm for experimentation or small companies to use at their discretion to implement Authentication or Authorization.","date":"2021-05-31T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.115,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"free-realm","title":"Free as in Beer, Free Keycloak Realm in Phase Two\'s Hosted Keycloak","description":"Phase Two offers a free Keycloak realm for experimentation or small companies to use at their discretion to implement Authentication or Authorization.","authors":"phasetwo","tags":["phase_two"]},"unlisted":false,"prevItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"},"nextItem":{"title":"Keycloak, and Our Commitment to Open Source Identity and Access Management (IAMs) and Open Source Keycloak Extensions","permalink":"/blog/keycloak"}},"content":"Since our release about basing Phase Two on the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, and our commitment to keeping our core extensions [open source](/docs/introduction/open-source), we\'ve received positive feedback from customers and interest from the the Keycloak community.\\n\\nWe\'ve noticed that support forums for Keycloak have many questions and requests around just getting started. Even though the software is mature, open source, and has a helpful user community, just spinning up an environment and trying it out can be puzzling for first-time users. It\'s pretty clear that a lot of people just give up, because they can\'t get a server running, let alone configure their first realm[^1].\\n\\n\x3c!--truncate--\x3e\\n\\nBecause of that, we\'ve decided to offer developers a _FREE_ realm in Phase Two, so those that are interested in trying it out can get successful quickly. Free realms are limited to fewer than 1000 users and 5 SSO connections. Otherwise, there are no restrictions beyond abiding by our [terms of use](/docs/terms). Sound good? Please fill out the [contact form](https://docs.google.com/forms/d/e/1FAIpQLScIwakLlJpd9OS3r1fCsPDX01Y9BTSvxf5Ceru_FrpAQE5hIA/viewform?usp=sf_link) with your company information, and we\'ll respond with access information for your realm.\\n\\n[^1]: In Keycloak, a \\"realm\\" manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control."},{"id":"keycloak","metadata":{"permalink":"/blog/keycloak","source":"@site/blog/2020-12-21-keycloak.md","title":"Keycloak, and Our Commitment to Open Source Identity and Access Management (IAMs) and Open Source Keycloak Extensions","description":"Phase Two is committed to open source contributions of extensions to the open source IAMs, Keycloak, for Authentication and Authorization","date":"2020-12-21T00:00:00.000Z","tags":[{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"}],"readingTime":1.89,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"keycloak","title":"Keycloak, and Our Commitment to Open Source Identity and Access Management (IAMs) and Open Source Keycloak Extensions","description":"Phase Two is committed to open source contributions of extensions to the open source IAMs, Keycloak, for Authentication and Authorization","authors":"phasetwo","tags":["keycloak","phase_two","open_source"]},"unlisted":false,"prevItem":{"title":"Free as in Beer, Free Keycloak Realm in Phase Two\'s Hosted Keycloak","permalink":"/blog/free-realm"},"nextItem":{"title":"Welcome to Phase Two: A Hosted Keycloak Solution to Ease Saas Application Development","permalink":"/blog/welcome"}},"content":"Following the initial release of Phase Two\'s [authentication and SSO tools](https://phasetwo.io/docs/sso/) 3 months ago, we had a warm reception by several early- to mid- stage SaaS companies. The message was consistent. SSO was a key barrier to unlocking enterprise customers, and we had made it much easier to quickly integrate the alphabet-soup of enterprise identity providers, including [Auth0](https://phasetwo.io/blog/keycloak-vs-auth0-open-source-alternative/), [Okta](https://phasetwo.io/blog/keycloak-vs-okta-open-source-alternative/), and many others.\\n\\n\x3c!--truncate--\x3e\\n\\nFurthermore, many of our customers have responded well to our \\"[one price per project]\\"(/#pricing) idea, citing that competitors and other enterprise authentication companies had pricing models that ramped on a per-user and per-SSO connection basis, making them economically unattractive to companies with business and pricing models that couldn\'t support that.\\n\\nOne of the other points that we heard loud and clear from our first customers, was the fear of vendor lock-in. Integrating tools like this can be a large effort, and can be difficult to unwind if the terms or service fall short. While our adoption of standards such as OpenID and SAML allayed some of those fears, we wanted to go a step further.\\n\\nWe built the initial verison of Phase Two as a set of extensions to the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, built and maintained by Red Hat. After several months of developing for it, and operating it for our customers, we\'ve decided to commit to being a premium Keycloak hosting and support solution. Keycloak has been battle-tested and hardened for over 6 years. It\'s security and reliability is depended on by organizations from small startups to Fortune 500 companies and governments. Our hosted Keycloak offering will allow teams and organizations to focus on rapidly implementing Identity and Access Management.\\n\\nTo put to rest any future concerns about vendor lock-in, we\'re committing to making our core extensions to Keycloak open source. This includes open source enterprise single sign-on, authentication, and user management. Phase Two simple to use, operate and scale, we will maintain compatibility so that customers can migrate to their own Keycloak deployment. Updates and links to our open source extensions will be published in the [Open Source](/docs/introduction/open-source) section of the documentation, and will be available in our [p2-inc GitHub organization page](https://github.com/p2-inc).\\n\\nWe have benefitted immensely from the open source communitiy, and we are excited to give back!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2020-09-28-welcome.md","title":"Welcome to Phase Two: A Hosted Keycloak Solution to Ease Saas Application Development","description":"Phase Two makes it easy to development and implement Identity and Access Management into any Saas application leveraging the capabilities of Keycloak.","date":"2020-09-28T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":2.28,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"slug":"welcome","title":"Welcome to Phase Two: A Hosted Keycloak Solution to Ease Saas Application Development","description":"Phase Two makes it easy to development and implement Identity and Access Management into any Saas application leveraging the capabilities of Keycloak.","authors":"phasetwo","tags":["release","phase_two"]},"unlisted":false,"prevItem":{"title":"Keycloak, and Our Commitment to Open Source Identity and Access Management (IAMs) and Open Source Keycloak Extensions","permalink":"/blog/keycloak"}},"content":"After building and working for startups and technology companies for almost 25 years, I found myself having a sense of d\xe9j\xe0-vu.\\n\\nHad I really built the same features and functionality over and over?\\n\\n\x3c!--truncate--\x3e\\n\\nEveryone of us who has been in the industry for any length of time probably has the same feeling. Whether or not we are fully conscious of it, we probably built a (bad) version of login, registration, user management, authorization, organizations and invitations, audit logging, etc. at least one time for every company we\'ve worked for.\\n\\nIn early 2018, I joined an enterprise SaaS startup, where I built the initial team and product over 18 months. Analyzing tickets and epics in the project tracking system we used, I found that over 60% of our first 18 months was spent building features and functionality like this -- essential building blocks, but not the core competency we sought to test in the marketplace. And the result of that effort was only adequate versions of those common features, which resulted in less time spent on what we were trying to prove. I began to refer to this heavy tax a \\"SaaS CRUD\\".\\n\\nWas this really what everyone else was doing? I was lucky to have a large network of engineering leaders at companies that ranged from the earliest stages to the largest public companies, so I asked them. The responses were remarkably consisitent. Early stage companies wished there was something comprehensive they could adopt, and later stage and large companies lamented not adopting external tools earlier that gave them guarantees around uptime and compliance. All were aware of or had tried to knit together a mish-mash of \\"feature company\\" products, and all expressed dissatisfaction with \\"model mismatch\\" of most of the tools in the marketplace, which demanded more integration overhead than the perceived benefit allowed.\\n\\nI was lucky to find others that had observed the same thing. We joined forces and spent the next 6 months interviewing companies of a range of sizes, developing a playbook for companies building new products. Based on that playbook, today we are releasing our first version of tooling designed to help application developers avoid rebuilding \\"SaaS CRUD\\".\\n\\nPhase Two is a hosted Keycloak solution designed to help SaaS companies accelerate time-to-market and enterprise adoption. Our goal is to help you rapidly integrate the features needed to support almost any authentication and authorization use-cases with our Keycloak as a Service offering. Open source authentication and SSO are our first targets, but we plan to expand to many other areas of pain for the growing company seeking enterprise adoption. We\'d love for you to join us on this journey. For product demos and to become a beta customer, please [contact us](mailto:support@phasetwo.io)!"}]}}')}}]);