"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[12607],{8648:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"organizations/organizations-import-export","title":"Import/Export Organizations","description":"Import","source":"@site/docs/organizations/import-export.md","sourceDirName":"organizations","slug":"/organizations/organizations-import-export","permalink":"/docs/organizations/organizations-import-export","draft":false,"unlisted":false,"editUrl":"https://github.com/p2-inc/phasetwo-docs/tree/main/docs/organizations/import-export.md","tags":[],"version":"current","frontMatter":{"id":"organizations-import-export","title":"Import/Export Organizations","sidebar_label":"Import/Export"},"sidebar":"docs","previous":{"title":"Active Organization Authenticator","permalink":"/docs/organizations/active-organization-authenticator"},"next":{"title":"Events","permalink":"/docs/organizations/organizations-events"}}');var t=i(74848),s=i(28453);const o={id:"organizations-import-export",title:"Import/Export Organizations",sidebar_label:"Import/Export"},d=void 0,a={},l=[{value:"Import",id:"import",level:2},{value:"Export",id:"export",level:2},{value:"Schemas",id:"schemas",level:2},{value:"Organization import/export schema",id:"organization-importexport-schema",level:3},{value:"Organization roles import/export schema",id:"organization-roles-importexport-schema",level:3},{value:"Identity provider link import/export schema",id:"identity-provider-link-importexport-schema",level:3},{value:"Members import/export schema",id:"members-importexport-schema",level:3},{value:"Invitations import/export schema",id:"invitations-importexport-schema",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,t.jsxs)(n.p,{children:["Organizations can be imported, by performing a ",(0,t.jsx)(n.code,{children:"POST"})," http call to ",(0,t.jsx)(n.code,{children:"orgs/import"})," ",(0,t.jsx)(n.a,{href:"/api/import-organizations/",children:"endpoint"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The endpoint support two query parameters ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," and ",(0,t.jsx)(n.code,{children:"skipMissingIdp"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can set a custom ID for an organization \u2014 for example, if you want to reuse an existing ID. If the ",(0,t.jsx)(n.code,{children:"id"})," property is not specified, one will be generated automatically."]}),"\n",(0,t.jsxs)(n.p,{children:["The import functionality is transactional meaning that all elements in the ",(0,t.jsx)(n.code,{children:"organizations"})," array must be imported in order to complete successfully."]}),"\n",(0,t.jsxs)(n.p,{children:["If both ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," and ",(0,t.jsx)(n.code,{children:"skipMissingIdp"}),"are set to ",(0,t.jsx)(n.code,{children:"false"})," the import will be strict, meaning that the realm should contain the all users and idps which are referred in the import json file."]}),"\n",(0,t.jsx)(n.p,{children:"For example,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl --location \'https://{$fqdn}/auth/realms/{{$realm}}/orgs/import?skipMissingMember=false&skipMissingIdp=false\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{$access_token}}\' \\\n--data-raw \'{\n    "organizations": [\n        {\n            "organization": {\n                "id": "0196afb8-60de-7838-91c1-092d8fe5e150",\n                "name": "test",\n                "displayName": "test",\n                "url": "test",\n                "domains": [\n                    "test.com",\n                    "test2.com"\n                ],\n                "attributes": {\n                    "attr1": [\n                        "attr1"\n                    ]\n                }\n            },\n            "roles": [\n                {\n                    "name": "role1",\n                    "description": ""\n                },\n                {\n                   "name": "role2",\n                    "description": "role2"\n                }\n            ],\n            "idpLink": "keycloak-oidc",\n            "members": [\n                {\n                    "username": "testUser",\n                    "roles": [\n                        "role1",\n                        "manage-members"\n                    ]\n                }\n            ],\n            "invitations": [\n                {\n                    "email": "new_user@test.com",\n                    "inviterUsername": "testUser",\n                    "roles": ["role2"],\n                    "redirectUri": "",\n                    "attributes": {}\n                }\n            ]\n        },\n        {\n            "organization": {\n                "name": "test2",\n                "displayName": "test",\n                "url": "",\n                "domains": [],\n                "attributes": {}\n            },\n            "roles": [\n                {\n                    "name": "view-organization"\n                },\n                {\n                    "name": "manage-organization"\n                },\n                {\n                    "name": "view-members"\n                },\n                {\n                    "name": "manage-members"\n                },\n                {\n                    "name": "view-roles"\n                },\n                {\n                    "name": "manage-roles"\n                },\n                {\n                    "name": "view-invitations"\n                },\n                {\n                    "name": "manage-invitations"\n                },\n                {\n                    "name": "view-identity-providers"\n                },\n                {\n                    "name": "manage-identity-providers"\n                },\n                {\n                    "name": "role2_test",\n                    "description": "gdssdg"\n                }\n            ],\n            "members": [\n                {\n                    "username": "testUser2",\n                    "roles": [\n                        "view-identity-providers",\n                        "role2_test"\n                    ]\n                },\n                {\n                    "username": "testUser3",\n                    "roles": [\n                        "view-organization",\n                        "role2_test"\n                    ]\n                }\n            ],\n            "invitations": []\n        }\n    ]\n}\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"export",children:"Export"}),"\n",(0,t.jsxs)(n.p,{children:["Use this ",(0,t.jsx)(n.a,{href:"/api/export-organizations/",children:"endpoint"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Using Keycloak a ",(0,t.jsx)(n.code,{children:"GET"})," http call to ",(0,t.jsx)(n.code,{children:"orgs/export"})," the realm representation should include the ",(0,t.jsx)(n.code,{children:"organizations"}),". Organization will not contain ",(0,t.jsx)(n.code,{children:"members"})," and ",(0,t.jsx)(n.code,{children:"invitations"})," if the flag ",(0,t.jsx)(n.code,{children:"exportMembersAndInvitations"})," is set to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl --location 'https://{$fqdn}/auth/realms/{{$realm}}/orgs/export?exportMembersAndInvitations=true' \\\n--header 'Authorization: Bearer {{$access_token}}'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"schemas",children:"Schemas"}),"\n",(0,t.jsx)(n.h3,{id:"organization-importexport-schema",children:"Organization import/export schema"}),"\n",(0,t.jsx)(n.p,{children:"To import an organization use the following schema."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "organizations": [\n    {\n      "organization": {\n        "name": "test",\n        "displayName": "test name",\n        "url": "test.com",\n        "domains": [\n          "test-realm.com",\n          "test-realm.org"\n        ],\n        "attributes": {}\n      }\n    }\n    ....\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Organization attribute"}),(0,t.jsx)(n.th,{children:"Required"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayName"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"url"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domains"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attributes"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"organization-roles-importexport-schema",children:"Organization roles import/export schema"}),"\n",(0,t.jsx)(n.p,{children:"To import an organization roles use the following schema."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "organizations": [\n    {\n      "organization": {\n        "name": "test"\n      },\n      "roles": [\n        ....\n        {\n          "name": "test_role1"\n        },\n        {\n          "name": "test_role2",\n          "description": "test_role2 description"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Role attribute"}),(0,t.jsx)(n.th,{children:"Required"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"description"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["The default organization roles are created even if not defined in the ",(0,t.jsx)(n.code,{children:"roles"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"identity-provider-link-importexport-schema",children:"Identity provider link import/export schema"}),"\n",(0,t.jsx)(n.p,{children:"To add an identity provider to a organization use the following schema."}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingIdp"})," is set to ",(0,t.jsx)(n.code,{children:"false"}),", the identity provider with the ",(0,t.jsx)(n.code,{children:"alias"})," mentioned in the property ",(0,t.jsx)(n.code,{children:"idpLink"})," must be present the realm ",(0,t.jsx)(n.code,{children:"identityProviders"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingIdp"})," is set to ",(0,t.jsx)(n.code,{children:"true"}),", if the identity provider with the ",(0,t.jsx)(n.code,{children:"alias"})," mentioned in the property ",(0,t.jsx)(n.code,{children:"idpLink"})," is not present the realm ",(0,t.jsx)(n.code,{children:"identityProviders"})," the import will ignore it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "organizations": [\n    {\n      "organization": {\n        "name": "test3"\n      }\n      "idpLink": "keycloak-oidc",\n    }\n    ....\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"members-importexport-schema",children:"Members import/export schema"}),"\n",(0,t.jsx)(n.p,{children:"To add a member to an organization use the following schema."}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," is set to ",(0,t.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The users from the ",(0,t.jsx)(n.code,{children:"members"})," must be defined in realm ",(0,t.jsx)(n.code,{children:"users"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The roles associated to a ",(0,t.jsx)(n.code,{children:"member"})," must be defined in organization ",(0,t.jsx)(n.code,{children:"roles"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," is set to ",(0,t.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The users from the ",(0,t.jsx)(n.code,{children:"members"})," which are not found in the realm ",(0,t.jsx)(n.code,{children:"users"})," will be ignored."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "realm": "org-realm",\n  "enabled": true,\n  .....\n  "users": [\n    {\n      "username": "test",\n      "enabled": true\n    },\n    {\n      "username": "test2",\n      "enabled": true\n    }\n    .......\n  ],\n  "organizations": [\n    {\n      "organization": {\n        "name": "test1"\n      },\n      "roles": [\n        {\n          "name": "test_role1"\n        }\n      ],\n      "members": [\n        {\n          "username": "test",\n          "roles": []\n        },\n        {\n          "username": "test2",\n          "roles": [\n            "test_role1",\n            "view-members",\n            "manage-members"\n          ]\n        }\n        ....\n      ]\n    }\n  ]\n}\n\n'})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Member attribute"}),(0,t.jsx)(n.th,{children:"Required"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"username"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"roles"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"invitations-importexport-schema",children:"Invitations import/export schema"}),"\n",(0,t.jsxs)(n.p,{children:["To add an invitations to an organization use the following schema. The invitation ",(0,t.jsx)(n.code,{children:"email"})," should not belong to a existing member of the organization."]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," is set to ",(0,t.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"inviter"})," must be defined in ",(0,t.jsx)(n.code,{children:"users"})," import schema."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"skipMissingMember"})," is set to ",(0,t.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the ",(0,t.jsx)(n.code,{children:"inviter"})," is not found in the realm ",(0,t.jsx)(n.code,{children:"users"})," the invitation import will be skipped."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'  "organizations": [\n    {\n      "organization": {\n        "name": "test"\n      },\n      "roles": [\n        {\n          "name": "test_role",\n          "description": ""\n        }\n      ],\n      "invitations": [\n        {\n          "email": "test+2@phasetwo.io",\n          "inviterUsername": "test",\n          "roles": ["test_role"],\n          "redirectUri": "",\n          "attributes": {}\n        }\n      ]\n    }\n  ]\n'})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Invitation attribute"}),(0,t.jsx)(n.th,{children:"Required"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"email"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"inviterUsername"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"roles"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"redirectUri"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attributes"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var r=i(96540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);