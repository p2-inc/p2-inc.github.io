"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"secure-spring-boot","metadata":{"permalink":"/blog/secure-spring-boot","source":"@site/blog/2024-05-09-secure-spring-boot.mdx","title":"Securing an Angular and Spring Boot Application with Keycloak","description":"Spring Boot is a open-source tool which uses Java-based frameworks for building web applications.","date":"2024-05-09T00:00:00.000Z","formattedDate":"May 9, 2024","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"spring_boot","permalink":"/blog/tags/spring-boot"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":8.125,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"secure-spring-boot","title":"Securing an Angular and Spring Boot Application with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","spring_boot","authentication","authorization","sso"],"image":"/blog/og/springboot@2x.png"},"nextItem":{"title":"Keycloak vs. Auth0, a Open-Source Alternative","permalink":"/blog/keycloak-vs-auth0-open-source-alternative"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\n[Spring Boot](https://spring.io/projects/spring-boot) is a open-source tool which uses Java-based frameworks for building web applications.\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to secure an [Angular](https://angular.io/) application and access secured resources from a Spring Boot Web application.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Spring Boot example](https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak). We are also building [Keycloak examples](https://github.com/p2-inc/examples) for other frameworks.\\n\\n:::\\n\\n## Setting up a Spring Boot project\\n\\nIn order to setup a Spring Boot project, a JDK version must be chosen. As of the time of writing, to be inline with the latest changes from Keycloak 24, the Java 17 baseline will be used. Other JDK versions can also be used for developing the resource server according to the preference of the developer.\\n\\nStarting with Spring Boot 2.x the Keycloak client adapters were deprecated. In Spring Boot 3.x we will use native functionalities of the [`spring-boot-oauth2-resource-server`](https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html) to be able to configure the application security context.\\n\\n### Quick Start\\n\\nTo get this project up and running locally on your computer you can clone the Phase Two [Spring Boot example](https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak) or follow the instructions below to generate a project from scratch.\\n\\n1. Set up the Spring Boot project.\\n\\n   To kickstart a project, we will use (and recommend) using the Spring Boot [Initializr](https://start.spring.io/), a Web-based tool that provides a simple UI to generate the project.\\n\\n   Provide the following values to spring initializr for the project metadata:\\n\\n   ```\\n   Group: com.example\\n   Artifact: spring-boot-keycloak\\n   Name: spring-boot-keycloak\\n   Description: Demo project for Spring Boot\\n   Package name: com.example.spring-boot-keycloak\\n   ```\\n\\n   ![Spring Boot Initializr](/blog/2024-05-10-create-spring-boot-project-template.png)\\n\\n2. Add the required dependencies in spring initializr.\\n\\n   For the purpose of this project we will add the following dependencies:\\n\\n   - Oauth2 Resource Server\\n   - Spring Web\\n   - Spring Security\\n\\n   This will result in the following lines within `build.gradle`.\\n\\n   ```\\n   implementation \'org.springframework.boot:spring-boot-starter-security\'\\n   implementation \'org.springframework.boot:spring-boot-starter-web\'\\n   implementation \'org.springframework.boot:spring-boot-starter-oauth2-resource-server\'\\n   ```\\n\\n   Generate the project with those settings. Open the .zip in your preferred text editor.\\n\\n3. Setup JDK 17 for the project. Follow instructions on the [JDK setup](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) page.\\n\\n## Setting up a Keycloak Instance\\n\\nBefore customizing the Spring Boot app, we need to set up and configure our Keycloak instance.\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Install and configure Spring Boot\\n\\nNow that we\'ve setup and configured Keycloak using [Phase Two](https://phasetwo.io/dashboard/) and cloned or created our Spring Boot application template, we will need to configure the project to leverage the capabilities provided by Keycloak.\\n\\n1. Configure application settings\\n\\n   Update your `application.yaml` configuration file with the Keycloak security configuration (it\'s possible your download includes a `application.properties` file instead).\\n\\n   ```yaml\\n   spring:\\n     application:\\n       name: spring-boot-keycloak\\n     security:\\n       oauth2:\\n         resourceserver:\\n           jwt:\\n             issuer-uri: $http-keycloak-url/auth/realms/$your-realm\\n             jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs\\n   ```\\n\\n   Replace\\n\\n   - `$http-keycloak-url` with the Keycloak URL from the Phase Two hosted Keycloak instance.\\n   - `$your-realm` with the Keycloak realm created earlier in this tutorial.\\n\\n   If you are using the local Keycloak instance from the cloned example, use the local address for `$http-keycloak-url`.\\n\\n   The below Java code omits any imports, reference our example for necessary imports or use your text editor to assist with populating the imports.\\n\\n2. Configure Spring Boot resource server\\n\\n   Under `src.main.java.com.springbootkeycloak` create a new package, `config`, and create a class `SecurityConfig.java`. In this class, add the `HttpSecurity` settings:\\n\\n   ```java\\n   @Configuration\\n   @EnableWebSecurity\\n   @EnableMethodSecurity\\n   public class SecurityConfig {\\n\\n       private final JwtClaimsConverter jwtAuthConverter;\\n\\n       public SecurityConfig(JwtClaimsConverter jwtAuthConverter) {\\n           this.jwtAuthConverter = jwtAuthConverter;\\n       }\\n\\n       @Bean\\n       public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\\n           http.authorizeHttpRequests(authz ->\\n                   authz\\n                           .requestMatchers(\\"/api/**\\")\\n                           .authenticated()\\n           );\\n           http.oauth2ResourceServer(oauth2ResourceServer ->\\n                   oauth2ResourceServer.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthConverter))\\n           );\\n           http.csrf(AbstractHttpConfigurer::disable);\\n\\n           http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\\n           return http.build();\\n       }\\n   }\\n   ```\\n\\n   This configuration will make the Spring Boot act as an OAuth2 Resource Server\'s with JWT authentication. This configuration is part of the functionality provided by the `spring-boot-starter-oauth2-resource-server` dependency. Read more about it\'s configuration [here](https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-sansboot).\\n\\n3. Add JWT token convert configuration\\n\\n   In the same `config` package, create another class, `JwtClaimsConverter.java`. Add a converter for extracting the security context attributes from the `access_token` received from Keycloak.\\n\\n   ```java\\n   @Component\\n   public class JwtClaimsConverter implements Converter<Jwt, AbstractAuthenticationToken> {\\n\\n       @Override\\n       public AbstractAuthenticationToken convert(Jwt jwt) {\\n         var authorities = extractRealmRoles(jwt);\\n           return new JwtAuthenticationToken(jwt, authorities, getPrincipalFromClaim(jwt));\\n       }\\n\\n       private String getPrincipalFromClaim(Jwt jwt) {\\n           var claimName = \\"preferred_username\\";\\n           return jwt.getClaim(claimName);\\n       }\\n\\n       private Collection<GrantedAuthority> extractRealmRoles(Jwt jwt) {\\n           Map<String, Object> resource = jwt.getClaim(\\"realm_access\\");\\n           Collection<String> roles;\\n           if (resource == null\\n                   || (roles = (Collection<String>) resource.get(\\"roles\\")) == null) {\\n               return Set.of();\\n           }\\n           return roles.stream()\\n                   .map(role -> new SimpleGrantedAuthority(\\"ROLE_\\" + role))\\n                   .collect(Collectors.toSet());\\n       }\\n   }\\n   ```\\n\\n   The provided example uses the `preferred_username` claim for populating the _principal_ of the security context and the `realm_access.roles` to populate the _authorities_.\\n\\n   This configuration is part of the functionality provided by the `spring-boot-starter-oauth2-resource-server` dependency. Read more about it\'s configuration [here](https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-authorization-extraction).\\n\\n4. Create the secured API resources:\\n\\n   In `src.main.java.com.springbootkeycloak` create a new package, `web`, and create a new class `TestController.java`.\\n\\n   To test the security integration two resource endpoints are defined:\\n\\n   - `/api/test/anonymous`\\n   - `/api/test/user`\\n\\n   Implemented with this code:\\n\\n   ```java\\n   @RestController\\n   @RequestMapping(\\"/api/test\\")\\n   public class TestController {\\n\\n       @RequestMapping(value = \\"/anonymous\\", method = RequestMethod.GET)\\n       public ResponseEntity<String> getAnonymous() {\\n           return ResponseEntity.ok(\\"Hello Anonymous\\");\\n       }\\n\\n       @PreAuthorize(\\"hasRole(\'ROLE_user\')\\")\\n       @RequestMapping(value = \\"/user\\", method = RequestMethod.GET)\\n       public ResponseEntity<String> getUser()\\n       {\\n           return ResponseEntity.ok(\\"Hello Secured with user role.\\");\\n       }\\n   }\\n\\n   ```\\n\\n   Because both endpoints have the prefix `/api` they will require a secure context in order to access them. Furthermore, the `/api/test/user` endpoint is secured using a predefined authority `ROLE_user`. This is a Realm role that can be created and applied to your example user from earlier in this tutorial.\\n\\n   This logic can be used to extend access and authorization to any part of the application.\\n\\n   Start the application running with `./gradlew bootRun`.\\n\\n### Testing the secured endpoints\\n\\nThe secured endpoints can be tested using `curl` with the `Authorization` header. The `Authorization` header must contain the `access_token`.\\n\\n```bash\\ncurl --location \'http://localhost:8080/api/test/anonymous\' \\\\\\n    --header \'Authorization: Bearer {{$access_token}}\'\\n```\\n\\n```bash\\ncurl --location \'http://localhost:8080/api/test/user\' \\\\\\n    --header \'Authorization: Bearer {{$access_token}}\'\\n```\\n\\nTo generate an access token, you can use the `openid-connect/token` endpoint from Keycloak.\\n\\n```bash\\ncurl -X POST \\\\\\n  --location \\"https://$http-keycloak-url/auth/realms/$keycloak-realm/protocol/openid-connect/token\\" \\\\\\n  -H \'Content-Type: application/x-www-form-urlencoded\' \\\\\\n  -d \'username=$test-user&password=$password&grant_type=password&client_id=$client-name&client_secret=$client-secret\'\\n```\\n\\nSubstitute the values from your Keycloak instance and test user for `$http-keycloak-url`, `$keycloak-realm`, `$test-user`, `$password`, `$client-name`, and `$client-secret`.\\n\\nIn the returned HTTP response, the `access_token` will be present. Use this token to test the secured endpoints in the example curl\'s above.\\n\\nAt this point, your Spring Boot application is secured with Keycloak, but there is no \\"Frontend\\" to the application. In the next section, we will add an Angular SPA to demonstrate sign-in with Keycloak.\\n\\n## Integration with Angular\\n\\nIn order to access the secured resources of the Spring Boot server, we will create a client application which will authenticate our users. After Authentication, that user will then have access to the secured resources via their JWT token.\\n\\n### Generate Angular Application\\n\\nOur [Spring Boot example](https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak) already has a basic Angular application setup. We will use that for the rest of this setup.\\n\\nIn the example folder, open the `angularclient` folder.\\n\\nIf you do want to start your own Application, follow the instructions below:\\n\\n- Setup a new Angular application following these [instructions](https://angular.io/start)\\n- Use the Angular Oauth2 OIDC [library](https://github.com/manfredsteyer/angular-oauth2-oidc) to integrate authentication and authorization.\\n\\n### Securing views\\n\\nIn the `/angularclient/src/app` folder, the `app.module.ts` file is the entry point for the Angular application. The Angular application will need to be configured in order to access user information only after authentication.\\n\\n```javascript\\n@NgModule({\\n  declarations: [\\n    AppComponent,\\n    MainpageComponent\\n  ],\\n  imports: [\\n    BrowserModule,\\n    AppRoutingModule,\\n    FormsModule,\\n    HttpClientModule,\\n    OAuthModule.forRoot()\\n  ],\\n  providers: [\\n    {\\n      provide: APP_INITIALIZER,\\n      useFactory: applicationInitializerFactory,\\n      deps: [OAuthService],\\n      multi: true\\n    },\\n    {provide: LOCAL_STORAGE_TOKEN, useFactory: localStorageFactory},\\n    {provide: OAuthStorage, useFactory: localStorageFactory}\\n  ],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule {...}\\n```\\n\\nThe app is initialized with the `OAuthService` as a dependency. Tokens from the `OAuthService` are stored in the browser\'s `localStorage`.\\n\\nTo configure the `OAuthService`\'s `authorization code` login flow with the `angular-oauth2-oidc` library add the following configuration:\\n\\n```javascript\\nfunction configure() {\\n  oauthService.configure({\\n    // URL of the SPA to redirect the user to after login\\n    redirectUri: window.location.origin + \\"/index.html\\",\\n    // The SPA\'s id. The SPA is registered with this id at the auth-server\\n    clientId: \\"$your-public-keycloak-client\\",\\n    // set the scope for the permissions the client should request\\n    scope: \\"openid\\",\\n    // url for  /.well-known/openid-configuration endpoint\\n    issuer: \\"http://$http-keycloak-url:8888/auth/realms/$your-keycloak-realm\\",\\n    disablePKCE: true,\\n    //initialize the code flow\\n    responseType: \\"code\\",\\n    showDebugInformation: true,\\n  });\\n}\\n```\\n\\nReplace `http-keycloak-url`, `$your-public-keycloak-client`, and `$your-keycloak-realm` with your actual Keycloak configurations.\\n\\nStart the application with `npm run start`\\n\\n#### User Authentication\\n\\nIn the `user.component.html` file, we authenticate the user to the logged in state and conditionally render the login and logout buttons.\\n\\n```html\\n<div *ngIf=\\"isLoggedIn\\">\\n  \x3c!-- Content for logged-in users --\x3e\\n  <div class=\\"mb-2 text-p2blue-700 text-2xl\\">Authenticated</div>\\n  <div class=\\"mb-6 text-p2blue-700 text-md\\">\\n    <div *ngIf=\\"userInfo\\">\\n      <p><span class=\\"font-bold\\">Username</span>: {{ userInfo.username }}</p>\\n      <p><span class=\\"font-bold\\">Email</span>: {{ userInfo.email }}</p>\\n      <p><span class=\\"font-bold\\">Roles</span>: {{ userInfo.roles }}</p>\\n    </div>\\n  </div>\\n  <button [class]=\\"buttonClasses\\" (click)=\\"signOut()\\">Sign Out</button>\\n</div>\\n<div *ngIf=\\"!isLoggedIn\\">\\n  <div class=\\"mb-6 text-p2blue-700 text-2xl\\">Not authenticated.</div>\\n  <button [class]=\\"buttonClasses\\" (click)=\\"signIn()\\">Sign In</button>\\n</div>\\n```\\n\\nthe `isLoggedIn` function can be found in the `user.component.ts` file.\\n\\n```javascript\\nthis.isLoggedIn = this.oauthService.hasValidAccessToken();\\n```\\n\\nClicking the Log In or Log Out buttons will redirect to the Keycloak login page or log the user out.\\n\\n#### Use Angular guards to secure routes\\n\\nWe can achieve route restriction by using guards. If the access token is not valid the guard will initiate the login flow. You could optionally apply this at the router level to enforce a full page login.\\n\\n```javascript\\nexport class AuthGuard implements CanActivate {\\n\\n  constructor(private oauthService: OAuthService) {\\n  }\\n\\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>{\\n    if(!this.oauthService.hasValidAccessToken()) {\\n      this.oauthService.initLoginFlow();\\n    }\\n    return of(true);\\n  }\\n}\\n```\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"keycloak-vs-auth0-open-source-alternative","metadata":{"permalink":"/blog/keycloak-vs-auth0-open-source-alternative","source":"@site/blog/2024-05-01-alternatives-auth0.md","title":"Keycloak vs. Auth0, a Open-Source Alternative","description":"Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions","date":"2024-05-01T00:00:00.000Z","formattedDate":"May 1, 2024","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"auth0","permalink":"/blog/tags/auth-0"},{"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":4.745,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"title":"Keycloak vs. Auth0, a Open-Source Alternative","slug":"keycloak-vs-auth0-open-source-alternative","date":"2024-05-01T00:00:00.000Z","author":"Phase Two","tags":["phase_two","open_source","authentication","authorization","auth0","keycloak"]},"prevItem":{"title":"Securing an Angular and Spring Boot Application with Keycloak","permalink":"/blog/secure-spring-boot"},"nextItem":{"title":"Securing SvelteKit Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-sveltekit"}},"content":"### Exploring Keycloak as an Alternative to Auth0 for Authentication Solutions\\n\\nWhen it comes to implementing authentication and authorization in web applications, Auth0 and Keycloak are two prominent solutions that offer robust security features. While Auth0 is a popular choice for many developers due to its comprehensive, cloud-based platform, Keycloak presents a compelling alternative, especially in terms of cost and flexibility. This blog post will delve into how Keycloak stacks up against Auth0, focusing on cost of ownership, maintenance, and functionality.\\n\\n\x3c!--truncate--\x3e\\n\\n#### Cost of Ownership\\n\\nThere are many factors to think about with a total cost-of-ownership. We\'ve written extensively about [choosing an Open-Source IAM](./2024-03-11-open-source-iam.md) over a managed service.\\n\\n**Auth0:**\\nAuth0 operates on a subscription model, which can be quite enticing for startups or small projects with minimal authentication needs. It offers a free tier limited by the number of authentications per month, active users, MFA setups, and more. As needs quickly increase for a business to setup a modest number of IDP connections, include minimal additional \\"users\\" (which could be people or devices), extract logs, customize deployments, and more, those bills can quickly spiral into $100K+. For SMB\'s to Enterprise, dedicating that amount of resources to your Auth solution can be untenable.\\n\\n**Keycloak:**\\nKeycloak, on the other hand, is an open-source solution developed by Red Hat. It is free to use, regardless of the number of users or the scale of the project. This makes Keycloak particularly attractive for businesses looking to cut costs or those who prefer not to be tied to vendor-specific pricing structures. The primary cost associated with Keycloak comes from the need to self-host and manage the software, which includes server costs and potential overhead for setup and maintenance. This can mean the ongoing cost is fixed since its not driven by features or users.\\n\\n**Winner**\\n\\nKeycloak\\n\\nLeveraging Phase Two\'s managed hosting provides a more capable free tier to test out and integrate Authorization and Authentication into an application(s). When that application\'s needs grow, Keycloak quickly becomes a far more cost-effective choice.\\n\\n#### Maintenance\\n\\n**Auth0:**\\nOne of the main advantages of Auth0 is that being a managed service, it requires minimal maintenance from the user\'s side. The Auth0 team handles updates, security patches, and infrastructure, ensuring that the system is kept up-to-date.\\n\\n**Keycloak:**\\nConversely, Keycloak requires more attention since it\'s self-hosted. Organizations must allocate resources for installing, configuring, and updating the software, as well as managing the underlying infrastructure. This can be a drawback for teams without the necessary technical expertise or resources. However, it also offers greater control over the deployment and security standards, which can be a significant advantage for certain regulatory environments.\\n\\n**Winner**\\n\\nAuth0.\\n\\nAs a fully managed service, Auth0 abstracts away this work.\\n\\n#### Functionality and Flexibility\\n\\n**Auth0:**\\nAuth0 offers a wide range of authentication features out-of-the-box, including social logins, enterprise federation, database connections, and more. It supports a variety of standards like OAuth2, OpenID Connect, and SAML, making it highly versatile for modern web applications. The platform also provides robust analytics and real-time monitoring tools that can be crucial for understanding user behavior and mitigating potential security threats.\\n\\n**Keycloak:**\\nKeycloak matches Auth0 in terms of functionality, supporting similar authentication protocols and user federation. It also offers customizable user interfaces for login, registration, and account management, which can be tailored to match the specific needs of a business. Being open-source, Keycloak allows developers to modify the codebase and integrate with other systems more freely than Auth0, offering a higher degree of customization at the cost of additional developer effort.\\n\\n**Winner**\\n\\nKeycloak\\n\\nAuth0 and Keycloak offer much of the same functionality for Authenication and Authorization, however Keycloak is extremely flexible to extend and configure. It\'s a system that can adjust and grow with an application.\\n\\n#### Integrating Keycloak with External Systems like Auth0\\n\\nFor organizations looking to transition from Auth0 to Keycloak or integrate Keycloak with systems that are already using Auth0, Keycloak\'s flexibility offers significant advantages. Keycloak can be configured to act as a broker that sits between Auth0 and your applications. This setup allows organizations to leverage the strengths of both platforms. For example, an organization can use Auth0 for external user management due to its robust third-party integrations while using Keycloak to handle more sensitive internal authentication needs.\\n\\nThe identity brokering capability of Keycloak enables it to delegate authentication to external Identity Providers (IdPs), such as Auth0. This means that Keycloak can manage internal permissions and roles, provide additional security checks, and maintain a user-friendly, consistent login experience across different systems. The ability to integrate seamlessly with services like Auth0 simplifies the migration process for companies transitioning from one authentication system to another and provides a layer of flexibility for new authentication strategies without disrupting user access or security.\\n\\n#### Which One Is Best for Me?\\n\\nChoosing between Auth0 and Keycloak largely depends on your organization\u2019s specific needs and capabilities. Auth0 is an excellent choice for those who need a fully managed solution with costs linked to user numbers and features. However, for organizations that prioritize cost savings and predictability, have the capability to manage their infrastructure, or require extensive customization, Keycloak emerges as a powerful, budget-friendly alternative.\\n\\nBoth platforms offer extensive documentation and community support, which can help mitigate some of the challenges associated with implementation and maintenance.\\n\\nUltimately, we at Phase Two believe marrying the two together is the strongest match. We offer robust [hosting options](https://phasetwo.io/) that fit well for multiple business sizes. Coupling the capabilities of Keycloak and the advantages of a managed service translates directly to implementation and cost control. **Leveraging Keycloak means that ongoing costs are relatively fixed**, since concerns about user growth or feature needs don\'t have to factor into every decision."},{"id":"instant-user-management-and-sso-for-sveltekit","metadata":{"permalink":"/blog/instant-user-management-and-sso-for-sveltekit","source":"@site/blog/2024-04-29-secure-sveltekit.mdx","title":"Securing SvelteKit Apps with Keycloak","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2024-04-29T00:00:00.000Z","formattedDate":"April 29, 2024","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"sveltekit","permalink":"/blog/tags/sveltekit"},{"label":"svelte","permalink":"/blog/tags/svelte"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.845,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-management-and-sso-for-sveltekit","title":"Securing SvelteKit Apps with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","sveltekit","svelte","authentication","authorization","sso"]},"prevItem":{"title":"Keycloak vs. Auth0, a Open-Source Alternative","permalink":"/blog/keycloak-vs-auth0-open-source-alternative"},"nextItem":{"title":"Securing Remix Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-remix"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [SvelteKit example](https://github.com/p2-inc/examples/tree/main/frameworks/sveltekit). We also have a plain [React example](https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a SvelteKit Project\\n\\n:::info\\nWe will use the Phase Two SvelteKit example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n2. Open the SvelteKit [folder](https://github.com/p2-inc/examples/tree/main/frameworks/sveltekit) within `/frameworks/sveltekit`.\\n3. Run `npm install` and then `npm run dev`. This example leverages [@auth/sveltekit](https://github.com/nextauthjs/next-auth) to provide HOC support.\\n4. The project makes use of the following SvelteKit items: hooks, components, layout, and `@auth/sveltekit` module. We\'ll review each in kind.\\n5. We\'ll review where we configure out Keycloak instance. Open the `src/auth.ts` file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the **Client secret** from the OIDC client creation section for the value of `clientSecret`.\\n\\n```tsx\\n// Use Environment Variables AUTH_SECRET in prod\\nconst authjsSecret =\\n  \\"f18d48ce9bea32e44b5591b2c89185729d4559435f77ca76872a83a0850563a4\\";\\n\\nconst realm = \\"shared-deployment-001\\";\\n\\nconst kcConfig = {\\n  // Use Environment Variables AUTH_KEYCLOAK_ISSUER in prod\\n  issuer: `https://usw2.auth.ac/auth/realms/${realm}`,\\n  // Paste \\"Client id\\" here. Use Environment Variables AUTH_KEYCLOAK_ID in prod\\n  clientId: \\"reg-example-1\\",\\n  // Paste \\"Client secret\\" here. Use Environment Variables AUTH_KEYCLOAK_ISSUER in prod\\n  clientSecret: \\"CLIENT_SECRET\\",\\n};\\n```\\n\\nThose are used to popluate the config for the provider `Keycloak`:\\n\\n```tsx\\nexport const { handle, signIn, signOut } = SvelteKitAuth({\\n  trustHost: true,\\n  secret: authjsSecret,\\n  providers: [Keycloak(kcConfig)],\\n});\\n```\\n\\n6. Next, let\'s review the hooks (`src/hooks.server.ts`) file. This imports the `handle` method by the `src/auth.ts` and re-exports it. This allows the hooks to act as a middleware and include the authentication status of the user in each request.\\n\\n```tsx\\nexport { handle } from \\"./auth.js\\";\\n```\\n\\n7. To retrieve the authentication status of the user in server-side rendering on the index route, it\'s using the `+layout.server.ts` file. It retrieves the authentication status via the `getSession` function from [SvelteKit Locals](https://kit.svelte.dev/docs/types#app-locals) set by `src/hook.server.ts`.\\n\\n```tsx\\nimport type { LayoutServerLoad } from \\"./$types.js\\";\\n\\nexport const load: LayoutServerLoad = async (event) => {\\n  const session = await event.locals.getSession();\\n  return {\\n    session,\\n  };\\n};\\n```\\n\\n8. The server-side authentication data is then accessed inside the `+page.svelte`, and then passed onto the user (`src/components/user.svelte`) component as follows:\\n\\n```html\\n<script lang=\\"ts\\">\\n  import User from \\"$components/user.svelte\\";\\n  import type { LayoutServerData } from \\"./$types.js\\";\\n\\n  export let data: LayoutServerData;\\n<\/script>\\n\\n// ... Rest of the index route ... // <User data={{ user: data?.session?.user,\\nstatus: Boolean(data?.session), }} />\\n```\\n\\nThe props, **user** and **status** represent the user information object and whether the user is signed in, respectively.\\n\\n9. At this point our entire application will be able to access all information and methods needed to perform authentication. View `src/components/user.svelte` for exactly how the code is authenticating your user. The sections rendering the **Log in** and **Log out** buttons are conditional areas based on the authenticated context. The buttons invoke server-side APIs provided by `@auth/sveltekit`.\\n\\nThe logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n10. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be **Not authenticated**. Click **Log In**. This will redirect you to your login page.\\n\\n:::info\\nUse the non-admin user created in the previous section to sign in.\\n:::\\n\\n11. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your **Authenticated** state, displaying your user\'s email and name.\\n12. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-management-and-sso-for-remix","metadata":{"permalink":"/blog/instant-user-management-and-sso-for-remix","source":"@site/blog/2024-04-24-secure-remix.mdx","title":"Securing Remix Apps with Keycloak","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2024-04-24T00:00:00.000Z","formattedDate":"April 24, 2024","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"remix","permalink":"/blog/tags/remix"},{"label":"react","permalink":"/blog/tags/react"},{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.01,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-management-and-sso-for-remix","title":"Securing Remix Apps with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","remix","react","reactjs","authentication","authorization","sso"]},"prevItem":{"title":"Securing SvelteKit Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-sveltekit"},"nextItem":{"title":"Presentation on Multi-Tenancy in Keycloak","permalink":"/blog/keycloak-orgs-presentation"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Remix example](https://github.com/p2-inc/examples/tree/main/frameworks/remix). We also have a plain [React example](https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Remix Project\\n\\n:::info\\nWe will use the Phase Two Remix example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n2. Open the Remix [folder](https://github.com/p2-inc/examples/tree/main/frameworks/remix) within `/frameworks/remix`.\\n3. Run `npm install` and then `npm run dev -- --port 3000`. This example leverages [remix-auth](https://github.com/sergiodxa/remix-auth) and [remix-keycloak](https://github.com/marsmars0x01/remix-keycloak) to provide HOC support.\\n4. Open the `app/services/keycloak.server.ts` file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the **Client secret** from the OIDC client creation section for the value of `clientSecret`:\\n\\n```tsx\\nconst kcConfig = {\\n  useSSL: true,\\n  domain: \\"usw2.auth.ac/auth\\",\\n  realm: \\"shared-deployment-001\\",\\n  clientID: \\"reg-example-1\\",\\n  clientSecret: \\"CLIENT_SECRET\\", // Paste \\"Client secret\\" here. Use Environment variables in prod\\n  callbackURL: \\"http://localhost:3000/auth/keycloak/callback\\",\\n};\\n```\\n\\nThose are used to popluate the config for the `KeycloakStrategy`:\\n\\n```tsx\\nexport default new KeycloakStrategy(kcConfig, ({ profile }) => profile);\\n```\\n\\nThe config is then used with the Authenticator instance in the `app/services/auth.server.ts` file. The authenticator instance uses the Session Storage to manage the state of authentication via a cookie.\\n\\n```tsx\\nimport { Authenticator } from \\"remix-auth\\";\\nimport keycloakServer from \\"./keycloak.server\\";\\nimport { sessionStorage } from \\"~/services/session.server\\";\\n\\nexport const authenticator = new Authenticator(sessionStorage);\\n\\nauthenticator.use(keycloakServer);\\n```\\n\\nAt this point our entire application will be able to access all information and methods needed to perform authentication. View the `session.server.ts` file for additional information about how the `SessionStorage` is used. The `SessionStorage` stores the Keycloak token and is used to derive the authenticated state. View `user.tsx` for exactly how the code is authenticating your user. The sections rendering the **Log in** and **Log out** buttons are conditional areas based on the authenticated context. The buttons invoke server-side APIs provided by `remix-auth`.\\n\\nThe logic using the authenticator to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n5. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be **Not authenticated**. Click **Log In**. This will redirect you to your login page.\\n\\n   :::info\\n   Use the non-admin user created in the previous section to sign in.\\n   :::\\n\\n6. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your **Authenticated** state, displaying your user\'s email and name.\\n7. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"keycloak-orgs-presentation","metadata":{"permalink":"/blog/keycloak-orgs-presentation","source":"@site/blog/2024-04-10-keycloak-orgs-presentation.md","title":"Presentation on Multi-Tenancy in Keycloak","description":"We recently gave a talk at the Keycloak DevDay 2024 conference in Frankfurt on our Organizations extension which provides single Realm multi-tenancy to Keycloak for modern SaaS applications. The hosts of the conference have posted the video of the talk on Youtube.","date":"2024-04-10T00:00:00.000Z","formattedDate":"April 10, 2024","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"organizations","permalink":"/blog/tags/organizations"},{"label":"multi_tenancy","permalink":"/blog/tags/multi-tenancy"}],"readingTime":0.4,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"keycloak-orgs-presentation","title":"Presentation on Multi-Tenancy in Keycloak","author":"Phase Two","tags":["release","keycloak","phase_two","organizations","multi_tenancy"]},"prevItem":{"title":"Securing Remix Apps with Keycloak","permalink":"/blog/instant-user-management-and-sso-for-remix"},"nextItem":{"title":"How to Customize Email Templates in Keycloak","permalink":"/blog/customizing-email-templates"}},"content":"We recently gave a talk at the [Keycloak DevDay 2024](https://www.keycloak-day.dev/) conference in Frankfurt on our [Organizations](https://github.com/p2-inc/keycloak-orgs) extension which provides single Realm multi-tenancy to Keycloak for modern SaaS applications. The hosts of the conference have posted the [video of the talk](https://www.youtube.com/watch?v=DNq51wWw3F4) on Youtube.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/DNq51wWw3F4\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nTake a look, and try it out today with our [free hosted Keycloak](https://phasetwo.io/dashboard/) instances that run all of our [open source Keycloak extensions](https://github.com/p2-inc)."},{"id":"customizing-email-templates","metadata":{"permalink":"/blog/customizing-email-templates","source":"@site/blog/2024-04-08-customizing-emails-in-keycloak.md","title":"How to Customize Email Templates in Keycloak","description":"Keeping your brand consistent across user touch-points is important to modern Saas companies. Just like customizing Login Pages, customizing your email templates is just as important. Keycloak has a number of templates which can be customized.","date":"2024-04-08T00:00:00.000Z","formattedDate":"April 8, 2024","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"idp_wizard","permalink":"/blog/tags/idp-wizard"},{"label":"on_prem","permalink":"/blog/tags/on-prem"},{"label":"private_cloud","permalink":"/blog/tags/private-cloud"},{"label":"email","permalink":"/blog/tags/email"},{"label":"customization","permalink":"/blog/tags/customization"}],"readingTime":1.46,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"customizing-email-templates","title":"How to Customize Email Templates in Keycloak","author":"Phase Two","tags":["keycloak","phase_two","open_source","idp_wizard","on_prem","private_cloud","email","customization"]},"prevItem":{"title":"Presentation on Multi-Tenancy in Keycloak","permalink":"/blog/keycloak-orgs-presentation"},"nextItem":{"title":"User Management and Identity Brokering for On-Prem Apps","permalink":"/blog/identity-brokering-on-prem"}},"content":"Keeping your brand consistent across user touch-points is important to modern Saas companies. Just like customizing [Login Pages](https://phasetwo.io/blog/customizing-login-pages), customizing your email templates is just as important. Keycloak has a number of [templates](https://phasetwo.io/docs/getting-started/email#content-templates) which can be customized.\\n\\nKeycloak starts out with simple text templates, but unless you like spending your days looking at Unix terminals, you probably prefer some color and images in your emails.\\n\\n\x3c!--truncate--\x3e\\n\\n## Template Customization\\n\\nPhase Two exposes an interface in the Admin UI to adjust the HTML and Text template. In the Styles > _Emails_ tab, select a template to edit.\\n\\n![Customizing Email Template Example](/blog/2024-04-08-email-templates.png)\\n\\nEnter the new HTML for the HTML template along with a matching Text template.\\n\\nUsing a test user, visit the flow of the templates you changed to have those emails sent to you and confirm you\'re happy with your changes.\\n\\n## Example Template\\n\\nThe Attributes theme in our Phase Two deployment automatically make use of these themes. The [sample template](https://github.com/p2-inc/keycloak-theme/examples) can be customized to fit your need. All you have to do is adjust the CSS colors and inject a link to your hosted logo file somewhere. There is a content section which you can copy/paste the default content from Keycloak into and customize. A simple HTML preview of the template lets you get an idea of how it will look.\\n\\n![Email example template](/blog/2024-04-08-email-example-phaseII.png)\\n\\n# Success\\n\\nKaboom! Done. We challenge you to tell us the last time a change in Keycloak was that easy \ud83d\udcaa\\n\\nAs always, our success is based on the success of our customers. We hope this extension and guide has helped you update the default Keycloak email branding to match that of your needs. If you have suggestions for further improvement of this feature, please reach out on [GitHub](https://github.com/p2-inc)!"},{"id":"identity-brokering-on-prem","metadata":{"permalink":"/blog/identity-brokering-on-prem","source":"@site/blog/2024-03-19-identity-brokering-on-prem.md","title":"User Management and Identity Brokering for On-Prem Apps","description":"With many companies racing into the cloud, very little is written about the huge opportunity, and potential pitfalls of building software for on-prem and private cloud deployments. With the growing Kubernetes and CNCF ecosystems, the balance point to justify self-hosting is constantly shifting. This is great news for companies that must host data and applications inside the enterprise. For software vendors looking to serve this exploding market, authentication can be a blind spot.","date":"2024-03-19T00:00:00.000Z","formattedDate":"March 19, 2024","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"idp_wizard","permalink":"/blog/tags/idp-wizard"},{"label":"on_prem","permalink":"/blog/tags/on-prem"},{"label":"private_cloud","permalink":"/blog/tags/private-cloud"}],"readingTime":3.85,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"identity-brokering-on-prem","title":"User Management and Identity Brokering for On-Prem Apps","author":"Phase Two","tags":["keycloak","phase_two","open_source","idp_wizard","on_prem","private_cloud"]},"prevItem":{"title":"How to Customize Email Templates in Keycloak","permalink":"/blog/customizing-email-templates"},"nextItem":{"title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","permalink":"/blog/open-source-iam"}},"content":"With many companies racing into the cloud, very little is written about the huge opportunity, and potential pitfalls of building software for on-prem and private cloud deployments. With the growing Kubernetes and CNCF ecosystems, the balance point to justify self-hosting is constantly shifting. This is great news for companies that must host data and applications inside the enterprise. For software vendors looking to serve this exploding market, authentication can be a blind spot.\\n\\n### A story, inspired by customer use cases:\\n\\n> You\u2019ve built a successful enterprise SaaS product, and your cloud offering has taken off. Recently, you\u2019ve been getting inquiries from government agencies, large companies in regulated industries, and foreign companies \u2013 all of which have legal, compliance or regulatory requirements that prohibit them from using your product in the cloud.\\n>\\n> Given the size of the opportunity, you\u2019ve decided to go for it. Your team has packaged your application up as a set of Kubernetes manifests, making changes, replacing cloud services with open source alternatives, and even built out a runbook to help your devops peers at the customer operate it themselves.\\n>\\n> The big day comes, and you\u2019re installing at your first customer. You expect that there will be some minor bumps along the way, but their first question just flattens you: \u201cHow do we connect this to our in-house identity provider?\u201d It was a question that was never on your radar, but now it\u2019s the most important thing for the customer.\\n>\\n> Like most SaaS companies, you\u2019re probably either hand-rolling your authentication and user management using something like Passport.js, Devise, Django, etc., using some social login options, or using a cloud-only service like Auth0 or WorkOS. If you had implemented SAML, the most common protocol for just-in-time user provisioning with enterprise identity providers, you probably went for a basic approach. You wrongly assumed that user management and identity brokering would be easier for on-prem.\\n>\\n> You throw some engineering and customer success resources at the problem, but quickly realize it\u2019s not a scalable solution. The customer wants to map their groups, and manage access and authorization through _their_ IdP. Just the overhead of connecting to every possible type of IdP, and supporting that for every customer, will eat up your margin before they start using your application.\\n\\n\x3c!--truncate--\x3e\\n\\nThe **good news** is that you\u2019re not alone in missing this key enterprise need. Many companies who are new to on-prem and private cloud deployments learn this the hard way, many without losing customers.\\n\\nHowever, the reality is that for an application that is used by an entire enterprise, who can use it (authentication) and how (authorization) is equally as important for on-prem applications as cloud. And, being hosted and operated by your customer, simplicity of management and transparency is more important than cloud.\\n\\n### An open source solution to the rescue\\n\\nFortunately, there is feature complete identity and access management system that is equally at home both on-premise and in the cloud. It can easily facilitate identity brokering with the customer identity provider, as well as give their IT staff access to critical access and operational information.\\n\\nAt Phase Two, we\u2019ve had a front row seat in solving this problem. Our customers have deployed [Keycloak](https://www.keycloak.org/), bundled with their application to over 300 of their customer sites. In these deployments, Keycloak is used for identity brokering to the customer identity provider, SSO authentication for all of their deployed applications, and role and access management to broker and manage authorization within their applications.\\n\\n### Tools to empower the customer\\n\\nIn addition to solving these core challenges, Phase Two has built [tools](https://github.com/p2-inc) to extend enterprise [use-cases](https://phasetwo.io/product/organizations) and facilitate [customer onboarding](https://phasetwo.io/product/adminportal), one of the biggest drags on Customer Success hours, and ultimately a huge margin drain.\\n\\nTo this end, the most valuable tool, from our customers\u2019 perspectives is our [Identity Provider Setup Wizard](https://github.com/p2-inc/idp-wizard). This tool is meant as a guide for customers\u2019 initial IdP connection, turning an esoteric form into a clear step-by-step process for specific IDPs (what keys to get, where to store them, and so on). This had previously been the long pole in the onboarding tent. By giving the customers a tool to self-configure and manage their own IdP connection, Phase Two has gifted back valuable Customer Success hours and margin dollars.\\n\\n![idp-wizard-video-gif](https://github.com/p2-inc/idp-wizard/assets/244253/e9b421c0-b487-4c07-9eed-87ea89fc574b)\\n\\nWe conveniently bundle all of these tools in [Docker images](https://github.com/p2-inc/phasetwo-containers) for easy deployment.\\n\\nDoes the above story sound familiar, or something you might be stumbling into? [Contact sales](mailto:sales@phasetwo.io) to find out how we can help your journey to on-prem be as painless as possible and supercharge your customer identity onboarding process."},{"id":"open-source-iam","metadata":{"permalink":"/blog/open-source-iam","source":"@site/blog/2024-03-11-open-source-iam.md","title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","description":"In today\'s digital landscape, managing user identities and securing access to applications and services is paramount for businesses of all sizes. As the demand for robust identity and access management (IAM) solutions grows, so does the market, with various commercial options vying for attention. When we first started using Keycloak over 7 years ago, we were surprised that there was a relatively unknown, but completely open-source alternative to commercial offerings in the Identity and Access Management market.","date":"2024-03-11T00:00:00.000Z","formattedDate":"March 11, 2024","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"auth0","permalink":"/blog/tags/auth-0"},{"label":"workos","permalink":"/blog/tags/workos"},{"label":"okta","permalink":"/blog/tags/okta"},{"label":"cognito","permalink":"/blog/tags/cognito"}],"readingTime":5.88,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"open-source-iam","title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","author":"Phase Two","tags":["keycloak","phase_two","open_source","auth0","workos","okta","cognito"]},"prevItem":{"title":"User Management and Identity Brokering for On-Prem Apps","permalink":"/blog/identity-brokering-on-prem"},"nextItem":{"title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","permalink":"/blog/keycloak-on-cockroachdb"}},"content":"In today\'s digital landscape, managing user identities and securing access to applications and services is paramount for businesses of all sizes. As the demand for robust identity and access management (IAM) solutions grows, so does the market, with various commercial options vying for attention. When we first started using [Keycloak](https://keycloak.org) over 7 years ago, we were surprised that there was a relatively unknown, but completely open-source alternative to commercial offerings in the Identity and Access Management market.\\n\\n\x3c!--truncate--\x3e\\n\\n### Commercial offerings\\n\\nCompanies such as [Auth0](https://www.auth0.com), [Okta](https://www.okta.com), Microsoft (through [AzureAD](https://www.microsoft.com/en-us/security/business/microsoft-entra)) had created cloud authentication services, and helped bring standardization to the market through implementation of standards, such as OIDC, SAML, SCIM, LDAP, etc. However, there was little differentiation among them, and despite their pricing models, were essentially commodities that were the same.\\n\\nAmazon released [AWS Cognito](https://aws.amazon.com/cognito), which did price it as a commodity, but failed so miserably in UI and developer ergonomics, that it failed to reach a dominant market position despite its de minimis cost.\\n\\nMore recently, nascent companies such as [WorkOS](https://workos.com) and [Frontegg](https://www.frontegg.com), while casting themselves as CIAM and \u201cSSO made easy\u201d to enterprise SaaS customers, are really just repackaging the same IAM features and protocol implementations that have been available in Keycloak for years. Furthermore, the pricing models have tilted back towards predatory on your company\u2019s business model.\\n\\n### Open source alternatives\\n\\nAmidst this landscape, open-source alternatives like Keycloak are emerging as powerful contenders, offering unique advantages over their commercial counterparts. Because the market has settled on standard protocols, it opened the door for superior open-source implementations to emerge with feature parity and standards compliance. Keycloak stands out as an alternative to commercial IAM solutions, enabling your business to unlock both flexibility and control.\\n\\n1. **Open Source Foundation:** At the heart of Keycloak lies its open-source nature. Developed by Red Hat, Keycloak provides a fully-fledged IAM solution that is freely available for anyone to use, modify, and extend according to their requirements. This open ethos empowers organizations with unparalleled flexibility and control over their identity infrastructure, without being tied to proprietary vendors or licensing agreements. Furthermore, given the core security requirements of the protocol implementations, developing in the open gives customers the reassurance that the code has been audited by others, unlike closed source, buggy, commercial implementations that come with zero transparency or guarantees.\\n2. **Cost-Effectiveness:** One of the most significant advantages of Keycloak is its cost-effectiveness. Unlike commercial IAM solutions that operate on subscription-based pricing models, Keycloak eliminates licensing fees, enabling organizations to allocate resources more efficiently. With Keycloak, businesses can scale their identity infrastructure without worrying about escalating costs, making it an attractive option for startups, small businesses, and enterprises alike.\\n3. **Customization and Extensibility:** Keycloak stands out for its robust customization and extensibility capabilities. From authentication flows and user federation to role-based access control (RBAC) and fine-grained permissions, Keycloak provides a plethora of features that can be tailored to suit specific use cases and compliance requirements. Moreover, its modular architecture and comprehensive API support facilitate seamless integration with existing systems and third-party services, empowering developers to build bespoke identity solutions with ease.\\n4. **On-Premise and Cloud Deployment:** Whether organizations prefer on-premise deployment for enhanced security and compliance or cloud-based solutions for scalability and convenience, Keycloak offers the flexibility to meet diverse deployment needs. With support for Docker, Kubernetes, and other containerization technologies, Keycloak simplifies deployment across various environments, ensuring seamless integration into existing infrastructure and workflows.\\n5. **Active Community and Support:** Backed by a vibrant community of developers and contributors, Keycloak benefits from ongoing enhancements, bug fixes, and feature additions. This active ecosystem fosters innovation and collaboration, with users sharing best practices, troubleshooting tips, and extensions through forums, mailing lists, and code repositories. Additionally, organizations seeking professional support and services can leverage expertise of a growing ecosystem of companies providing support, ensuring reliable deployment and ongoing maintenance of their Keycloak instances.\\n\\n### Barriers\\n\\nSo, given Keycloak\'s inherent advantages, while solving all of the same problems, why has it failed to receive broad market adoption? Looking back, and polling our customer base, it seems that Keycloak has suffered from a couple of barriers:\\n\\n1. **Awareness:** Other than a couple of markets (e.g. Germany) Keycloak is still relatively unknown. Because it\u2019s not a commercial entity, there isn\u2019t a content marketing engine that focuses on discovery for common use cases.\\n1. **Onboarding**: Documentation for getting successful for common use cases is fragmented and often hard to find. When solving a new problem, examples are a great way to get a developer \u201chooked\u201d, but these are largely missing from official Keycloak documentation.\\n1. **Community**: Because the core Keycloak developers have largely been working for one customer (RedHat) and not the community at large, developers who are exploring Keycloak for the first time can find it hard to know where to ask question. While the Discourse, GitHub, Slack and mailing lists are a good direction, there\u2019s not a definitive way to get support.\\n1. **UI**: The Keycloak Admin UI, while complete, is intimidating to new users. Unlike the commercial alternatives, that have invested resources in building and measuring customer success into their UIs, while Keycloak\u2019s attitude has been \\"[RTFM](https://en.wikipedia.org/wiki/RTFM)\\". Furthermore, the user facing UIs of Keycloak are notoriously \u201crough edged\u201d, commercial alternatives are beautiful, modern, and capable of easy customization and branding.\\n\\nObviously, we think that the barriers are something that can be solved, and [Phase Two](https://phasetwo.io) has been working hard in its [open source extensions](https://github.com/p2-inc) and [cloud offerings](https://phasetwo.io/#pricing) to overcome these barriers. We\'ve already made great strides, and believe that we\'re at the point where customers can realize the above advantages, while compromising relatively little -- All while achieving tremendous cost savings.\\n\\n### Migrating from your current identity provider\\n\\nAlready using one of the commercial systems? Keycloak is a complete, robust and mature identity solution that can replace your identity provider and user management systems **today**. It has complete parity with all of the major features of commercial IAM systems, and because of reliance on standards, migration is easier than you think. By migrating to Keycloak, you gain full control over your authentication and authorization processes, enabling seamless integration, customization, and scalability tailored to your organization\'s unique needs.\\n\\nPhase two has implemented [user migration](https://phasetwo.io/docs/user-migration/) support in the product for all tiers. This is meant to ease your transition from your existing user management system so that migration can occur incrementally with a complete fallback plan. For Premium and Enterprise subscribers, we include migration support. Contact [sales](mailto:sales@phasetwo.io) to get started with your migration.\\n\\n### Conclusion\\n\\nIn a landscape dominated by commercial IAM solutions, Keycloak shines as a compelling alternative that combines the power of open source with enterprise-grade features and flexibility. With its cost-effectiveness, customization capabilities, deployment flexibility, and active community support, Keycloak empowers organizations to take control of their identity infrastructure, unlock new possibilities, and adapt to evolving security and compliance requirements. Whether you\'re a startup looking to bootstrap your identity management or an enterprise seeking to streamline operations, Keycloak offers a compelling solution that puts you in the driver\'s seat of your IAM journey."},{"id":"keycloak-on-cockroachdb","metadata":{"permalink":"/blog/keycloak-on-cockroachdb","source":"@site/blog/2023-12-06-keycloak-on-cockroachdb.mdx","title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","description":"Keycloak Phase Two CockroachDb Logos","date":"2023-12-06T00:00:00.000Z","formattedDate":"December 6, 2023","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":5.61,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"keycloak-on-cockroachdb","title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","author":"Phase Two","tags":["keycloak","phase_two","cockroach"]},"prevItem":{"title":"Keycloak: An open source alternative to Auth0, WorkOS, Okta, Cognito, ...","permalink":"/blog/open-source-iam"},"nextItem":{"title":"Securing Vue Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-vue"}},"content":"![Keycloak Phase Two CockroachDb Logos](/blog/2023-12-06-keycloak-on-cockroachdb-kcpluscrdb.png)\\n\\n[Keycloak](https://www.keycloak.org/) has been a leader in the Identity and Access Management (IAM) world since its launch almost 9 years ago. The market for IAM tools had several commercial offerings that failed to meet many business model and price needs, and Keycloak filled the hole with an open-source offering.\\n\\nFast-forward to today, Keycloak still leads with mature protocol implementations, hardened security, and a reliable architecture that has been battle-tested for years, under the stewardship of the maintainers at [Red Hat](https://www.redhat.com/). Whether deploying an in-house identity provider, or a user management system for a SaaS offering, Keycloak is an obvious choice.\\n\\n\x3c!--truncate--\x3e\\n\\nWith time, customer needs have evolved to include greater resiliency, expanded database selection, deploying in multiple regions, and operating across clouds. Because of operational complexity and architectural barriers, the Keycloak team decided to embark on a project to build a new underlying storage architecture. While promising, the project has taken longer than expected, and has yet to produce a production-ready result.\\n\\nOne of the great aspects of open source, is that it allows anyone to participate. About 18 months ago, [Phase Two](https://phasetwo.io) decided to implement support for CockroachDB for the existing storage architecture in order to meet this growing customer demand.\\n\\n## Remind me, what is Phase Two?\\n\\nPhase Two helps SaaS builders accelerate time-to-market and enterprise adoption with powerful SSO, identity and user management features. To that end, Phase Two has created an enhanced distribution of Keycloak that bundles several essential [open source extensions](https://github.com/p2-inc) for modern SaaS use cases. Phase Two supports hosted and on-premise customers for a variety of use cases.\\n\\n## How we built support for CockroachDB\\n\\nWe eagerly dove into the challenge of adding CockroachDB support, but we quickly encountered a few key issues:\\n\\n#### 1. SQL\\n\\nKeycloak internally uses the [Hibernate ORM framework](https://hibernate.org/), which generates the SQL for the database type selected (called a \\"dialect\\" by them). Fortunately for us, the [Cockroach Labs](https://www.cockroachlabs.com/) team had already built a custom [CockroachDB Hibernate dialect](https://www.cockroachlabs.com/blog/building-support-for-java-orm-hibernate-in-cockroachdb/) that we were able to use without modification.\\n\\n#### 2. Migrations\\n\\nThe [Liquibase](https://www.liquibase.org/) library is used by Keycloak for tracking, managing, and applying database schema changes. However, the authors had not anticipated adding support for entirely new database types without making code changes. We had to add CRDB, the Hibernate dialect, and the correct JDBC driver classes to the code to enable first-class support.\\n\\nWe ported the migrations that were incompatible with CRDB. This was required because of a few SQL semantics that are not supported in CRDB the same way they are in PostgreSQL.\\n\\n#### 3. Transactions\\n\\nBecause CRDB uses [serializable isolation](https://www.cockroachlabs.com/docs/stable/transactions#serializable-isolation) by default, it was incompatible with Keycloak\'s use of distributed (\\"XA\\") or two-phase commit (\\"JTA\\") transaction managers. However, because the use of these is not necessary outside of an environment where other applications are using the same resources, it was possible to disable them. The Keycloak team was helpful in adding some environment variables to disable these, as they had also seen other database use cases that required it.\\n\\n#### 4. An **Incredible** Team\\n\\nIt also wouldn\'t have been possible to complete the changes without tireless support from the Cockroach Labs engineering team. They patiently helped us understand how CRDB is different, wrote code examples and tests, and were never shy about giving us access to everyone in the organization, regardless of level and how busy they were.\\n\\nA **HUGE** thank you to the whole Cockroach team!\\n\\n## How does it work?\\n\\nAbout 12 months ago, we launched our self-service, free product, built on our CRDB port and running on Cockroach Labs\' managed serverless product. Over that period, we\'ve provided over 900 free deployments, without a single production incident for both CockroachDB serverless and Phase Two enhanced Keycloak.\\n\\nFurthermore, we\'ve built out a test system that we run prior to releasing new versions in order to ensure that there are no regressions compared to the main Keycloak distributions. We run that test system and several benchmarks prior to releasing each new version of our fork.\\n\\n## Why is this important now?\\n\\nThe Keycloak team had embarked on an ambitious project over 2 years ago to completely overhaul the storage architecture. The so-called \\"map store\\" was designed, among other things, to provide a basis for high-availability by replicating data with multiple data centers. However, after that time period, there was still a lot of uncertainty and risk involved in getting to the point where the store was production ready. Thus the team decided to drop the project. [See the announcement](https://www.keycloak.org/2023/10/map-store-removal).\\n\\nThat leaves Phase Two\'s CRDB support in a unique position, as it is the only version of Keycloak that will support Cockroach\'s multi-region database.\\n\\n## Take me to it!\\n\\nWe get it! Here are a few links to help you jump-start your work:\\n\\n#### 1. Managed Hosting\\n\\nPhase Two provides self-service deployments of Keycloak hosted on multiple clouds. [Plans](https://phasetwo.io/#pricing) start with a free version for testing and small production use cases. Dedicated clusters are available for customers requiring an SLA, isolated resources, and the ability to grow into larger use cases.\\n\\nThe database tier for our shared and dedicated clusters uses the [CockroachDB serverless](https://www.cockroachlabs.com/lp/serverless-database-p) service. Working with Cockroach Labs gives us the expertise and reliability of hosting thousands of customer clusters at a massive scale.\\n\\n#### 2. Community Distribution\\n\\nIf you\'re more DIY, and you\'re planning to run everything yourself, the base distribution image that contains our changes to Keycloak to enable CockroachDB support is available in the Phase Two [Keycloak CockroachDB docker repository](https://quay.io/repository/phasetwo/keycloak-crdb?tab=info). It\'s a drop-in replacement for Keycloak that doesn\'t require much configuration beyond the [official guides](https://www.keycloak.org/guides). We generally release a version within 1-2 days of the official Keycloak release.\\n\\nFor the impatient, we\'ve also put together a complete [docker compose](https://github.com/p2-inc/phasetwo-containers/blob/main/examples/cockroach/docker-compose.yml) example that includes a single node CockroachDB instance. You can also modify the configuration to use your own CockroachDB dedicated or serverless database.\\n\\n## The Future\\n\\n#### Keycloak on CRDB\\n\\nBecause of the uncertainty around the direction of the Keycloak storage architecture, Phase two is committed to maintaining support for the \\"legacy store\\" and our port to CRDB for the long term.\\n\\n#### Phase Two and Cockroach Labs\\n\\nMany of our on-premise, support customers with large use cases asked us to build out a solution for massive-scale, fault-tolerant, multi-region use cases. One of the great parts of building support for Keycloak\'s existing storage architecture for CRDB is that we\'ve been able to explore use cases that were previously impossible using the standard Keycloak distribution. For use cases with these requirements, plus global proximity to users and regional failover, we built global clusters, backed by CRDB multi-region database, for which we are now in Beta.\\n\\nWe\'re excited to see what you build with Keycloak and CRDB!"},{"id":"instant-user-managemenet-and-sso-for-vue","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-vue","source":"@site/blog/2023-09-14-secure-vue.mdx","title":"Securing Vue Apps with Keycloak","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2023-09-14T00:00:00.000Z","formattedDate":"September 14, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"nuxt","permalink":"/blog/tags/nuxt"},{"label":"vue","permalink":"/blog/tags/vue"},{"label":"vuejs","permalink":"/blog/tags/vuejs"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":0.775,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-vue","title":"Securing Vue Apps with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","nuxt","vue","vuejs","authentication","authorization","sso"]},"prevItem":{"title":"Keycloak on CockroachDB: Scalable, Resilient, Open Source, Identity and Access Management","permalink":"/blog/keycloak-on-cockroachdb"},"nextItem":{"title":"Securing Nuxt Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\nimport VueJs from \\"/templates/frameworks/_vuejs.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Vue example](https://github.com/p2-inc/examples/tree/main/frameworks/vue).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Vue.js Project\\n\\n<VueJs />\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-nuxt","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt","source":"@site/blog/2023-09-08-secure-nuxt.mdx","title":"Securing Nuxt Apps with Keycloak","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2023-09-08T00:00:00.000Z","formattedDate":"September 8, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"nuxt","permalink":"/blog/tags/nuxt"},{"label":"vue","permalink":"/blog/tags/vue"},{"label":"vuejs","permalink":"/blog/tags/vuejs"},{"label":"nuxtjs","permalink":"/blog/tags/nuxtjs"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":6.935,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-nuxt","title":"Securing Nuxt Apps with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","nuxt","vue","vuejs","nuxt","nuxtjs","authentication","authorization","sso"]},"prevItem":{"title":"Securing Vue Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-vue"},"nextItem":{"title":"Django Web Authentication with Keycloak","permalink":"/blog/secure-django"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Nuxt example](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Nuxt Project\\n\\n:::info\\nWe will use the Phase Two Nuxt example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\nThis example uses Nuxt3. There are a couple methods by which you can integrate Keycloak to your Nuxt application. We\'re going to explore two methods here, one uses [`keycloak-js`](https://www.npmjs.com/package/keycloak-js) and the other leverages [`oidc-client-ts`](https://www.npmjs.com/package/oidc-client-ts). The `keycloak-js` library provides a simple, client-only method, but lacks some of the sophistication provided by the `oidc-client` library that is heavily supported and more widely used.\\n\\n### Using `keycloak-js`\\n\\n:::info\\nFor this example, we need to disable \\"Client Authentication\\" in the OIDC client that was setup earlier. This is available under Client > Settings > Capability config > Client authentication to OFF.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Nuxt [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt) within `/frameworks/nuxt` and open the `keycloak-js` folder within `/frameworks/nuxt/keycloak-js`.\\n1. Run `npm install` and then `npm run dev`. [`keycloak-js`](https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter) is a Javascript library that provides a fast way to secure an application.\\n1. The project makes use of the following Nuxt items: components, composables, layouts, and plugins. We\'ll review each in kind.\\n1. The main component that shows the User\'s authenticated state is in `/components/User`. In this component we call the `useKeycloak` composable, which let\'s us key into the `keycloak-js` functions that we\'ve wrapped to make easily availble.\\n\\n   ```javascript\\n   const { keycloak, authState } = useKeycloak();\\n\\n   function login() {\\n     keycloak.login();\\n   }\\n\\n   function logout() {\\n     keycloak.logout();\\n   }\\n   ```\\n\\n   Lower in the file the component leverages `v-if` checks to determine if the `authState` is `authenticated` or not. Depending on the state, a Log in or Log out button is available.\\n\\n1. Let\'s take a look at the setup for the composable next. Our composable is in `/composables/keycloak-c`. A composable is a function defined that can be called anywhere in the Nuxt application. It\'s a good way to abstract logic to be reused. In our case we use it to wrap a `keycloak-js` plugin (more on that in the next step) and help provided a state value for the authenticated state.\\n\\n   ```javascript\\n   export const useKeycloak = () => {\\n     const nuxtApp = useNuxtApp();\\n     const keycloak = nuxtApp.$keycloak as Keycloak;\\n     const authState = useState(\\"authState\\", () => \\"unAuthenticated\\");\\n\\n     keycloak.onAuthSuccess = () => (authState.value = \\"authenticated\\");\\n     keycloak.onAuthError = () => (authState.value = \\"error\\");\\n\\n     return {\\n       keycloak,\\n       authState,\\n     };\\n   };\\n   ```\\n\\n1. In the plugin, `/plugins/keycloak.client.ts` we instantiate the `keycloak-js` library. We can then attach that instance to the `NuxtApp` instance. Substitute the correct values for your Keycloak instance that we created earlier in the tutorial.\\n\\n   ```javascript\\n   export default defineNuxtPlugin((nuxtApp) => {\\n     const initOptions: KeycloakConfig = {\\n       url: \\"https://euc1.auth.ac/auth/\\",\\n       realm: \\"shared-deployment-001\\",\\n       clientId: \\"reg-example-1\\",\\n     };\\n\\n     const keycloak = new Keycloak(initOptions);\\n\\n     nuxtApp.$keycloak = keycloak;\\n\\n     keycloak.init({\\n       onLoad: \\"check-sso\\",\\n     });\\n   });\\n   ```\\n\\n1. The logic for checking the `authenticated` state can be used to expand in ways to secure your site in a number of ways.\\n\\n### Using `oidc-client`\\n\\nThe [`oidc-client-ts`](https://www.npmjs.com/package/oidc-client-ts) package is a well-maintained and used library. It provides a lot of utilities for building out a fully production app.\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Nuxt [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nuxt) within `/frameworks/nuxt` and open the `/nuxt/oidc-client-ts` folder.\\n1. Run `npm install` and then `npm run dev`.\\n1. The structure of the project is similar to the `keycloak-js` version but with a the use of services, stores, and middleware.\\n1. We\'ll review where we configure out Keycloak instance. First open `/services/keycloak-config.ts`. In this file you will want to update it with the values for the Keycloak instance we set-up earlier in the tutorial. Make sure you are using the one with Client Authentication enabled. Update the `clientSecret` with the value. Use and environment variable here if you wish.\\n\\n   ```json\\n   export const keycloakConfig = {\\n     authorityUrl: \\"https://euc1.auth.ac\\",\\n     applicationUrl: \\"http://localhost:3000\\",\\n     realm: \\"shared-deployment-001\\",\\n     clientId: \\"reg-example-1\\",\\n     clientSecret: \\"CLIENT_SECRET\\",\\n   };\\n   ```\\n\\n1. Switch over to the `/services/auth-service` now to see how the Oidc instance is started. The class pulls in values from the `keycloakConfig` to use in the constructor. The other functions are wrappers around methods provided by the `oidc-client` library. This allows us to key into things like `signInRedirect` and `signoutRedirect`.\\n\\n   How the settings are integrated:\\n\\n   ```javascript\\n   const settings = {\\n     authority: `${keycloakConfig.authorityUrl}/auth/realms/${keycloakConfig.realm}`,\\n     client_id: keycloakConfig.clientId,\\n     client_secret: keycloakConfig.clientSecret,\\n     redirect_uri: `${window.location.origin}/auth`,\\n     silent_redirect_uri: `${window.location.origin}/silent-refresh`,\\n     post_logout_redirect_uri: `${window.location.origin}`,\\n     response_type: \\"code\\",\\n     userStore: new WebStorageStateStore(),\\n     loadUserInfo: true,\\n   };\\n   this.userManager = new UserManager(settings);\\n   ```\\n\\n   Example function wrapper:\\n\\n   ```javascript\\n   public signInRedirect() {\\n     return this.userManager.signinRedirect();\\n   }\\n   ```\\n\\n1. With the `AuthService` defined, we can now expose that through a composable. Switch to the `/composables/useServices` file. The file is simple but provides a way for any component to hook into the service instance.\\n\\n   ```javascript\\n   import AuthService from \\"@/services/auth-service\\";\\n   import ApplicationService from \\"@/services/application-service\\";\\n   import { useAuth } from \\"@/stores/auth\\";\\n\\n   export const useServices = () => {\\n     const authStore = useAuth();\\n\\n     return {\\n       $auth: new AuthService(),\\n       $application: new ApplicationService(authStore.access_token),\\n     };\\n   };\\n   ```\\n\\n   We pull in the `AuthService` then expose it through the `$auth` variable. The `$application` variable exposes the `ApplicationService` which is provided as an example of how you could secure API calls.\\n\\n1. We leverage the [`pinia`](https://pinia.vuejs.org/) library to make store User information to make it easily accessible. Open `/stores/auth/index`. From within this file, we can wrap the `User` object exposed by the `oidc-client` package. This can then be leveraged in the middleware function we want to define or to pull information quickly about the user.\\n1. There are a few main pages in play here that we define to create paths the library can leverage. The `/pages/auth`, `/pages/logout`, `/pages/silent-refresh` create paths at the same name. These are used to do the redirection during authentication or log out. From within these we use the `AuthService` to direct the user around within the app. For instance in `/auth`:\\n\\n   ```javascript\\n   const authenticateOidc = async () => {\\n     try {\\n       await services.$auth.signInCallback();\\n       router.push(\\"/\\");\\n     } catch (error) {\\n       console.error(error);\\n     }\\n   };\\n\\n   await authenticateOidc();\\n   ```\\n\\n   The `router.push` naively sends someone to the home page. This could be updated to go to any number of places, including the page one started the login flow from if you were to store that information to be retrieved.\\n\\n1. We have also created a middleware file in `/middleware/auth.global` to be used in a couple of ways. It checks if the user is authenticated and based on that knowledge, stores the user information in the store (if not there) or could be used to send someone to login. For our example, we created buttons to initiate that but there is a comment which shows how you could force a set of paths to require login.\\n\\n   ```javascript\\n   const authFlowRoutes = [\\"/auth\\", \\"/silent-refresh\\", \\"/logout\\"];\\n\\n   export default defineNuxtRouteMiddleware(async (to, from) => {\\n     const authStore = useAuth();\\n     const services = useServices();\\n     const user = (await services.$auth.getUser()) as User;\\n\\n     if (!user && !authFlowRoutes.includes(to.path)) {\\n       // use this to automatically force a sign in and redirect\\n       // services.$auth.signInRedirect();\\n     } else {\\n       authStore.setUpUserCredentials(user);\\n     }\\n   });\\n   ```\\n\\n1. Now that we have all the things setup, we can define the user component `/components/User` to easily pull information about the user\'s state and display the appropriate UI.\\n\\n   ```javascript\\n   const authStore = useAuth();\\n   const user = authStore.user;\\n\\n   const signIn = () => services.$auth.signInRedirect();\\n   const signOut = () => services.$auth.logout();\\n   ```\\n\\n   With this, the user object is now easily available. A simple `v-if=\\"user\\"` allows the app to determine what UI to show.\\n\\n1. A bit more complicated of a setup, but more elegant in the handling of the logged in flow. The `oidc-client` allows for much better fine-tuning of the experience.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"secure-django","metadata":{"permalink":"/blog/secure-django","source":"@site/blog/2023-08-31-secure-django.mdx","title":"Django Web Authentication with Keycloak","description":"Django is a high-level, open-source web framework for building web applications using the Python programming language. It follows the Model-View-Controller (MVC) architectural pattern.","date":"2023-08-31T00:00:00.000Z","formattedDate":"August 31, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"django","permalink":"/blog/tags/django"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":5.43,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"secure-django","title":"Django Web Authentication with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","django","authentication","authorization","sso"]},"prevItem":{"title":"Securing Nuxt Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nuxt"},"nextItem":{"title":"Securing Next.js Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\n[Django](https://www.djangoproject.com/) is a high-level, open-source web framework for building web applications using the Python programming language. It follows the Model-View-Controller (MVC) architectural pattern.\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to secure a Django Web application.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Django example](https://github.com/p2-inc/examples/tree/main/frameworks/django). We are also building [Keycloak examples](https://github.com/p2-inc/examples) for other frameworks.\\n\\n:::\\n\\n## Setting up a Django Project\\n\\nThe following could be applied to an existing Django application, but we have chosen to use the excellent tutorial application built by [Mozilla](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django) as our example. If you aren\'t yet familiar with Django, we encourage you to follow the tutorial there.\\n\\nThe completed code for that tutorial is available in their GitHub repository. We\'ll clone it to get started.\\n\\n### Quick Start\\n\\nTo get this project up and running locally on your computer:\\n\\n1. Set up the [Python development environment](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/development_environment).\\n   We recommend using a Python virtual environment.\\n1. Assuming you have Python setup, run the following commands (if you\'re on Windows you may use `py` or `py -3` instead of `python` to start Python):\\n   ```\\n   pip install -r requirements.txt\\n   python manage.py makemigrations\\n   python manage.py migrate\\n   python manage.py collectstatic\\n   python manage.py test # Run the standard tests. These should all pass.\\n   python manage.py createsuperuser # Create a superuser\\n   python manage.py runserver\\n   ```\\n1. Open a browser to `http://127.0.0.1:8000/admin/` to open the admin site\\n1. Create a few test objects of each type.\\n1. Open tab to `http://127.0.0.1:8000` to see the main site, with your new objects.\\n\\n## Setting up a Keycloak Instance\\n\\nBefore customizing the Django app, we need to set up and configure our Keycloak instance.\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Install and configure the Django OIDC library\\n\\nNow that we\'ve installed and configured Keycloak, we need to setup Django to replace the native authentication method provided by the framework. The first task is to install a library that is compatible with Keycloak\'s OIDC implementation.\\n\\nThe [mozilla-django-oidc](https://mozilla-django-oidc.readthedocs.io/) library provides an easy way to integrate Keycloak (or any OpenID Connect-compliant identity provider) with your Django app. It abstracts many of the complexities of integrating authentication and authorization. Here\'s how you can set it up:\\n\\n1. **Install the Package**:\\n   Install the `mozilla-django-oidc` package using pip:\\n\\n   ```bash\\n   pip install mozilla-django-oidc\\n   ```\\n\\n2. **Configure Django Settings**:\\n   Update your Django app\'s `settings.py` to include the necessary configurations for `mozilla-django-oidc`:\\n\\n   ```python\\n   INSTALLED_APPS = [\\n       # ...\\n       \'django.contrib.auth\',\\n       \'mozilla_django_oidc\',  # Load after django.contrib.auth\\n       # ...\\n   ]\\n\\n   AUTHENTICATION_BACKENDS = (\\n       \'mozilla_django_oidc.auth.OIDCAuthenticationBackend\',\\n       # ...\\n   )\\n\\n   OIDC_RP_CLIENT_ID = \'your-client-id\'\\n   OIDC_RP_CLIENT_SECRET = \'your-client-secret\'\\n   OIDC_OP_AUTHORIZATION_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/auth\'\\n   OIDC_OP_TOKEN_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/token\'\\n   OIDC_OP_USER_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/userinfo\'\\n   OIDC_OP_JWKS_ENDPOINT = \'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/certs\'\\n   OIDC_RP_SIGN_ALGO = \'RS256\'\\n\\n   LOGIN_URL = \'oidc_authentication_init\'\\n   LOGOUT_REDIRECT_URL = \'/\'\\n   LOGIN_REDIRECT_URL = \'/\'\\n   ```\\n\\n   Replace `your-client-id`, `your-client-secret`, and the Keycloak URLs with your actual Keycloak configurations.\\n\\n3. **Add URLs**:\\n   Update your Django app\'s `urls.py` to include the authentication URLs provided by `mozilla-django-oidc`:\\n\\n   ```python\\n   urlpatterns += [\\n       path(\'oidc/\', include(\'mozilla_django_oidc.urls\')),\\n   ]\\n   ```\\n\\n## Using it in your app\\n\\n### Protect your views\\n\\nUse Decorators for Access Control. You can now use the `@oidc_protected` decorator to protect views that require authentication and potentially specific roles:\\n\\n```python\\nfrom mozilla_django_oidc.decorators import oidc_protected\\n\\n@oidc_protected\\ndef protected_view(request):\\n    # Your view logic\\n```\\n\\n### Accessing user information\\n\\nYou can access user information after authentication using the `request.oidc_user` attribute. For example:\\n\\n```python\\ndef profile_view(request):\\n    user_info = request.oidc_user.userinfo\\n    # Access user_info[\'sub\'], user_info[\'email\'], etc.\\n    # Your view logic\\n```\\n\\nBy default, `mozilla-django-oidc` looks up a Django user matching the email field to the email address returned in the user info data from Keycloak.\\n\\nIf a user logs into your site and doesn\u2019t already have an account, by default, `mozilla-django-oidc` will create a new Django user account. It will create the User instance filling in the username (hash of the email address) and email fields.\\n\\n#### Use Username rather than Email\\n\\n`mozilla-django-oidc` defaults to setting up Django users using the email address as the user name from keycloak was required. Fortunately, `preferred_username` is set up by default in Keycloak as a claim. The claim can used by overriding the `OIDCAuthenticationBackend` class in `mozilla_django_oidc.auth` and referring to this in `AUTHENTICATION_BACKENDS` as below:\\n\\n```python\\n\\n# Classes to override default OIDCAuthenticationBackend (Keycloak authentication)\\nfrom mozilla_django_oidc.auth import OIDCAuthenticationBackend\\n\\nclass KeycloakOIDCAuthenticationBackend(OIDCAuthenticationBackend):\\n\\n def create_user(self, claims):\\n     \\"\\"\\" Overrides Authentication Backend so that Django users are\\n         created with the keycloak preferred_username.\\n         If nothing found matching the email, then try the username.\\n     \\"\\"\\"\\n     user = super(KeycloakOIDCAuthenticationBackend, self).create_user(claims)\\n     user.first_name = claims.get(\'given_name\', \'\')\\n     user.last_name = claims.get(\'family_name\', \'\')\\n     user.email = claims.get(\'email\')\\n     user.username = claims.get(\'preferred_username\')\\n     user.save()\\n     return user\\n\\n def filter_users_by_claims(self, claims):\\n     \\"\\"\\" Return all users matching the specified email.\\n         If nothing found matching the email, then try the username\\n     \\"\\"\\"\\n     email = claims.get(\'email\')\\n     preferred_username = claims.get(\'preferred_username\')\\n\\n     if not email:\\n         return self.UserModel.objects.none()\\n     users = self.UserModel.objects.filter(email__iexact=email)\\n\\n     if len(users) < 1:\\n         if not preferred_username:\\n             return self.UserModel.objects.none()\\n         users = self.UserModel.objects.filter(username__iexact=preferred_username)\\n     return users\\n\\n def update_user(self, user, claims):\\n     user.first_name = claims.get(\'given_name\', \'\')\\n     user.last_name = claims.get(\'family_name\', \'\')\\n     user.email = claims.get(\'email\')\\n     user.username = claims.get(\'preferred_username\')\\n     user.save()\\n     return user\\n```\\n\\nIn settings.py, overide the new library you have just added in AUTHENTICATION_BACKENDS :\\n\\n```python\\n # mozilla_django_oidc - Keycloak authentication\\n \\"fragalysis.auth.KeycloakOIDCAuthenticationBackend\\",\\n```\\n\\n### Logging out\\n\\nYou can use the `@oidc_logout` decorator to log the user out of both your app and Keycloak:\\n\\n```python\\nfrom mozilla_django_oidc.decorators import oidc_logout\\n\\n@oidc_logout\\ndef logout_view(request):\\n    # Your logout view logic\\n```\\n\\n## Add support for Django Rest Framework\\n\\nDjango Rest Framework (DRF) is a flexible toolkit built on top of Django, specifically designed for building RESTful APIs.\\n\\nIf you want DRF to authenticate users based on an OAuth access token provided in the Authorization header, you can use the DRF-specific authentication class which ships with the package.\\n\\nAdd this to your settings:\\n\\n```python\\nREST_FRAMEWORK = {\\n    \'DEFAULT_AUTHENTICATION_CLASSES\': [\\n        \'mozilla_django_oidc.contrib.drf.OIDCAuthentication\',\\n        \'rest_framework.authentication.SessionAuthentication\',\\n        # other authentication classes, if needed\\n    ],\\n}\\n```\\n\\nNote that this only takes care of authenticating against an access token, and provides no options to create or renew tokens.\\n\\nIf you\u2019ve created a custom Django OIDCAuthenticationBackend and added that to your AUTHENTICATION_BACKENDS, the DRF class should be smart enough to figure that out. Alternatively, you can manually set the OIDC backend to use:\\n\\n```python\\nOIDC_DRF_AUTH_BACKEND = \'mozilla_django_oidc.auth.OIDCAuthenticationBackend\'\\n```\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-nextjs","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs","source":"@site/blog/2023-08-14-secure-nextjs.mdx","title":"Securing Next.js Apps with Keycloak","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2023-08-14T00:00:00.000Z","formattedDate":"August 14, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"nextjs","permalink":"/blog/tags/nextjs"},{"label":"react","permalink":"/blog/tags/react"},{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.325,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-nextjs","title":"Securing Next.js Apps with Keycloak","author":"Phase Two","tags":["phase_two","tutorial","frameworks","nextjs","react","reactjs","authentication","authorization","sso"]},"prevItem":{"title":"Django Web Authentication with Keycloak","permalink":"/blog/secure-django"},"nextItem":{"title":"Instant User Management, SSO, and Secure Pages for ReactJS","permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation_client_auth.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [Next.js example](https://github.com/p2-inc/examples/tree/main/frameworks/nextjs). We also have a plain [React example](https://phasetwo.io/blog/instant-user-managemenet-and-sso-for-reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a Next.js Project\\n\\n:::info\\nWe will use the Phase Two Next.js example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\nThis example uses Next.js 13 and splits `server` and `client` components accordingly.\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the Next.js [folder](https://github.com/p2-inc/examples/tree/main/frameworks/nextjs) within `/frameworks/nextjs`.\\n1. Run `npm install` and then `npm run dev`. This example leverages [NextAuth.js](https://next-auth.js.org/) to provide hook and HOC support.\\n1. NextAuth.js configures an API route that is uses for the Authentication of the Client. It generates the routes automatically for you. These are added to Next.js in the `api/auth/[...nextauth]/route.ts` file.\\n1. Open the `src/lib/auth.ts` file. This is a server only file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code. While it is recommended to use Environment variables for the secret, for the purpose of this tutorial, paste in the **Client secret** from the OIDC client creation section for the value of `clientSecret`\\n\\n   ```js\\n   const authServerUrl = \\"https://euc1.auth.ac/auth/\\";\\n   const realm = \\"shared-deployment-001\\";\\n   const clientId = \\"reg-example-1\\";\\n   const clientSecret = \\"CLIENT_SECRET\\"; // Paste \\"Client secret\\" here. Use Environment variables in prod\\n   ```\\n\\n   Those are used to popluate the `AuthOptions` config for the `KeycloakProvider`:\\n\\n   ```js\\n   export const AuthOptions: NextAuthOptions = {\\n     providers: [\\n       KeycloakProvider({\\n         clientId,\\n         clientSecret,\\n         issuer: `${authServerUrl}realms/${realm}`,\\n       }),\\n     ],\\n   };\\n   ```\\n\\n   The config is then provided to the `AuthProvider` in the `/src/app/layout.tsx` file. Next.js uses this file to generate an HTML view for this page.\\n\\n   ```js\\n   import { NextAuthProvider as AuthProvider } from \\"./providers\\";\\n   ...\\n   <AuthProvider {...oidcConfig}>\\n     <App />\\n   </AuthProvider>\\n   ```\\n\\n   At this point our entire application will be able to access all information and methods needed to perform authentication. View the `providers.tsx` file for additional information about how the `SessionProvider` is used. The `SessionProvider` enables use of Hooks to derive the authenticated state. View `user.component.tsx` for exactly how the code is authenticating your user. The sections rendering the \\"Log in\\" and \\"Log out\\" buttons are conditional areas based on the authenticated context. The buttons invoke functions provided by NextAuth.\\n\\n   The logic using the hook to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n1. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be \\"Not authenticated\\". Click **Log In**. This will redirect you to your login page.\\n\\n   :::info\\n   Use the non-admin user created in the previous section to sign in.\\n   :::\\n\\n1. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your \\"Authenticated\\" state, displaying your user\'s email and their Token.\\n1. After your first log in, click **Log out**. Then click **Log in** again. Notice how this time you will not be redirected to sign in as your state is already in the browser. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"instant-user-managemenet-and-sso-for-reactjs","metadata":{"permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs","source":"@site/blog/2023-08-02-secure-reactjs.mdx","title":"Instant User Management, SSO, and Secure Pages for ReactJS","description":"In this article we\'ll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.","date":"2023-08-02T00:00:00.000Z","formattedDate":"August 2, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"frameworks","permalink":"/blog/tags/frameworks"},{"label":"reactjs","permalink":"/blog/tags/reactjs"},{"label":"react","permalink":"/blog/tags/react"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":2.545,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"instant-user-managemenet-and-sso-for-reactjs","title":"Instant User Management, SSO, and Secure Pages for ReactJS","author":"Phase Two","tags":["phase_two","tutorial","frameworks","reactjs","react","authentication","authorization","sso"]},"prevItem":{"title":"Securing Next.js Apps with Keycloak","permalink":"/blog/instant-user-managemenet-and-sso-for-nextjs"},"nextItem":{"title":"Launching Dedicated Clusters","permalink":"/blog/dedicated-launch"}},"content":"import PhaseTwoStarterInstructions from \\"/templates/blog/_phase_two_starter_instructions.mdx\\";\\nimport OIDC from \\"/templates/blog/_oidc_client_creation.mdx\\";\\nimport NonAdminUser from \\"/templates/blog/_add_nonadmin_user.mdx\\";\\n\\nIn this article we\'ll be using [Keycloak](https://www.keycloak.org/) to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n\\nIf you just want to skip to the code, visit the Phase Two [ReactJS example](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs).\\n\\n:::\\n\\n## Setting up a Keycloak Instance\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <PhaseTwoStarterInstructions />\\n</details>\\n\\n## Setting up an OIDC Client\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <OIDC />\\n</details>\\n\\n## Adding a Non-Admin User\\n\\n<details>\\n  <summary>Instructions</summary>\\n  <NonAdminUser />\\n</details>\\n\\n## Setting up a ReactJS Project\\n\\n:::info\\nWe will use the Phase Two ReactJS example code here, but the logic could easily be applied to any existing application.\\n:::\\n\\n1. Clone the Phase Two [example repo](https://github.com/p2-inc/examples/).\\n1. Open the ReactJS [folder](https://github.com/p2-inc/examples/tree/main/frameworks/reactjs) within `/frameworks/reactjs`.\\n1. Run `npm install` and then `npm start`. This example leverages [react-oidc-context](https://github.com/authts/react-oidc-context/tree/f175dcba6ab09871b027d6a2f2224a17712b67c5) (which uses [oidc-client-ts](https://github.com/authts/oidc-client-ts)) to provide hook and HOC support.\\n1. Open the `index.tsx` file. We will be updating a few values from the prior section where we set up our OIDC client. Taking the values from the OIDC Client Config section, set those values in the code.\\n\\n   ```js\\n   const authServerUrl = \\"https://euc1.auth.ac/auth/\\";\\n   const realm = \\"shared-deployment-001\\";\\n   const client = \\"reg-example-1\\";\\n   ```\\n\\n   Those are used to popluate the OIDC config\\n\\n   ```js\\n   const oidcConfig = {\\n     authority: `${authServerUrl}realms/${realm}`,\\n     client_id: client,\\n     redirect_uri: \\"http://localhost:3000/authenticated\\",\\n     onSigninCallback: (args: any) =>\\n       window.history.replaceState(\\n         {},\\n         document.title,\\n         window.location.pathname\\n       ),\\n   };\\n   ```\\n\\n   The config is then provided to the `AuthProvider`.\\n\\n   ```js\\n   <AuthProvider {...oidcConfig}>\\n     <App />\\n   </AuthProvider>\\n   ```\\n\\n   At this point our entire applicationw will be able to access all information and methods needed to perform authentication. View `Auth.tsx` for exactly how the code is authenticating your user. The sections rendering the \\"Log in\\" and \\"Log out\\" buttons are conditional areas based on the authenticated context.\\n\\n   The logic using the hook to conditionally determine the Authenticated state, can be used to secure routes, components, and more.\\n\\n1. Open [localhost:3000](http://localhost:3000). You will see the Phase Two example landing page. You current state should be \\"Not authenticated\\". Click **Log In**. This will redirect you to your login page.\\n\\n   :::info\\n   Use the non-admin user created in the previous section to sign in.\\n   :::\\n\\n1. Enter the credentials of the non-admin user you created. Click **Submit**. You will then be redirected to the application. The Phase Two example landing page now loads your \\"Authenticated\\" state, displaying your user\'s email and their Token.\\n1. After your first log in, click **Log out**. Then click **Log in** again. Notice how this time you will not be redirected to sign in as your state is already in the browser. Neat! If you clear the browser state for that tab, then you will have to be redirected away to sign-in again.\\n\\n## Learning more\\n\\nPhase Two\'s enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our [blog](https://phasetwo.io/blog) has many use cases from [customizing login pages](https://phasetwo.io/blog/customizing-login-pages), setting up [magic links](https://phasetwo.io/blog/set-up-magic-links) (password-less sign in), and [Organization](https://phasetwo.io/product/organizations) workflows."},{"id":"dedicated-launch","metadata":{"permalink":"/blog/dedicated-launch","source":"@site/blog/2023-07-10-dedicated-launch.md","title":"Launching Dedicated Clusters","description":"We\'re excited today to announce the launch of our dedicated clusters offering. Our Phase Two enhanced Keycloak distribution is now available as a hosted, dedicated cluster in the region of your choice.","date":"2023-07-10T00:00:00.000Z","formattedDate":"July 10, 2023","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":3.82,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"dedicated-launch","title":"Launching Dedicated Clusters","author":"Phase Two","tags":["release","keycloak","phase_two","cockroach"]},"prevItem":{"title":"Instant User Management, SSO, and Secure Pages for ReactJS","permalink":"/blog/instant-user-managemenet-and-sso-for-reactjs"},"nextItem":{"title":"How To Customize Login Pages","permalink":"/blog/customizing-login-pages"}},"content":"We\'re excited today to announce the launch of our dedicated clusters offering. Our Phase Two enhanced Keycloak distribution is now available as a hosted, dedicated cluster in the region of your choice.\\n\\nAbout 9 months ago, we launched our self-service, shared deployments, offering customers the ability to [create](https://phasetwo.io/dashboard/) Phase Two enhanced Keycloak realms on our shared clusters. Over that period, we\'ve provided over 700 free realms for testing and small production use cases. Many of you have reached out to us asking about an SLA, isolated resources, and ability to grow into larger use cases. Based on your requests and feedback, we built out our dedicated cluster offering.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is Phase Two again?\\n\\nPhase Two helps SaaS builders accelerate time-to-market and enterprise adoption with powerful SSO, identity and user management features. To that end, Phase Two has created an enhanced distribution of [Keycloak](https://www.keycloak.org/) that bundles several essential [open source extensions](https://github.com/p2-inc) for modern SaaS use cases. We support hosted and on-prem customers for a variety of use cases.\\n\\n### Why dedicated?\\n\\nDedicated clusters allow us to provide compute, network and storage isolation for customer workloads, and to easily deploy in the region where customer\'s users are. With dedicated clusters, we can guarantee an [SLA](/docs/sla) that meets customer\'s needs with no resource contention from other customers.\\n\\nFurthermore, it allows us to support customer-provided domain names, and access to monitoring and management capabilities not available in the shared clusters.\\n\\n### How did you do it?\\n\\nWe built out our dedicated cluster offering using the best-of-breed open source tools and managed services.\\n\\nThe core consists of Kubernetes clusters in each [supported AWS and GCP region](/docs/self-service/dedicated-clusters#regions). New dedicated clusters are provisioned instantly using FluxCD, a continuous delivery solution that gives us the history and auditability of git. Monitoring and alerting is done using Prometheus, Grafana, and a suite of external services that give us a complete view of cluster health.\\n\\nThe database tier uses a managed CockroachDB service provided by [Cockroach Labs](https://www.cockroachlabs.com/). Phase Two is the only provider that is capable of hosting the current Keycloak distribution (the \\"legacy\\" store) using CockroachDB. Working with Cockroach Labs gives us the expertise and reliability from hosting thousands of customer clusters at massive scale.\\n\\n### Take me to it!\\n\\nStarting today, you\'ll be able to [log into the updated dashboard](https://phasetwo.io/dashboard), and create your dedicated cluster by selecting a region and setting up your billing information.\\n\\n![Keycloak Phase Two Self-Host Cluster Creation](/docs/dedicated-clusters-create.png)\\n\\nFollowing successful billing setup, you will be returned to the Dashboard while your Cluster is provisioned. Once provisioned, you\'ll be able to create up to 20 realms per cluster, using the same easy setup as you are used to in the shared deployment offering.\\n\\n![Keycloak Phase Two Self-Host Cluster Creation Status](/docs/dedicated-clusters-pending.png)\\n\\nMost clusters will be provisioned within 30 minutes, but some requests may take up to 24 hours. Additionally, for payment types such as ACH or SEPA, cluster provisioning will begin following payment clearing (up to 4 days in some cases).\\n\\n### How much does it cost?\\n\\n[Plans](/#pricing) start at $499US per month when paid annually. This provides a set of compute, network and storage resources that have been tested for common use cases for up to 20 realms and 1 million users. If your use case is uncommon or you plan to scale beyond that, our system is designed to scale up with your needs. Our plans scale linearly with resource demands beyond our minimums.\\n\\nWe will continue to support a robust Free tier.\\n\\n### What\'s next? (psst... Global clusters)\\n\\nMany of our on-prem, suppport customers with large use cases asked us to build out a solution for massive-scale, fault-tolerant, multi-region use cases. One of the great parts of building support for Keycloak\'s existing storage system for CockroacDB is that we\'ve been able to explore use cases that were previously impossible using the standard Keycloak distribution, or required complex, error-prone configurations. For use cases with these requirements, plus global proximity to users and regional failover, we built global clusters, backed by CockroachDB multi-region database, for which we are now in _beta_.\\n\\nThese clusters provide a minimum of 3 global regions, with 3 instances of Phase Two enhanced Keycloak per region. Global server load balancing provides geographic region affinity and failover to connect your users with the closest, available instances.\\n\\nThere will be two price tiers for global clusters, depending on your use of our shared CockroachDB clusters, or your own dedicated clusters. We expect to launch general availability of global clusters later in Q3 2023.\\n\\nPlease contact [sales@phasetwo.io](mailto:sales@phasetwo.io) to talk to us about your global cluster use case."},{"id":"customizing-login-pages","metadata":{"permalink":"/blog/customizing-login-pages","source":"@site/blog/2023-04-21-customizing-login-pages.md","title":"How To Customize Login Pages","description":"Brand is important to modern SaaS companies, and nowhere is that more apparent than at the front door: the login experience. Unfortunately, the default design of the Keycloak login experience has a \\"face only a mother could love\\".","date":"2023-04-21T00:00:00.000Z","formattedDate":"April 21, 2023","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"themes","permalink":"/blog/tags/themes"},{"label":"login","permalink":"/blog/tags/login"},{"label":"keycloak","permalink":"/blog/tags/keycloak"}],"readingTime":2.515,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"customizing-login-pages","title":"How To Customize Login Pages","author":"Phase Two","tags":["phase_two","themes","login","keycloak"]},"prevItem":{"title":"Launching Dedicated Clusters","permalink":"/blog/dedicated-launch"},"nextItem":{"title":"We\'re Changing Our License","permalink":"/blog/licensing-change"}},"content":"Brand is important to modern SaaS companies, and nowhere is that more apparent than at the front door: the login experience. Unfortunately, the default design of the Keycloak login experience has a \\"face only a mother could love\\".\\n\\nIn order to allow customers to customize that experience, we\'ve extended the default Keycloak theming functionality to allow you to easily customize the login pages from the admin console. This eliminates the need to package and deploy a custom theme, and allows fast iteration without restart.\\n\\n\x3c!--truncate--\x3e\\n\\n## Simple customization\\n\\nIf you\'re in a hurry, logo and color customization can be achieved by adding your logo\'s URL and three color choices. These are available in the _General_ and _Login_ tabs of the **Styles** section.\\n\\n![Keycloak Phase Two Login Page Customization Logo URL](/blog/2023-04-21-styles-general.png)\\n\\n![Keycloak Phase Two Login Page Customization Styles Configuration](/blog/2023-04-21-styles-login.png)\\n\\nIn order for these setting to take effect, your **Realm Settings** _Themes_ must also be set to `Attributes` for the _Login theme_ type\\n\\n![Keycloak Phase Two Login Page Theme Setting](/blog/2023-04-21-theme-attributes.png)\\n\\n## Full customization using CSS\\n\\nMany of you will have more stringent branding requirements. For this, you can override the styles of the default Keycloak login theme. To discover the base styles that are available using this theme, we recommend\\n\\nNote that using CSS overrides will cause the colors from simple customization not to work.\\n\\nIn order to load your CSS, paste it into the \\"CSS\\" field in the _Login_ tab of the **Styles** section.\\n\\n![Keycloak Phase Two Login Page Custom CSS](/blog/2023-04-21-styles-css.png)\\n\\nThis CSS will be the last CSS loaded, overridding the styles in the default `keycloak` login theme.\\n\\nReferences:\\n\\n- [Keycloak login CSS](https://github.com/keycloak/keycloak/blob/main/themes/src/main/resources/theme/keycloak/login/resources/css/login.css) - The default CSS for the `keycloak` login theme.\\n- [Patternfly 4](https://www.patternfly.org/v4/) - The styling library used by the theme.\\n\\n### CSS Examples\\n\\nTo get you started with some ideas, we\'ve created 3 example login themes that were done by overridding the CSS. These are free of license restriction, so feel free to download, use and customize the CSS at the links with the example images.\\n\\n- Consumer - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/consumer/login.css)\\n  ![Keycloak Phase Two Login Page Consumer Theme](/blog/2023-04-21-consumer-theme.png)\\n\\n- Enterprise - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/enterprise/login.css)\\n  ![Keycloak Phase Two Login Page Enterprise Theme](/blog/2023-04-21-enterprise-theme.png)\\n\\n- SaaS - [CSS](https://github.com/p2-inc/keycloak-themes/blob/main/examples/saas/login.css)\\n  ![Keycloak Phase Two Login Page SaaS Theme](/blog/2023-04-21-saas-theme.png)\\n\\n#### Images and other assets\\n\\nYou\'ll notice that images, icons and fonts not found in the standard Keycloak themes are used. These are referenced by URL in the CSS. For example, if you are used to loading a custom font in the `<head>` of your HTML, it is possible to do it in CSS using `@import`:\\n\\n```css\\n@import url(\\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Lexend+Deca:wght@300;400;500;600;700&family=Lexend:wght@300;400;500;600;700&family=Work+Sans:wght@300;400;500;600;700&display=swap\\");\\n```\\n\\nAnd background and other images can be referenced by their full URL using `url(...)`:\\n\\n```css\\n.login-pf body {\\n  background-image: url(\\"https://raw.githubusercontent.com/p2-inc/keycloak-themes/main/examples/saas/assets/SaaS%20BG.webp\\");\\n}\\n```\\n\\n## Success!\\n\\nAs always, our success is based on the success of our customers. We hope this extension and guide has helped you update the default Keycloak login branding to match that of your needs. If you have suggestions for further improvement of this feature, please reach out on GitHub!"},{"id":"licensing-change","metadata":{"permalink":"/blog/licensing-change","source":"@site/blog/2023-01-28-licensing-change.md","title":"We\'re Changing Our License","description":"tl;dr","date":"2023-01-28T00:00:00.000Z","formattedDate":"January 28, 2023","tags":[{"label":"oss","permalink":"/blog/tags/oss"},{"label":"license","permalink":"/blog/tags/license"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.355,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"licensing-change","title":"We\'re Changing Our License","author":"Phase Two","tags":["oss","license","phase_two"]},"prevItem":{"title":"How To Customize Login Pages","permalink":"/blog/customizing-login-pages"},"nextItem":{"title":"Setting up SSO with Phase Two","permalink":"/blog/sso-setup"}},"content":"### tl;dr\\n\\nWe\u2019ve changed the license of our [core extensions](/docs/introduction/open-source#components-and-repos) from the [AGPL v3](https://www.gnu.org/licenses/agpl-3.0.en.html) to the [Elastic License v2](https://github.com/elastic/elasticsearch/blob/main/licenses/ELASTIC-LICENSE-2.0.txt). We wanted to share why we made this change and what it means for our customers and community.\\n\\n\x3c!--truncate--\x3e\\n\\n### Why?\\n\\nFrom our earliest stages, Phase Two has been built as a set of extensions to [Keycloak](https://keycloak.org). We have made a commitment that source code for our core exetensions will always be available so that our customers can migrate to their own deployment, while maintaining the extension functionality provided by Phase Two.\\n\\nAs our product matured and found a market fit, it became clear to us that our current license was failing to give our customers that guarantee, and failing to give our company the protection to ensure we could build a business and continue to invest in our extensions.\\n\\nWe\'ve had some very deep conversations with customers and contributors about the future of licensing, and learned a lot about what other companies in our shoes have done. We truly appreciate all of the engagement and feedback, and have done our best to make a decision that is in the best interest of our company, customers and community.\\n\\n### What\'s allowed?\\n\\n1. Hosting and using the extensions by companies as part of their own product.\\n2. Derivative works that maintain the same license.\\n\\n### What\'s prohibited?\\n\\n1. Providing the extensions as a hosted or managed service. This includes bundling and distribution by companies who sell their products for on-prem and private cloud use.\\n\\nWe believe that the Elastic License strikes a great balance, and we\'re excited for our next phase of growth!"},{"id":"sso-setup","metadata":{"permalink":"/blog/sso-setup","source":"@site/blog/2022-11-23-sso-setup.md","title":"Setting up SSO with Phase Two","description":"We\'ve received a lot of support requests about the right way to set up SSO connections. We\'ve published a 5 minute video showing you how to do it easily. Also, the script is included below in case you miss anything!","date":"2022-11-23T00:00:00.000Z","formattedDate":"November 23, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"sso","permalink":"/blog/tags/sso"}],"readingTime":3.24,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"sso-setup","title":"Setting up SSO with Phase Two","author":"Phase Two","tags":["tutorial","keycloak","phase_two","sso"]},"prevItem":{"title":"We\'re Changing Our License","permalink":"/blog/licensing-change"},"nextItem":{"title":"Protecting Your Application With Keycloak","permalink":"/blog/securing-apps-with-keycloak"}},"content":"We\'ve received a lot of support requests about the right way to set up SSO connections. We\'ve published a 5 minute video showing you how to do it easily. Also, the script is included below in case you miss anything!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/wAeT07JGhOI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\x3c!--truncate--\x3e\\n\\n### Script\\n\\nDevelopers have been asking for concise setup instructions for SSO. You\u2019re here for our enterprise SSO functionality. We hear you. Here\u2019s a quick live setup to show you how easy it is.\\n\\nI\u2019m assuming you have already created a self-serve deployment.\\n\\n- Start by opening the console.\\n- Navigate to the **Organizations** tab.\\n- Create a new organization. In this case, set a domain when creating an organization that corresponds to the email domains you want to match to their SSO provider.\\n- Create a **Portal Link** by selecting it from the action menu of the organization. This is usually meant to be sent to the organization administrator, but in this case, we\u2019ll open this link in an incognito window and configure the identity provider ourselves.\\n\\nWe\u2019ll use the identity provider wizard to setup a SSO connection to Azure AD. I\u2019ve sped this up a bit, but you\u2019ll get an idea of what is happening. Depending on your setup and target identity provider, this will be different.\\n\\nNow let\u2019s secure an application and use our new SSO connection to log in. For this purpose, we\u2019ve got a debugging application on Github you can use to quickly see how a front end application is secured and what data is shared between Phase Two and the application.\\n\\n- Clone our [debug-app](https://github.com/p2-inc/debug-app) from github, and open up the `frontend` folder in your favorite editor or IDE.\\n- Go back to the admin console and navigate to the **Clients** tab. Create a new client. Let\u2019s call it `frontend`. This will be a public OIDC client, with localhost:3001 as the root and redirect uri.\\n- Get the `keycloak.json` from the configuration and copy it. Paste it into `keycloak.json` to configure your `debug-app`.\\n\\nBefore we continue, we need to configure an authentication flow that does our SSO redirect.\\n\\n- Navigate to the **Authentication** tab, and duplicate the **Browser** flow.\\n- Add the **Home IdP Discovery** authenticator and move it into the position before the user forms. Configure it to not require a verified domain nor email.\\n- Finally, using the action menu, bind it to the browser flow.\\n\\nGo back to the `debug-app`, and let\u2019s try a login using an email domain that matches the one we configured.\\n\\n- First, run `npm i` and `npm start` to start the debug app, and navigate to http://localhost:3001 in your browser. See that it redirects to the default login.\\n- Enter the email address in the new email only form.\\n- We are redirected to the Azure identity provider we set up.\\n- Log in to Azure, and then we are redirected to back to `debug-app`.\\n- Let\u2019s take a look at the token and see the data that came over from Azure.\\n\\nAs a bonus, let\u2019s map some information about the user\u2019s organization memberships into the token in case we need to do something with that information in our application.\\n\\n- Go back to the Admin UI and navigate to the Client we created.\\n- Select the **frontend-dedicated** client scope.\\n- Add a mapper by configuration.\\n- Select the **Organization Role** mapper and configure it as shown.\\n- Save the configuration.\\n\\nNow let\u2019s go back to the `debug-app` and reload.\\n\\n- Take a look at the token. It now contains information about the organization we created.\\n- The user was automatically created and added as a member to the organization when we logged in through the Azure identity provider.\\n\\nYou now have a fully working authentication and enterprise SSO setup for your application. It took about 5 minutes!"},{"id":"securing-apps-with-keycloak","metadata":{"permalink":"/blog/securing-apps-with-keycloak","source":"@site/blog/2022-10-17-securing-apps-with-keycloak.md","title":"Protecting Your Application With Keycloak","description":"There are a lot of guides out there, official and unofficial, for how to secure applications with Keycloak. The subject is rather broad, so it\'s difficult to know where to start. To begin, we\'ll be focusing on Keycloak\'s use of OpenID Connect (OIDC), and how to use that standard, along with some helpful libraries, to secure a simple but instructive application.","date":"2022-10-17T00:00:00.000Z","formattedDate":"October 17, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"sso","permalink":"/blog/tags/sso"},{"label":"authentication","permalink":"/blog/tags/authentication"},{"label":"authorization","permalink":"/blog/tags/authorization"}],"readingTime":5.94,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"securing-apps-with-keycloak","title":"Protecting Your Application With Keycloak","author":"Phase Two","tags":["tutorial","keycloak","phase_two","sso","authentication","authorization"]},"prevItem":{"title":"Setting up SSO with Phase Two","permalink":"/blog/sso-setup"},"nextItem":{"title":"Magic Links Guide, and 5 Minute Setup","permalink":"/blog/set-up-magic-links"}},"content":"There are a lot of guides out there, official and unofficial, for how to secure applications with Keycloak. The subject is rather broad, so it\'s difficult to know where to start. To begin, we\'ll be focusing on Keycloak\'s use of OpenID Connect (OIDC), and how to use that standard, along with some helpful libraries, to secure a simple but instructive application.\\n\\nFor the purposes of the sample, we\'ll actually be using two common applications, a frontend single-page application (SPA) written in JavaScript, and a backend REST API written for Node.js. The language we selected for the sample is JavaScript, but the principles apply no matter the implementation technology you choose.\\n\\n\x3c!--truncate--\x3e\\n\\n### What is OIDC?\\n\\nWhen learning about identity and access management technologies, you\'ll be confronted with an alphabet-soup of acronyms to learn. OIDC, or OpenID Connect is one of the most important ones for securing applications, be it browser-based, APIs, mobile or native. Our friend over at OneLogin does a great job of explaining [OIDC in plain english](https://www.onelogin.com/blog/openid-connect-explained-in-plain-english-2) for those that are curious.\\n\\nFor the purpose of this guide, it is sufficient to know that OIDC is an open authentication protocol that works on top of the OAuth 2.0 framework. OIDC allows individuals to use single sign-on (SSO) to access relying party sites using OpenID Providers (OPs), such as an email provider or social network, to authenticate their identities. It provides the application or service with information about the user, the context of their authentication, and access to their profile information.\\n\\n### Login flow\\n\\nA \\"flow\\" in OIDC terms is a mechanism of authenticating a user, and obtaning access tokens. The flow we\'ll be using in this guide is called the authorization code flow. Fortunately, the internals of the flow are not necessary to understand, as Keycloak handles the details for you.\\n\\nHowever, it is useful to see what is going on in the login process, so that you understand your user\'s experience.\\n\\n![Keycloak Authentication Flow Diagram](/blog/2022-10-17-authentication-flow.png)\\n\\n### Setup\\n\\nWe\'ll make an assumption for this guide that you are using a cloud deployment of Phase Two enhanced Keycloak. If you haven\'t already set one up, go over to the [self-service launch announcement](/blog/self-service) for details. You may also use your own Keycloak setup, but that setup is beyond the scope of this article.\\n\\nThe sample applications are available in our [demo repo](https://github.com/p2-inc/debug-app) on Github. Clone that repo to your local machine. You\'ll find the applications in the `frontend` and `backend` directory, and a set of supporting files for configuration and deployment.\\n\\n```\\ngit clone https://github.com/p2-inc/debug-app.git\\ncd debug-app\\n```\\n\\n### Client\\n\\nEvery application that Keycloak protects is considered a **Client**. Log into your Keycloak realm, and click on **Clients** in the left navigation, and click _Create client_.\\n\\n1. Enter `frontend` as the **Client ID** and click _Next_\\n2. In the **Capability config** screen, keep the defaults and click _Save_\\n3. In the **Access settings** screen, enter the following values:\\n   1. `http://localhost:3001/*` for **Valid redirect URIs**\\n   2. `+` in **Valid post logout redirect URIs**\\n   3. `+` in **Web origins**\\n4. Click _Save_\\n5. In the upper right corner, open the **Action** menu and select **Download adapter config**. Click _Download_ and move the file to the `debug-app` repo you cloned under the `frontend` folder.\\n\\n![Keycloak Client Details Setup Example](/blog/2022-10-17-client-setup.png)\\n\\n### Make a user\\n\\nBefore we run the application, we need to create a user to log in. Click on **Users** in the left navigation, and click _Add user_. You only need to give the user a username and click _Create_. Find the **Credentials** tab and click **Set password** to give the user a password.\\n\\n### Running the sample apps\\n\\nOpen two terminal windows and go to the directory of the repo you cloned in both. To start, run the following commands in each terminal:\\n\\nFrontend:\\n\\n```\\ncd frontend/\\nnpm install\\nnpm start\\n```\\n\\nBackend:\\n\\n```\\ncd backend/\\nnpm install\\nKC_REALM=<your-realm-name> KC_URL=<your-keycloak-url> npm start\\n```\\n\\nBe sure to replace the realm name, and the URL of your Keycloak installation (e.g. `https://usw2.auth.ac/auth/`).\\n\\nThis will install the necessary components using npm, and will start the servers for both applications. Note: the applications use ports 3001 and 3002 by default. If you have other applications running on these ports, you may have to temporarily shut them down.\\n\\n### Putting it all together\\n\\nLoad <a href=\\"http://localhost:3001/\\" target=\\"_blank\\">http://localhost:3001/</a> in your browser. This will load the frontend application, which will be immediately redirected to the Keycloak login page. Log in with the user you created.\\n\\nOnce you log in, you\'ll see your profile, and several menu items. First click to the **Access token** menu item. You\'ll see the information from the parsed access token that was returned by Keycloak. This contains information about the user, but also claims related to the users roles and groups. This is because access tokens are meant to be read and validated by resource servers (i.e. our backend service).\\n\\nNext, click **ID token**. You\'ll see similar information to what we saw in the access token, but limited to a standardized set of information that identifies the authentication state of the user. ID tokens are not meant for calling resource servers, and because of that, don\'t contain claims that are meant to be validated by backend services.\\n\\nClicking **Service** will call the backend service. You\'ll see a message that indicates the frontend called the backend, passing the access token, and was authorized to access a secured service.\\n\\nYou can also try the built-in Keycloak Account Management console by clicking **Account**, which gives the user a simple way to manage their information that is stored in Keycloak. It is not necessary to use this with your applications, as you may choose to build it in to your app. However, it\'s a good tool to have out of the box.\\n\\nFinally, clicking **Logout** will take you back to the login page. This is actually sending you to the frontend\'s initial page, which is redirecting you to the login page as its default behavior.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Wi9qipIDi4w\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n### What just happened?\\n\\nThere\'s a lot that goes into implementation of the OIDC flow we used to secure our sample applications. Part of the reason to use Keycloak is the mature implementation and client libraries that make protecting applications in a secure way almost trivial.\\n\\nWe encourage you to look at the source in the sample applications (specifically `frontend/app.js` and `backend/app.js`) and observe how the Keycloak client libraries are used to secure these applications. This will be a good place to start when you are working on securing your own applications.\\n\\n### Your application\\n\\nAnother incredible advantage to using standards like OIDC is that you are not constrained to using Keycloak libraries. Because your applications may not be written in JavaScript also, it\'s easy to use other language OIDC client libraries. We maintain a [list of OIDC libraries](/docs/securing-applications/#libraries), and the [OpenID Foundation](https://openid.net/) also maintains lists of [certified](https://openid.net/developers/certified/) and [uncertified](https://openid.net/developers/uncertified/) implementations\\n\\nToday you saw how to quickly secure an application using Keycloak, and learned more about the underlying OIDC standards. We look forward to seeing what you build!"},{"id":"set-up-magic-links","metadata":{"permalink":"/blog/set-up-magic-links","source":"@site/blog/2022-10-12-set-up-magic-links.md","title":"Magic Links Guide, and 5 Minute Setup","description":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer password-less authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.","date":"2022-10-12T00:00:00.000Z","formattedDate":"October 12, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"magic_links","permalink":"/blog/tags/magic-links"}],"readingTime":5.515,"hasTruncateMarker":true,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"set-up-magic-links","title":"Magic Links Guide, and 5 Minute Setup","author":"Phase Two","tags":["tutorial","keycloak","phase_two","magic_links"]},"prevItem":{"title":"Protecting Your Application With Keycloak","permalink":"/blog/securing-apps-with-keycloak"},"nextItem":{"title":"Set Up Email in Phase Two","permalink":"/blog/set-up-email"}},"content":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer password-less authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.\\n\\nBut you are here because you want to find a way to implement magic links quickly. First, some background.\\n\\n\x3c!--truncate--\x3e\\n\\n### What are magic links?\\n\\nMagic links are a type of password-less authentication that allow your users to log in to your application following a link that is emailed to them, rather than typing a username and password. Magic links can also be used as a part of a multi-factor authentication (MFA) strategy.\\n\\nIn a magic link flow, the application\'s authentication provider asks users for an email address rather than a password. The authentication provider generates a link with an embedded token, and sends to the user\'s email. There may be some other steps taken by the provider, such as verifying the provided email address matches an existing user. The user then opens the email, clicks the link, is verified by the authentication provider, and is granted access to the application\\n\\n![Keycloak Phase Two Magic Link Extension Flow Diagram](/blog/2022-10-12-set-up-magic-links-flow.png)\\n\\n### Pros and cons\\n\\nLike any mechanism that tries to streamline a security process such as authentication, there are both pros and cons to the magic link approach. First in the plus column:\\n\\n- Enhances user experience, which makes users more likely to use your application, and be satisfied with the experience. This drives user engagement.\\n- User onboarding is accelerated, as magic links can be sent to new users as well as existing ones. Registration for your application is as easy as entering your email address.\\n- You\'ll never have a password breach. When there are no passwords, there are no password breaches. A huge number of corporate data breaches are due to insufficient and compromised passwords.\\n- No more customer support requests related to lost passwords. Over half of customer support requests are due to authentication problems, many of those are users unable to remember their passwords. This eliminates a huge portion of those.\\n\\nNothing is perfect, and there are also several potential downsides to magic links:\\n\\n- Account security and access are now tied to the security of the user\'s email account. If the user\'s computer or other device is compromised, and attacker could potentially obtain the link and impersonate the user.\\n- If the user or email provider does not enforce encrypted network access to email, it may be possible for an attacker to perform a man-in-the-middle attack where they can obtain the link by observing network traffic.\\n- Ability to access your application is now tied to email deliverability. If your email service or the user\'s email provider fails to deliver the email containing the link in a timely fashion, it could deteriorate the experience for the user.\\n\\n### Limiting risk\\n\\nFortunately, there are things your application and the user can do in order to limit some of the possible downside risks of using magic links. Your application can:\\n\\n- Make the magic links single use, or set a very short expiration time for the links.\\n- Enforce an additional factor when using magic links.\\n\\nYour user can:\\n\\n- Choose an email provider that enforces the use of encrypted connections.\\n- Use multi-factor authentication (MFA) mechanisms to further protect their email accounts.\\n\\n### Setup guide\\n\\nSorry for the wait! We wanted to give you an overview of magic links before diving into how to set them up with Phase Two.\\n\\nIf you haven\'t already, get an account on [Phase Two](https://phasetwo.io/dashboard). You\'ll notice that we use magic links in addition to social login options. As we said above, we\'re trying to make it as frictionless as possible to get in and start using the product.\\n\\nOnce you log in and create your first deployment, open the Phase Two enhanced Keycloak console. In order to email links to your users, you\'ll need to set up email. If you haven\'t already done that, head over to our [email setup guide](/blog/2022-10-05-set-up-email.md).\\n\\nAfter you\'ve completed email setup, select the **Authentication** menu item, and then select the **Magic link** flow from the list.\\n\\n![Keycloak Phase Two Magic Link Authentication Page Flow Name](/blog/2022-10-12-set-up-magic-links-magiclinkauth.png)\\n\\nOpen the configuration for the **Magic Link Authenticator** by clicking the gear icon on the last line with the **Magic Link** execution. You\'ll notice two options:\\n\\n- **Force create user** creates a new user when an email is provided that does not match an existing user. This allows the use of magic links to register new users that have not been previously seen.\\n- **Update profile on create** adds an UPDATE_PROFILE required action if the user was created. This means that the user will need to fill out other required fields such as first/last name, etc.\\n\\nFor the purpose of our demonstration, let\'s set **Force create user** to ON and **Update profile on create** to OFF (remember, low friction). Save the configuration, and go back to the flow page.\\n\\nIn the **Action** menu of the flow page, select **Bind**, and select **Browser flow**.\\n\\n![Keycloak Phase Two Magic Link Bind Flow](/blog/2022-10-12-set-up-magic-links-bind.png)\\n\\nNow you\'re ready to test it out. If you don\'t have an application that is setup and protected by Keycloak, you can use the built-in account console to try it out. Navigate to the **Clients** menu, and open the link next to the **account** client in an incognito window (this will prevent conflict, as you are already logged in to the admin console as the administrator).\\n\\nClick **Sign In** and you\'ll be redirected to the authentication page. Enter your email address, and you\'ll be sent a magic link. Click on the link in your email, and you\'ll see your details in the account console.\\n\\n![Keycloak Phase Two Magic Link Login Page](/blog/2022-10-12-set-up-magic-links-login.png)\\n![Keycloak Phase Two Magic Link Confirm Page](/blog/2022-10-12-set-up-magic-links-confirm.png)\\n\\nGo back to the admin console in the other browser window, and navigate to the **Users** section. You will be able to find the user that was just created.\\n\\n![Keycloak Phase Two Magic Link Admin User View](/blog/2022-10-12-set-up-magic-links-admin-user.png)\\n\\nMagic links are a great way to streamline your user onboarding and experience to help you easily drive engagement across your application. Phase Two makes it quick and easy to integrate magic links (and social login, and enterprise SSO, and much more). Stay tuned for more guides that will help you build the authentication experience that is right for your app."},{"id":"set-up-email","metadata":{"permalink":"/blog/set-up-email","source":"@site/blog/2022-10-05-set-up-email.md","title":"Set Up Email in Phase Two","description":"One of the first things you will need to do when getting a Keycloak Realm ready for use is to set up your email server configuration. There are many system emails that are sent to users in the course of verifying and updating user accounts: Email address verification, magic links, password reset, account update, login failure notifications, identity provider linking, etc.","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"email","permalink":"/blog/tags/email"}],"readingTime":2.505,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"set-up-email","title":"Set Up Email in Phase Two","author":"Phase Two","tags":["tutorial","keycloak","phase_two","email"]},"prevItem":{"title":"Magic Links Guide, and 5 Minute Setup","permalink":"/blog/set-up-magic-links"},"nextItem":{"title":"Self-service (beta) Launch","permalink":"/blog/self-service"}},"content":"One of the first things you will need to do when getting a Keycloak Realm ready for use is to set up your email server configuration. There are many system emails that are sent to users in the course of verifying and updating user accounts: Email address verification, magic links, password reset, account update, login failure notifications, identity provider linking, etc.\\n\\nIn order to provide your users with a positive experience, these messages need a way to get to them. Keycloak supports any internet reachable SMTP server. If you are currently testing, and don\'t have an email server or service that you currently use, [SendGrid](https://sendgrid.com/) provides free accounts that allow you to send up to 100 emails per day forever. For debugging, you can also use a service like [MailTrap](https://mailtrap.io/) to give you a catch-all for emails coming from Keycloak.\\n\\nIf you are using a Phase Two Deployment, log in to the self-service dashboard, and click on the **Open Console** link for the Deployment you wish to use. Once in the Keycloak admin console, click **Realm settings** in the left menu, and then click the **Email** tab.\\n\\n![Keycloak Email Configuration](/blog/2022-10-05-set-up-email-template.png)\\n\\nIn the first section, labeled **Template**, you will set options that will be used in the templates for the emails that are sent to your users. The only required field is the **From** field, which must contain the email address the user will see the email originating from. This should be an email address that your email server is expecting, and it will not block for authorization reasons.\\n\\nThe other fields in the **Template** section are not required, but will enhance how your emails look:\\n\\n- **From** address used to send emails (required)\\n- **From display name** a user-friendly name displayed along **From**\\n- **Reply to** an email address that will be used by email clients when your user replies to an email\\n- **Reply to display name** a user-friendly name displayed along **Reply to**\\n- **Envelope from** Bounce Address used for the mails that are rejected\\n\\n![Keycloak Email Server Connection and Authentication](/blog/2022-10-05-set-up-email-connection.png)\\n\\nIn the **Connection & Authentication** section, you will provide details of your SMTP server:\\n\\n- **Host** indicates the SMTP server hostname used for sending emails\\n- **Port** indicates the SMTP server port (usually 25, 465, 587, or 2525)\\n- **Encryption** support encryption for communication with your SMTP server\\n- **Authentication** if your SMTP server requires authentication, and supply the **Username** and **Password**\\n\\n![Keycloak email setup buttons](/blog/2022-10-05-set-up-email-buttons.png)\\n\\nFinally, before you click **Save**, click the **Test connection** button to send a test email to the email address of the currently logged in user. If you don\'t have that set, you might have click **Save** and edit your user before you come back. You\'ll receive a success message, or information that will help you resolve problems.\\n\\nOnce you do that, you\'ll have accomplished a significant task which enables lots of other functionality!\\n\\nAlso, stay tuned for another post on how to customize your email templates to match your branding and messaging."},{"id":"self-service","metadata":{"permalink":"/blog/self-service","source":"@site/blog/2022-09-16-self-service.md","title":"Self-service (beta) Launch","description":"We\'ve been pretty quiet over the summer. Since we released the Organizations and Magic Link extensions and open sourced them, there has been a lot of interest in using Phase Two.","date":"2022-09-16T00:00:00.000Z","formattedDate":"September 16, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":1.16,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"self-service","title":"Self-service (beta) Launch","author":"Phase Two","tags":["release","keycloak","phase_two","cockroach"]},"prevItem":{"title":"Set Up Email in Phase Two","permalink":"/blog/set-up-email"},"nextItem":{"title":"Magic Links","permalink":"/blog/magic-link"}},"content":"We\'ve been pretty quiet over the summer. Since we released the [Organizations](https://github.com/p2-inc/keycloak-orgs) and [Magic Link](https://github.com/p2-inc/keycloak-magic-link) extensions and open sourced them, there has been a lot of interest in using Phase Two.\\n\\nWe were flattered by the inbound interest, but our small team wasn\'t able to keep up with demand for trial accounts. Rather than scramble against that demand, we opted to pause new accounts, and instead build a self-service tool to allow anyone to quickly provision a new deployment a try it out.\\n\\nToday we\'re announcing the beta launch of the Phase Two Self-service deployment tool. This tool allows you to easily create new deployments of the Phase Two enhanced version of Keycloak in our secure, highly-available clusters. In the future, it will also allow you to deploy dedicated instances that use your own database.\\n\\nTake a look at how easy it is to get started:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/zzJPmwrEHmU\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nThe clusters that run our deployments are available in two regions (AWS, us-west-2 and eu-central-1), and are backed by [CockroachDB](https://www.cockroachlabs.com/), giving you scale, resilience and low-latency performance. In the future, clusters and dedicated instances will be available in other regions based on demand.\\n\\nWe hope you find this new tool valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\n[TRY IT NOW!](https://phasetwo.io/dashboard/)"},{"id":"magic-link","metadata":{"permalink":"/blog/magic-link","source":"@site/blog/2022-04-27-magic-link.md","title":"Magic Links","description":"Today we\'re making two announcements: A new, highly-requested feature, and the open sourcing of the extension at the same time. We\'ve received a lot of requests from customers to implement \\"magic link\\" login functionality that would allow users to login to an application using a link sent to their email or over some other secure channel.","date":"2022-04-27T00:00:00.000Z","formattedDate":"April 27, 2022","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.395,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"magic-link","title":"Magic Links","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"Self-service (beta) Launch","permalink":"/blog/self-service"},"nextItem":{"title":"Multi-tenant Extensions","permalink":"/blog/orgs"}},"content":"Today we\'re making two announcements: A new, highly-requested feature, and the open sourcing of the extension at the same time. We\'ve received a lot of requests from customers to implement \\"magic link\\" login functionality that would allow users to login to an application using a link sent to their email or over some other secure channel. \\n\\nTo that end, we\'ve implemented two pathways for creating a magic link. One can be configured in the Authentication section of the admin UI by duplicating the Browser flow, and replacing the normal Username/Password/OTP forms with the Magic Link execution type\\n![Install Magic Link Authenticator in Browser Flow](https://github.com/p2-inc/keycloak-magic-link/raw/main/docs/assets/magic-authenticator.png)\\nThis mechanism inserts a authenticator in the login flow that intercepts the email address and sends the magic link in an email to to the user.\\n\\nWe\'ve also implemented a web service that allows you to create a magic link without necessarily sending an email. This will allow you to send the link through another channel. Specification for the new endpoint can be found in the [Magic Link API Documentation](/api/create-magic-link).\\n\\nBoth methods have the option of forcing the creation of a new user when an unknown email address is used. This allows a combination login/registration flow that combines an email verification. We think this really nails reducing friction in a new user flow.\\n\\nWe\'re open sourcing the Keycloak extensionsso that the broad Keycloak community can benefit right away. We are doing this in line with our committment to keeping our core extensions [open source](/docs/introduction/open-source). We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-magic-link"},{"id":"orgs","metadata":{"permalink":"/blog/orgs","source":"@site/blog/2022-03-21-orgs.md","title":"Multi-tenant Extensions","description":"Today we\'re open sourcing set of Keycloak extensions that are focused on solving several of the common use cases of multi-tenant, SaaS applications that Keycloak does not solve out of the box. We are doing this in line with our committment to keeping our core extensions open source. These extensions are the basis of our Organizations features, which allow Phase Two customers to model their own customers in their systems and create enterprise \\"team\\" functionality that suits their business case.","date":"2022-03-21T00:00:00.000Z","formattedDate":"March 21, 2022","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.725,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"orgs","title":"Multi-tenant Extensions","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"Magic Links","permalink":"/blog/magic-link"},"nextItem":{"title":"Introducing Phase Two Connect","permalink":"/blog/connect"}},"content":"Today we\'re open sourcing set of Keycloak extensions that are focused on solving several of the common use cases of multi-tenant, SaaS applications that Keycloak does not solve out of the box. We are doing this in line with our committment to keeping our core extensions [open source](/docs/introduction/open-source). These extensions are the basis of our Organizations features, which allow Phase Two customers to model their own customers in their systems and create enterprise \\"team\\" functionality that suits their business case.\\n\\nA variation of this code has been built, enhanced and used in production by several customers for almost two years. It is now available as open source for members of the broader Keycloak community. We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-orgs"},{"id":"connect","metadata":{"permalink":"/blog/connect","source":"@site/blog/2022-02-25-connect.md","title":"Introducing Phase Two Connect","description":"Following our post about our wizard product, we received an overwhelming amount of interest in it. Many customers of our cloud offering asked for it as a portal for their organization administrators to set up their identity providers. On-prem customers said that one consistent onboarding hurdle was SSO complexity, and asked for it to be included in the bundled distribution.","date":"2022-02-25T00:00:00.000Z","formattedDate":"February 25, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"connect","permalink":"/blog/tags/connect"}],"readingTime":0.705,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"connect","title":"Introducing Phase Two Connect","author":"Phase Two","tags":["release","phase_two","connect"]},"prevItem":{"title":"Multi-tenant Extensions","permalink":"/blog/orgs"},"nextItem":{"title":"SSO? Wave Your Magic Wand","permalink":"/blog/wizard"}},"content":"Following our [post about our wizard product](/blog/wizard), we received an overwhelming amount of interest in it. Many customers of our cloud offering asked for it as a portal for their organization administrators to set up their identity providers. On-prem customers said that one consistent onboarding hurdle was SSO complexity, and asked for it to be included in the bundled distribution.\\n\\nToday we\'re pleased to report that we\'ve listened to both use cases and completed embedding the \\"wizard\\" product into Phase Two. We\'re calling it \\"Connect\\", as it\'s the best way we could come up with characterizing its simplicity. It massively reduces the complexit of configuring SSO connections, and distills the process into something any member of the team can understand.\\n\\nPhase Two Connect is currently available by invitation only while we work out the final kinks. [Contact sales](mailto:sales@phasetwo.io) for more information."},{"id":"wizard","metadata":{"permalink":"/blog/wizard","source":"@site/blog/2022-01-24-wizard.md","title":"SSO? Wave Your Magic Wand","description":"Working with one of our customers, we discovered that even the most technically literate developer or ops professional could look at the configuration for an SSO connection like it was a foreign language. While our configuration interface attempts to cover all possible options, and document clearly what each option means, it can still be entirely unclear what is required during a setup.","date":"2022-01-24T00:00:00.000Z","formattedDate":"January 24, 2022","tags":[{"label":"sso","permalink":"/blog/tags/sso"},{"label":"wizard","permalink":"/blog/tags/wizard"},{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.935,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"wizard","title":"SSO? Wave Your Magic Wand","author":"Phase Two","tags":["sso","wizard","release","phase_two"]},"prevItem":{"title":"Introducing Phase Two Connect","permalink":"/blog/connect"},"nextItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"}},"content":"Working with one of our customers, we discovered that even the most technically literate developer or ops professional could look at the configuration for an SSO connection like it was a foreign language. While our configuration interface attempts to cover all possible options, and document clearly what each option means, it can still be entirely unclear what is required during a setup.\\n\\nFurthermore, the identity provider that is being integrated can present a similarly extensive interface that may not use the same terms and language. However, after investigation into the most common identity providers, we found that most of the configuration options can simply be set by convention if the vendor is known.\\n\\nBased on that observation, we\'ve built what we call a \\"wizard\\" UI on top of our identity provider configuration to make it easy to integration the top commercial identity provider vendors. Take a look at a quick video of a setup using our most recent prototype. \\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/9HJWdJqnE0I\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nIf you\'re interested in early access to our \\"wizards\\", please [contact us](mailto:sales@phasetwo.io) today."},{"id":"events","metadata":{"permalink":"/blog/events","source":"@site/blog/2021-10-18-events.md","title":"Events and Audit Logging Extensions","description":"Per our committment to keeping our core extensions open source, today we\'re releasing our Keycloak extensions to the event system. These extensions form the basis of how our Audit Log features are built.","date":"2021-10-18T00:00:00.000Z","formattedDate":"October 18, 2021","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.66,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"events","title":"Events and Audit Logging Extensions","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"SSO? Wave Your Magic Wand","permalink":"/blog/wizard"},"nextItem":{"title":"Free as in Beer","permalink":"/blog/free-realm"}},"content":"Per our committment to keeping our core extensions [open source](/docs/introduction/open-source), today we\'re releasing our Keycloak extensions to the event system. These extensions form the basis of how our [Audit Log](/docs/audit-logs) features are built.\\n\\nAdditionally, we\'re providing several goodies that will be valuable to others building extensions on top of Keycloak, including a generic scriptable event listener, an event emitter to send events to any HTTP endpoint, a mechanism for retrieving event listener configurations from realm attributes, a mechanism for running multiple event listeners of the same type with different configurations, and a unified event model with facility for subscribing to webhooks. \\n\\nWe hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-events"},{"id":"free-realm","metadata":{"permalink":"/blog/free-realm","source":"@site/blog/2021-05-31-free-realm.md","title":"Free as in Beer","description":"Since our release about basing Phase Two on the Keycloak Open Source Identity and Access Management system, an our committment to keeping our core extensions open source, we\'ve received positive feedback from customers and interest from the the Keycloak community.","date":"2021-05-31T00:00:00.000Z","formattedDate":"May 31, 2021","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.11,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"free-realm","title":"Free as in Beer","author":"Phase Two","tags":["phase_two"]},"prevItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"},"nextItem":{"title":"Keycloak, and Our Commitment to Open Source","permalink":"/blog/keycloak"}},"content":"Since our release about basing Phase Two on the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, an our committment to keeping our core extensions [open source](/docs/introduction/open-source), we\'ve received positive feedback from customers and interest from the the Keycloak community.\\n\\nWe\'ve noticed that support forums for Keycloak have many questions and requests around just getting started. Even though the software is mature, open source, and has a helpfu user community, just spinning up an environment and trying it out can be puzzling for first-time users. It\'s pretty clear that a lot of people just give up, because they can\'t get a server running, let alone configure their first realm[^1].\\n\\nBecause of that, we\'ve decided to offer developers a *FREE* realm in Phase Two, so those that are interested in trying it out can get successful quickly. Free realms are limited to fewer than 1000 users and 5 SSO connections. Otherwise, there are no restrictions beyond abiding by our [terms of use](/docs/terms). Sound good? Please fill out the [contact form](https://docs.google.com/forms/d/e/1FAIpQLScIwakLlJpd9OS3r1fCsPDX01Y9BTSvxf5Ceru_FrpAQE5hIA/viewform?usp=sf_link) with your company information, and we\'ll respond with access information for your realm. \\n\\n[^1]: In Keycloak, a \\"realm\\" manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control."},{"id":"keycloak","metadata":{"permalink":"/blog/keycloak","source":"@site/blog/2020-12-21-keycloak.md","title":"Keycloak, and Our Commitment to Open Source","description":"Following the initial release of Phase Two\'s authentication and SSO tools 3 months ago, we had a warm reception by several early- to mid- stage SaaS companies. The message was consistent. SSO was a key barrier to unlocking enterprise customers, and we had made it much easier to quickly integrate the alphabet-soup of enterprise identity providers.","date":"2020-12-21T00:00:00.000Z","formattedDate":"December 21, 2020","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"}],"readingTime":1.705,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"keycloak","title":"Keycloak, and Our Commitment to Open Source","author":"Phase Two","tags":["keycloak","phase_two","open_source"]},"prevItem":{"title":"Free as in Beer","permalink":"/blog/free-realm"},"nextItem":{"title":"Welcome to Phase Two","permalink":"/blog/welcome"}},"content":"Following the initial release of Phase Two\'s [authentication and SSO tools](https://phasetwo.io/docs/sso/) 3 months ago, we had a warm reception by several early- to mid- stage SaaS companies. The message was consistent. SSO was a key barrier to unlocking enterprise customers, and we had made it much easier to quickly integrate the alphabet-soup of enterprise identity providers.\\n\\nFurthermore, many of our customers have responded well to our \\"one price per project\\" idea, citing that competitors and other enterprise authentication companies had pricing models that ramped on a per-user and per-SSO connection basis, making them economically unattractive to companies with business and pricing models that couldn\'t support that. \\n\\nOne of the other points that we heard loud and clear from our first customers, was the fear of vendor lock-in. Integrating tools like this can be a large effort, and can be difficult to unwind if the terms or service fall short. While our adoption of standards such as OpenID and SAML allayed some of those fears, we wanted to go a step further.\\n\\nWe built the initial verison of Phase Two as a set of extensions to the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, built and maintained by Red Hat. After several months of developing for it, and operating it for our customers, we\'ve decided to continue using it. Keycloak has been battle-tested and hardened for over 6 years. It\'s security and reliability is depended on by organizations from small startups to Fortune 500 companies and governments.\\n\\nTo put to rest any future concerns about vendor lock-in, we\'re committing to making our core extensions to Keycloak open source. While we will endeavor to make Phase Two simple to use, operate and scale, we will maintain compatibility so that customers can migrate to their own Keycloak deployment. Updates and links to our open source extensions will be published in the [Open Source](/docs/introduction/open-source) section of the documentation, and will be available in our [p2-inc GitHub organization page](https://github.com/p2-inc).\\n\\nWe have benefitted immensely from the open source communitiy, and we are excited to give back!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2020-09-28-welcome.md","title":"Welcome to Phase Two","description":"After building and working for startups and technology companies for almost 25 years, I found myself having a sense of d\xe9j\xe0-vu.","date":"2020-09-28T00:00:00.000Z","formattedDate":"September 28, 2020","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":2.1,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"welcome","title":"Welcome to Phase Two","author":"Phase Two","tags":["release","phase_two"]},"prevItem":{"title":"Keycloak, and Our Commitment to Open Source","permalink":"/blog/keycloak"}},"content":"After building and working for startups and technology companies for almost 25 years, I found myself having a sense of d\xe9j\xe0-vu. \\n\\nHad I really built the same features and functionality over and over?\\n\\nEveryone of us who has been in the industry for any length of time probably has the same feeling. Whether or not we are fully conscious of it, we probably built a (bad) version of login, registration, user management, authorization, organizations and invitations, audit logging, etc. at least one time for every company we\'ve worked for. \\n\\nIn early 2018, I joined an enterprise SaaS startup, where I built the initial team and product over 18 months. Analyzing tickets and epics in the project tracking system we used, I found that over 60% of our first 18 months was spent building features and functionality like this -- essential building blocks, but not the core competency we sought to test in the marketplace. And the result of that effort was only adequate versions of those common features, which resulted in less time spent on what we were trying to prove. I began to refer to this heavy tax a \\"SaaS CRUD\\".\\n\\nWas this really what everyone else was doing? I was lucky to have a large network of engineering leaders at companies that ranged from the earliest stages to the largest public companies, so I asked them. The responses were remarkably consisitent. Early stage companies wished there was something comprehensive they could adopt, and later stage and large companies lamented not adopting external tools earlier that gave them guarantees around uptime and compliance. All were aware of or had tried to knit together a mish-mash of \\"feature company\\" products, and all expressed dissatisfaction with \\"model mismatch\\" of most of the tools in the marketplace, which demanded more integration overhead than the perceived benefit allowed. \\n\\nI was lucky to find others that had observed the same thing. We joined forces and spent the next 6 months interviewing companies of a range of sizes, developing a playbook for companies building new products. Based on that playbook, today we are releasing our first version of tooling designed to help application developers avoid rebuilding \\"SaaS CRUD\\".\\n\\nPhase Two is designed to help SaaS companies accelerate time-to-market. Authentication and SSO are our first targets, but we plan to expand to many other areas of pain for the growing company seeking enterprise adoption. We\'d love for you to join us on this journey. For product demos and to become a beta customer, please [contact us](mailto:support@phasetwo.io)!"}]}')}}]);