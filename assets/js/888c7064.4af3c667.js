"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[2478],{57706:function(e,t,a){a.r(t),a.d(t,{assets:function(){return h},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return u}});var i=a(83117),n=(a(67294),a(3905)),o=a(26389),r=a(94891),s=a(75190),p=(a(47507),a(24310)),l=(a(63303),a(75035),a(85162));const d={id:"create-idp",title:"Create a new identity provider for this organization",description:"Create a new identity provider for this organization",sidebar_label:"Create a new identity provider for this organization",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Identity Providers"],operationId:"createIdp",requestBody:{description:"JSON body",content:{"application/json":{schema:{type:"object",properties:{addReadTokenRoleOnCreate:{type:"boolean"},alias:{type:"string"},config:{type:"object",additionalProperties:!0},displayName:{type:"string"},enabled:{type:"boolean"},firstBrokerLoginFlowAlias:{type:"string"},internalId:{type:"string"},linkOnly:{type:"boolean"},postBrokerLoginFlowAlias:{type:"string"},providerId:{type:"string"},storeToken:{type:"boolean"},trustEmail:{type:"boolean"}},title:"IdentityProviderRepresentation"}}},required:!0},responses:{201:{description:"success"}},description:"Create a new identity provider for this organization",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"}],method:"post",path:"/{realm}/orgs/{orgId}/idps",servers:[{url:"{protocol}://{host}{port}{relativePath}/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},relativePath:{enum:["","/auth"],default:"",description:"Relative path"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},jsonRequestBodyExample:{addReadTokenRoleOnCreate:!0,alias:"string",config:{},displayName:"string",enabled:!0,firstBrokerLoginFlowAlias:"string",internalId:"string",linkOnly:!0,postBrokerLoginFlowAlias:"string",providerId:"string",storeToken:!0,trustEmail:!0},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/main/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Create a new identity provider for this organization",description:{type:"text/plain"},url:{path:[":realm","orgs",":orgId","idps"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"}]},header:[{key:"Content-Type",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api//phase-two-admin-rest-api",custom_edit_url:null},c=void 0,m={unversionedId:"create-idp",id:"create-idp",title:"Create a new identity provider for this organization",description:"Create a new identity provider for this organization",source:"@site/api/create-idp.api.mdx",sourceDirName:".",slug:"/create-idp",permalink:"/api/create-idp",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"create-idp",title:"Create a new identity provider for this organization",description:"Create a new identity provider for this organization",sidebar_label:"Create a new identity provider for this organization",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Identity Providers"],operationId:"createIdp",requestBody:{description:"JSON body",content:{"application/json":{schema:{type:"object",properties:{addReadTokenRoleOnCreate:{type:"boolean"},alias:{type:"string"},config:{type:"object",additionalProperties:!0},displayName:{type:"string"},enabled:{type:"boolean"},firstBrokerLoginFlowAlias:{type:"string"},internalId:{type:"string"},linkOnly:{type:"boolean"},postBrokerLoginFlowAlias:{type:"string"},providerId:{type:"string"},storeToken:{type:"boolean"},trustEmail:{type:"boolean"}},title:"IdentityProviderRepresentation"}}},required:!0},responses:{201:{description:"success"}},description:"Create a new identity provider for this organization",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"}],method:"post",path:"/{realm}/orgs/{orgId}/idps",servers:[{url:"{protocol}://{host}{port}{relativePath}/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},relativePath:{enum:["","/auth"],default:"",description:"Relative path"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},jsonRequestBodyExample:{addReadTokenRoleOnCreate:!0,alias:"string",config:{},displayName:"string",enabled:!0,firstBrokerLoginFlowAlias:"string",internalId:"string",linkOnly:!0,postBrokerLoginFlowAlias:"string",providerId:"string",storeToken:!0,trustEmail:!0},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/main/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Create a new identity provider for this organization",description:{type:"text/plain"},url:{path:[":realm","orgs",":orgId","idps"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"}]},header:[{key:"Content-Type",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"api//phase-two-admin-rest-api",custom_edit_url:null},sidebar:"api",previous:{title:"Get identity providers for this organization",permalink:"/api/get-idps"},next:{title:"Get identity provider for this organization by alias",permalink:"/api/get-idp"}},h={},u=[{value:"Create a new identity provider for this organization",id:"create-a-new-identity-provider-for-this-organization",level:2}],y={toc:u};function g(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"create-a-new-identity-provider-for-this-organization"},"Create a new identity provider for this organization"),(0,n.kt)("p",null,"Create a new identity provider for this organization"),(0,n.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"Path Parameters")),(0,n.kt)("div",null,(0,n.kt)("ul",null,(0,n.kt)(s.Z,{className:"paramsItem",param:{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,n.kt)(s.Z,{className:"paramsItem",param:{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"})))),(0,n.kt)(r.Z,{mdxType:"MimeTabs"},(0,n.kt)(l.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,n.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.kt)("summary",{style:{textAlign:"left"}},(0,n.kt)("strong",null,"Request Body"),(0,n.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,n.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}},(0,n.kt)("div",{style:{marginTop:"1rem",marginBottom:"1rem"}},(0,n.kt)("p",null,"JSON body"))),(0,n.kt)("ul",{style:{marginLeft:"1rem"}},(0,n.kt)(p.Z,{collapsible:!1,name:"addReadTokenRoleOnCreate",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"alias",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.kt)("details",{style:{}},(0,n.kt)("summary",{style:{}},(0,n.kt)("strong",null,"config"),(0,n.kt)("span",{style:{opacity:"0.6"}}," object")),(0,n.kt)("div",{style:{marginLeft:"1rem"}}))),(0,n.kt)(p.Z,{collapsible:!1,name:"displayName",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"enabled",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"firstBrokerLoginFlowAlias",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"internalId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"linkOnly",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"postBrokerLoginFlowAlias",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"providerId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"storeToken",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,n.kt)(p.Z,{collapsible:!1,name:"trustEmail",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}))))),(0,n.kt)("div",null,(0,n.kt)(o.Z,{mdxType:"ApiTabs"},(0,n.kt)(l.Z,{label:"201",value:"201",mdxType:"TabItem"},(0,n.kt)("div",null,(0,n.kt)("p",null,"success")),(0,n.kt)("div",null)))))}g.isMDXComponent=!0}}]);