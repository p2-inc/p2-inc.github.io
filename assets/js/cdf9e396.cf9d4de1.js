"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[5180],{39412:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return l}});var n=a(83117),i=(a(67294),a(3905)),o=a(26389),r=(a(94891),a(75190)),s=(a(47507),a(24310),a(63303),a(75035),a(85162));const p={id:"add-organization-member",title:"Add an organization member",description:"Add the specified user to the specified organization as a member",sidebar_label:"Add an organization member",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Memberships"],operationId:"addOrganizationMember",description:"Add the specified user to the specified organization as a member",responses:{201:{description:"success"}},parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"}],method:"put",path:"/{realm}/orgs/{orgId}/members/{userId}",servers:[{url:"{protocol}://{host}{port}{relativePath}/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},relativePath:{enum:["","/auth"],default:"",description:"Relative path"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/latest/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/main/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Add an organization member",description:{content:"Add the specified user to the specified organization as a member",type:"text/plain"},url:{path:[":realm","orgs",":orgId","members",":userId"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"},{disabled:!1,description:{content:"(Required) user id",type:"text/plain"},type:"any",value:"",key:"userId"}]},method:"PUT"}},sidebar_class_name:"put api-method",info_path:"api//phase-two-admin-rest-api",custom_edit_url:null},d=void 0,c={unversionedId:"add-organization-member",id:"add-organization-member",title:"Add an organization member",description:"Add the specified user to the specified organization as a member",source:"@site/api/add-organization-member.api.mdx",sourceDirName:".",slug:"/add-organization-member",permalink:"/api/add-organization-member",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"add-organization-member",title:"Add an organization member",description:"Add the specified user to the specified organization as a member",sidebar_label:"Add an organization member",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Memberships"],operationId:"addOrganizationMember",description:"Add the specified user to the specified organization as a member",responses:{201:{description:"success"}},parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"}],method:"put",path:"/{realm}/orgs/{orgId}/members/{userId}",servers:[{url:"{protocol}://{host}{port}{relativePath}/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},relativePath:{enum:["","/auth"],default:"",description:"Relative path"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/latest/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/main/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Add an organization member",description:{content:"Add the specified user to the specified organization as a member",type:"text/plain"},url:{path:[":realm","orgs",":orgId","members",":userId"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"},{disabled:!1,description:{content:"(Required) user id",type:"text/plain"},type:"any",value:"",key:"userId"}]},method:"PUT"}},sidebar_class_name:"put api-method",info_path:"api//phase-two-admin-rest-api",custom_edit_url:null},sidebar:"api",previous:{title:"Check if a user is a member of an organization",permalink:"/api/check-organization-membership"},next:{title:"Remove an organization member",permalink:"/api/remove-organization-member"}},m={},l=[{value:"Add an organization member",id:"add-an-organization-member",level:2}],h={toc:l};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"add-an-organization-member"},"Add an organization member"),(0,i.kt)("p",null,"Add the specified user to the specified organization as a member"),(0,i.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"Path Parameters")),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)(r.Z,{className:"paramsItem",param:{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,i.kt)(r.Z,{className:"paramsItem",param:{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,i.kt)(r.Z,{className:"paramsItem",param:{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"})))),(0,i.kt)("div",null,(0,i.kt)(o.Z,{mdxType:"ApiTabs"},(0,i.kt)(s.Z,{label:"201",value:"201",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"success")),(0,i.kt)("div",null)))))}u.isMDXComponent=!0}}]);