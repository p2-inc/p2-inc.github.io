"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[4233],{12776:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png"},15524:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/okta-init-flow-f5a0e0251ac836ef7c6b2272f5afc8eb.png"},17552:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/twin-session-oidc-client-fe31844e76570edec870b74c757fe3d4.png"},26205:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/okta-application-start-dcb3c461ebb5edaa2420e055bb29b920.png"},26749:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/saml-client-redirect-binding-07c2fb3b92b7ea7b73edf70fc1995b35.png"},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>r});var n=t(96540);const s={},a=n.createContext(s);function o(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:i},e.children)}},34724:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png"},43170:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/generic-client-2ad559061d08260b7a054a6e199052a6.png"},44341:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/okta-application-setup-8e11380d39e1e6c9a325035ef9ef4388.png"},57117:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png"},62325:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var n=t(95644),s=t(74848),a=t(28453),o=t(63545);const r={title:"Keycloak SAML Identity Provider (IdP) Initiated Flow with Okta",slug:"keycloak-saml-identity-provider-idp-initiated-flow-with-okta",date:new Date("2025-02-25T00:00:00.000Z"),authors:"phasetwo",tags:["phase_two","open_source","okta","authentication","authorization","keycloak","sso","idp-initiated","guide"]},l=void 0,c={authorsImageUrls:[void 0]},d=[{value:"IdP Initiated Flow",id:"idp-initiated-flow",level:2},{value:"How Each Flow Works",id:"how-each-flow-works",level:2},{value:"Service Provider Initiated Flow",id:"service-provider-initiated-flow",level:3},{value:"Identity Provider Initiated Flow",id:"identity-provider-initiated-flow",level:3},{value:"Components",id:"components",level:3},{value:"Setting up a Keycloak Instance",id:"setting-up-a-keycloak-instance",level:2},...o.RM,{value:"IdP Initiated Example Setup",id:"idp-initiated-example-setup",level:2},{value:"Okta:",id:"okta",level:3},{value:"SAML 2.0 Identity Provider",id:"saml-20-identity-provider",level:3},{value:"Service Provider Application",id:"service-provider-application",level:2},{value:"Keycloak Realm Client",id:"keycloak-realm-client",level:3},{value:"Testing",id:"testing",level:2},{value:"What Just Happened?",id:"what-just-happened",level:2},{value:"IdP-Initiated Flow Redirects to a OIDC Application",id:"idp-initiated-flow-redirects-to-a-oidc-application",level:2},{value:"Service Provider Application",id:"service-provider-application-1",level:3},{value:"Keycloak Realm Client",id:"keycloak-realm-client-1",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function h(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"idp-initiated-flow",children:"IdP Initiated Flow"}),"\n",(0,s.jsxs)(i.p,{children:["When implementing ",(0,s.jsx)(i.a,{href:"/blog/introduction-to-simple-saml",children:"SAML"})," for the establishment of an Identity Provider, two primary options are available:"]}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"#service-provider-initated-flow",children:"Service Provider"})," (SP) initiated"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"#identity-provider-initated-flow",children:"Identity Provider"})," (IdP) initiated"]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The SP initiated flow is widely recognized by users due to its straightforward configuration, which is merely the exchange of some metadata. In contrast, the IdP-initiated flow is less intuitive and involves an additional step that may not be readily apparent to many users. The purpose of this blog is to elucidate the steps necessary to successfully execute the IdP-initiated flow. We will setup a full ",(0,s.jsx)(i.a,{href:"#idp-initiated-example-setup",children:"example"})]}),"\n",(0,s.jsxs)(i.p,{children:["A fundamental understanding of ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/SAML_2.0",children:"SAML 2.0"})," and ",(0,s.jsx)(i.a,{href:"https://www.keycloak.org/",children:"Keycloak"})," is required to effectively follow the provided instructions."]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["If you just want to skip to the code, visit the Phase Two ",(0,s.jsx)(i.a,{href:"https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated",children:"IdP-initiated example"}),"."]})}),"\n",(0,s.jsx)(i.h2,{id:"how-each-flow-works",children:"How Each Flow Works"}),"\n",(0,s.jsx)(i.p,{children:"The steps for each are similar, but also differen in important ways."}),"\n",(0,s.jsx)(i.h3,{id:"service-provider-initiated-flow",children:"Service Provider Initiated Flow"}),"\n",(0,s.jsx)(i.p,{children:"From the user's perspective, the SP initiated flow is the most common. The user visits the SP and is redirected to the IdP for authentication. After successful authentication, the IdP sends a SAML assertion back to the SP, which then logs the user in. This looks and feels like, I go to the website, I click Log In button, and the SP sends the browser to the IdP for authentication. The IdP then sends a SAML assertion back to the SP, which logs the user in."}),"\n",(0,s.jsx)(i.p,{children:"In most cases, this is a more secure method as the request originates with the SP. The IdP is not aware of the SP until the user clicks the login button. This is a more secure method as it prevents replay attacks and other security issues."}),"\n",(0,s.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant User\n    participant SP\n    participant IdP\n\n    User->>SP: Visits SP or clicks tile\n    SP->>IdP: Redirects user for login\n    IdP->>IdP: Authenticates user\n    IdP->>SP: Sends SAML/ID token\n    SP->>User: Logs user in"}),"\n",(0,s.jsx)(i.h3,{id:"identity-provider-initiated-flow",children:"Identity Provider Initiated Flow"}),"\n",(0,s.jsx)(i.p,{children:"In this case, the thing to know is that the user is already authenticated in the IdP, and the IdP will send a SAML assertion to the SP. The SP will then use this assertion to log the user in."}),"\n",(0,s.jsx)(i.mermaid,{value:"sequenceDiagram\nparticipant User\nparticipant IdP\nparticipant SP\n\n    User->>IdP: Logs in to IdP (e.g. Okta, MyApps)\n    IdP->>IdP: Generates SAML/ID Token\n    IdP->>SP: Sends token (POST or Redirect)\n    SP->>User: Logs user in"}),"\n",(0,s.jsx)(i.h3,{id:"components",children:"Components"}),"\n",(0,s.jsx)(i.p,{children:"The components involved in this example will be as follows:"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Identity Provider:"}),"\nAny identity provider (IdP) that supports SAML 2.0 may be selected. The process begins by accessing the Identity Provider dashboard, where the user is prompted to authenticate. Upon successful authentication, the user may then request a service. For this case, we'll use ",(0,s.jsx)(i.a,{href:"#idp-initiated-example-setup",children:"Okta"})," as the IdP."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Keycloak SAML 2.0 Identity Provider:"}),"\nThe Keycloak Identity Provider will be used for identity brokering and will process the SAML Response received from the Identity Provider. It is responsible for operations such as provisioning, signature verification, decryption etc."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Keycloak Realm Client:"}),"\nThe Keycloak SAML client function is to maintain the authenticated user session within Keycloak. Another function of this generic client is to forward the authenticated user to the Service Provider."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Service Provider:"}),"\nThe Service Provider refers to the application that the user seeks to access. Once the user has been authenticated in Keycloak, a new SAML Response is generated by the realm client and subsequently consumed by the Service Provider."]}),"\n",(0,s.jsx)(i.h2,{id:"setting-up-a-keycloak-instance",children:"Setting up a Keycloak Instance"}),"\n",(0,s.jsxs)(i.p,{children:["The quickest way to get a fully-functional deployment of Keycloak is using Phase Two's ",(0,s.jsx)("a",{href:"/dashboard",target:"_blank",rel:"noopener noreferrer",children:"free tier"}),"."]}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Instructions"}),(0,s.jsx)(o.Ay,{})]}),"\n",(0,s.jsx)(i.h2,{id:"idp-initiated-example-setup",children:"IdP Initiated Example Setup"}),"\n",(0,s.jsx)(i.p,{children:"To communicate this concept, this example will utilize"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Okta as the Identity Provider (IdP)"}),"\n",(0,s.jsx)(i.li,{children:"Keycloak as the Identity Provider (IdP) broker"}),"\n",(0,s.jsx)(i.li,{children:"Keycloak as the SAML client"}),"\n",(0,s.jsx)(i.li,{children:"A simple Spring Boot application as the Service Provider (SP)"}),"\n"]}),"\n",(0,s.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant User\n    participant Okta as Identity Provider (Okta)\n    participant KeycloakBroker as Keycloak Identity Broker\n    participant KeycloakClient as Keycloak SAML Client\n    participant SpringApp as Service Provider (SP)\n\n\n    User->>Okta: Authenticates with IdP\n    Okta->>KeycloakBroker: SAML AuthnRequest\n    KeycloakBroker->>KeycloakClient: SAML AuthnRequest\n    KeycloakClient->>KeycloakBroker: SAML Response (assertion)\n    KeycloakBroker->>SpringApp: SAML Response (assertion)\n    SpringApp->>User: Logs user in"}),"\n",(0,s.jsx)(i.h3,{id:"okta",children:"Okta:"}),"\n",(0,s.jsx)(i.p,{children:"Login in your Okta tenant and configure a new application."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Okta Application Start",src:t(26205).A+"",width:"1393",height:"748"})}),"\n",(0,s.jsx)(i.p,{children:"You will need to specify two things:"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"Single sign-on URL"}),": ",(0,s.jsx)(i.a,{href:"http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client",children:"http://localhost:8080/realms/test-realm/broker/okta-broker/endpoint/clients/okta-client"})," ",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.code,{children:"Audience URI"}),": ",(0,s.jsx)(i.a,{href:"http://localhost:8080/realms/test-realm",children:"http://localhost:8080/realms/test-realm"})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Okta Application Setup",src:t(44341).A+"",width:"1393",height:"748"})}),"\n",(0,s.jsxs)(i.p,{children:["The identity provider ",(0,s.jsx)(i.code,{children:"redirect url"})," differs from what we typically observe in Identity Provider from the Keycloak console. Based on the documentation for ",(0,s.jsx)(i.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login",children:"IdP Initiated Login"}),", the path ",(0,s.jsx)(i.code,{children:"{brokerRedirectUrl}/clients/okta-client"})," indicates the ",(0,s.jsx)(i.code,{children:"client-id"})," that is intended to maintain the service-provider application session. This will make more sense in the following steps."]}),"\n",(0,s.jsx)(i.h3,{id:"saml-20-identity-provider",children:"SAML 2.0 Identity Provider"}),"\n",(0,s.jsxs)(i.p,{children:["The SAML identity provider (e.g: ",(0,s.jsx)(i.code,{children:"okta-broker"}),") from the example above can be created by importing the ",(0,s.jsx)(i.code,{children:"metadata.xml"})," from the application you just created in Okta. For this example we will provide the alias: ",(0,s.jsx)(i.code,{children:"okta-broker"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["To do this navigate to Identity providers > SAML v2.0. On this page, add the alias of your app (in our case it is ",(0,s.jsx)(i.code,{children:"okta-broker"}),'). Untoggle the "Use entity descriptor" option and select the ',(0,s.jsx)(i.code,{children:"metadata.xml"})," file you downloaded from Okta. This will validate and auto-populate the correct areas."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Identity Provider Setup",src:t(74619).A+"",width:"1177",height:"537"})}),"\n",(0,s.jsx)(i.h2,{id:"service-provider-application",children:"Service Provider Application"}),"\n",(0,s.jsxs)(i.p,{children:["We created a simple SpringBoot app which has a ",(0,s.jsx)(i.code,{children:"ACS"})," endpoint: ",(0,s.jsx)(i.code,{children:"/login/saml2/sso"})," and a ",(0,s.jsx)(i.code,{children:"entityId"}),": ",(0,s.jsx)(i.code,{children:"/saml2/metadata"})," . Find the code for the ",(0,s.jsx)(i.a,{href:"https://github.com/p2-inc/examples/tree/main/saml2/idp-initiated",children:"example application"}),". Download and have this running on your local machine."]}),"\n",(0,s.jsx)(i.h3,{id:"keycloak-realm-client",children:"Keycloak Realm Client"}),"\n",(0,s.jsxs)(i.p,{children:["We need to create new SAML 2.0 Client in ",(0,s.jsx)(i.code,{children:"test-realm"}),". This varies from the Identity Provider we just created. This can be done by importing the metadata from the Service Provider application. To get to the right place, go to Clients > Import Client and upload the resource file. To check if the data was successfully imported, check the Assertion Consumer Service POST Binding URL, it should contain the endpoint mentioned above."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Generic client advance",src:t(67655).A+"",width:"1932",height:"1418"})}),"\n",(0,s.jsxs)(i.p,{children:["Now we need to return to the documentation: ",(0,s.jsx)(i.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login",children:"IdP Initiated Login"}),". In order to configure the IdP-initiated flow, a special field needs to be specified ",(0,s.jsx)(i.code,{children:"IdP-Initiated SSO URL"}),"."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"IdP-Initiated SSO URL"})," value of ",(0,s.jsx)(i.code,{children:"okta-client"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Generic client",src:t(43170).A+"",width:"1127",height:"699"})}),"\n",(0,s.jsxs)(i.p,{children:["The field is part of the ",(0,s.jsx)(i.code,{children:"{brokerRedirectUrl}/clients/okta-client"})," url. As we can see the value is different from that of the ",(0,s.jsx)(i.code,{children:"clientId"})," of the client we just created."]}),"\n",(0,s.jsx)(i.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(i.p,{children:'To test this, please visit the Okta end user dashboard and select the application we created in the first step. This is the "tile" setup people are used to accessing an application.'}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Okta flow start",src:t(15524).A+"",width:"1393",height:"748"})}),"\n",(0,s.jsxs)(i.p,{children:["For debugging purposes, you might consider using the ",(0,s.jsx)(i.a,{href:"https://support.okta.com/help/s/article/How-to-troubleshoot-with-SAML-Tracer?language=en_US",children:"SAML Tracer"})," browser extension. If you take a moment to check the requests from the flow, you'll notice that it contains only SAMLResponse messages. This is a specific characteristic of the IdP-initiated flow."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.img,{alt:"Okta SAML response",src:t(95722).A+"",width:"818",height:"644"})," ",(0,s.jsx)(i.img,{alt:"Client SAML response",src:t(70048).A+"",width:"803",height:"644"})]}),"\n",(0,s.jsx)(i.h2,{id:"what-just-happened",children:"What Just Happened?"}),"\n",(0,s.jsx)(i.p,{children:"We have successfully secured a web application using the SAML protocol and IdP-initiated flow with Okta. Great work!"}),"\n",(0,s.jsx)(i.p,{children:"It is important to consider that the IdP-initiated flow does present certain security concerns, such as the potential for replay attacks, spoofing, or data tampering. To ensure we uphold security, it is essential that we take all necessary precautions, including implementing assertion encryption to protect sensitive data, utilizing signing to mitigate the risk of data tampering, and proper configuration for issuer validation."}),"\n",(0,s.jsx)(i.p,{children:"However, it is worth noting that there is still a risk that a SAML assertion could be compromised, allowing an attacker to gain access to the service provider as the affected user. While the service provider can recognize and validate the assertion because it was issued by the expected issuer and signed with the correct key, it cannot confirm whether a malicious party was involved in sending it. Given these concerns about the IdP-initiated flow and its vulnerability to certain security threats, there may be circumstances in which we find it necessary to implement it based on our specific context."}),"\n",(0,s.jsx)(i.h2,{id:"idp-initiated-flow-redirects-to-a-oidc-application",children:"IdP-Initiated Flow Redirects to a OIDC Application"}),"\n",(0,s.jsxs)(i.p,{children:["In the example above we configured the IdP-initiated flow to act as a identity broker and redirect to a client application which consumes SAML. Another interesting use case involves redirecting a user authenticated in the Keycloak realm to an ",(0,s.jsx)(i.strong,{children:"OIDC client application"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["Although this setup may not function seamlessly out of the box, an illustrative example can be found here: ",(0,s.jsx)(i.a,{href:"https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak",children:"IdP Initiated Login with Keycloak"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["We will also attempt to create a local setup for this use case. To do this we will follow the exact same steps from the ",(0,s.jsx)(i.a,{href:"#idp-initiated-example-setup",children:"section"})," above, until we reach the step ",(0,s.jsx)(i.a,{href:"#service-provider-application",children:"Service Provider Application"}),". From there we will deviate."]}),"\n",(0,s.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant User\n    participant Okta as Identity Provider (Okta)\n    participant KeycloakBroker as Keycloak Identity Broker\n    participant KeycloakClient as Keycloak SAML Client\n    participant KeycloakAdminConsole as Keycloak Admin Console (SP)\n\n\n    User->>Okta: Authenticates with IdP\n    Okta->>KeycloakBroker: SAML AuthnRequest\n    KeycloakBroker->>KeycloakClient: SAML AuthnRequest\n    KeycloakClient->>KeycloakBroker: SAML Response (assertion)\n    KeycloakBroker->>KeycloakAdminConsole: SAML Response (assertion)\n    KeycloakAdminConsole->>KeycloakAdminConsole: GET SAML response (assertion)\n    KeycloakAdminConsole->>User: Logs user in"}),"\n",(0,s.jsx)(i.h3,{id:"service-provider-application-1",children:"Service Provider Application"}),"\n",(0,s.jsxs)(i.p,{children:["In this case the service provider application will 'talk' OIDC. As a simple example we can use the realm ",(0,s.jsx)(i.code,{children:"security-admin-console"})," as the final client since it uses OIDC. A important thing to keep in mind is that for the client we will need to set a ",(0,s.jsx)(i.code,{children:"Home URL"}),". In our case is the realm provisioned ",(0,s.jsx)(i.code,{children:"http://localhost:8080/admin/test-realm/console/"}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Security-admin-console-client",src:t(81059).A+"",width:"2803",height:"1450"})}),"\n",(0,s.jsx)(i.h3,{id:"keycloak-realm-client-1",children:"Keycloak Realm Client"}),"\n",(0,s.jsxs)(i.p,{children:["We need to create new SAML 2.0 client in ",(0,s.jsx)(i.code,{children:"test-realm"}),". Same as the configuration above we will set IdP-Initiated SSO URL name: ",(0,s.jsx)(i.code,{children:"okta-client"})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Generic client",src:t(43170).A+"",width:"1127",height:"699"})}),"\n",(0,s.jsxs)(i.p,{children:["Now comes the interesting part. Since the SAML client we created will initialize the user session in Keycloak, we will need a mechanism to attach this session to an OIDC client. We can accomplish this with a simple redirect to the OIDC application. For that, we may consider using the ",(0,s.jsx)(i.code,{children:"SAML Redirect Binding"}),", which uses a ",(0,s.jsx)(i.code,{children:"GET"})," request instead of a ",(0,s.jsx)(i.code,{children:"POST"})," to forward the SAML assertion."]}),"\n",(0,s.jsxs)(i.p,{children:["We can associate our client application ",(0,s.jsx)(i.code,{children:"Home URL"})," with this configuration."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Client redirect binding",src:t(26749).A+"",width:"2426",height:"1282"})}),"\n",(0,s.jsxs)(i.p,{children:["Do not forget to turn of the ",(0,s.jsx)(i.code,{children:"Force POST binding"})," toggle in the SAML client general settings."]}),"\n",(0,s.jsxs)(i.p,{children:["After doing all these configs we can proceed with the ",(0,s.jsx)(i.a,{href:"#testing",children:"Testing"})," phase. What we are going to observe is that Keycloak created a twin session in the ",(0,s.jsx)(i.code,{children:"security-admin-console"})," client for our user."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Twin session oidc client",src:t(17552).A+"",width:"2348",height:"586"})}),"\n",(0,s.jsxs)(i.p,{children:["Behind this configuration stands one magic piece which ensure the flow is going to work, the 'Cookie' authenticator. It ensures that the session for any ",(0,s.jsx)(i.code,{children:"client"})," we request is first looked up in the Keycloak cookie. If the Authenticator is turned of the flow will no longer work. Our advice is to not rely on this configuration if your application will not allow Keycloak cookies."]}),"\n",(0,s.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(i.p,{children:["In this post, we explored the setup of an IdP-initiated flow with support for both ",(0,s.jsx)(i.a,{href:"#idp-initiated-example-setup",children:"SAML"})," and ",(0,s.jsx)(i.a,{href:"#idp-initiated-flow-redirects-to-a-oidc-application",children:"OIDC"})," applications. We also discussed some of the challenges associated with using the IdP-initiated flow and ways to address them."]}),"\n",(0,s.jsx)(i.p,{children:"We hope this has shed some light on the intricate world of Keycloak configuration and assisted you in finding a solution to your problems."}),"\n",(0,s.jsxs)(i.p,{children:["If you have any questions or would like to discuss this further, please feel free to reach out to us at ",(0,s.jsx)(i.a,{href:"mailto:sales@phasetwo.io",children:"sales@phasetwo.io"}),". We are always happy to help and share our knowledge with the community."]}),"\n",(0,s.jsx)(i.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.lisenet.com/2020/keycloak-with-okta-idp-initiated-sso-login/",children:"Keycloak with Okta IdP Initiated Login"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.lumilinks.com/blog/idp-initiated-login-with-keycloak",children:"IdP Initiated Login with Keycloak"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#idp-initiated-login",children:"Server Administration Guide"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://groups.google.com/g/keycloak-user/c/s_sVxPGLhCs?pli=1",children:"IdP Initiated Login"})}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},63545:(e,i,t)=>{t.d(i,{Ay:()=>r,RM:()=>a});var n=t(74848),s=t(28453);const a=[];function o(e){const i={a:"a",admonition:"admonition",img:"img",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsx)(i.p,{children:"If you already have a functioning Keycloak instance, you can skip to the next section."})}),"\n",(0,n.jsxs)(i.p,{children:['Rather than trying to set up a "from scratch" instance of Keycloak, we\'re going to short-circuit that process by leveraging a free ',(0,n.jsx)(i.a,{href:"https://phasetwo.io/",children:"Phase Two Starter"})," instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Visit the sign-up ",(0,n.jsx)(i.a,{href:"https://phasetwo.io/dashboard/",children:"page"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Enter an email, use a Github account, or use an existing Google account to register."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Phase Two Register",src:t(90865).A+"",width:"3000",height:"1763"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Phase Two Email Magic Link Register",src:t(57117).A+"",width:"3000",height:"857"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["After creating an account, a ",(0,n.jsx)(i.a,{href:"https://www.youtube.com/watch?v=ZTFlc-3pG1M",children:"realm"})," is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:'Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.'}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Phase Two Create Shared Deployment",src:t(12776).A+"",width:"3000",height:"1541"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:'After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.'}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Phase Two Open Console Keycloak Admin UI",src:t(34724).A+"",width:"3000",height:"1311"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance."})]})}function r(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},67655:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/generic-client-advance-651923735124e7fd4758640adcb5f0a2.png"},70048:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/client-saml-response-15d59339a84784e6a104af3c90e797f2.png"},74619:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/identity-provider-setup-a5ecb5aad696ad5838454c6f1f47ad4e.png"},81059:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/security-admin-console-client-42b280c20b25d84b8f34b222dbc3440c.png"},90865:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/register-c45850867ce85096a398bb0dfab9df4d.png"},95644:e=>{e.exports=JSON.parse('{"permalink":"/blog/keycloak-saml-identity-provider-idp-initiated-flow-with-okta","source":"@site/blog/2025-02-25-saml-idp-initiated-flow.mdx","title":"Keycloak SAML Identity Provider (IdP) Initiated Flow with Okta","description":"IdP Initiated Flow","date":"2025-02-25T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"okta","permalink":"/blog/tags/okta"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"},{"inline":true,"label":"idp-initiated","permalink":"/blog/tags/idp-initiated"},{"inline":true,"label":"guide","permalink":"/blog/tags/guide"}],"readingTime":9.48,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Keycloak SAML Identity Provider (IdP) Initiated Flow with Okta","slug":"keycloak-saml-identity-provider-idp-initiated-flow-with-okta","date":"2025-02-25T00:00:00.000Z","authors":"phasetwo","tags":["phase_two","open_source","okta","authentication","authorization","keycloak","sso","idp-initiated","guide"]},"unlisted":false,"prevItem":{"title":"SAML, Simplified.","permalink":"/blog/introduction-to-simple-saml"},"nextItem":{"title":"Managed Keycloak Hosting - Picking a Provider","permalink":"/blog/managed-keycloak-hosting"}}')},95722:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/okta-saml-response-74014ed4eb76ebc505dabf05910346f0.png"}}]);