"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[6174],{41667:function(e,t,a){a.r(t),a.d(t,{assets:function(){return v},contentTitle:function(){return g},default:function(){return b},frontMatter:function(){return u},metadata:function(){return y},toc:function(){return f}});var n=a(83117),i=a(80102),o=(a(67294),a(3905)),s=a(26389),r=a(94891),p=a(75190),l=a(47507),m=a(24310),c=a(63303),d=(a(75035),a(85162)),h=["components"],u={id:"get-organization-invitations",title:"Get organization invitations",description:"Get a paginated list of invitations to an organization, using an optional search query for email address.",sidebar_label:"Get organization invitations",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Invitations"],operationId:"getOrganizationInvitations",description:"Get a paginated list of invitations to an organization, using an optional search query for email address.",parameters:[{in:"query",name:"search",schema:{type:"string"},style:"form"},{in:"query",name:"first",schema:{type:"integer",format:"int32"},style:"form"},{in:"query",name:"max",schema:{type:"integer",format:"int32"},style:"form"},{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"}],responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},email:{type:"string"},inviterId:{type:"string"},organizationId:{type:"string"},roles:{type:"array",items:{type:"string"}}},title:"InvitationRepresentation"}}}}}},method:"get",path:"/{realm}/orgs/{orgId}/invitations",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Get organization invitations",description:{content:"Get a paginated list of invitations to an organization, using an optional search query for email address.",type:"text/plain"},url:{path:[":realm","orgs",":orgId","invitations"],host:["{{baseUrl}}"],query:[{disabled:!1,key:"search",value:""},{disabled:!1,key:"first",value:""},{disabled:!1,key:"max",value:""}],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},g=void 0,y={unversionedId:"get-organization-invitations",id:"get-organization-invitations",title:"Get organization invitations",description:"Get a paginated list of invitations to an organization, using an optional search query for email address.",source:"@site/api/get-organization-invitations.api.mdx",sourceDirName:".",slug:"/get-organization-invitations",permalink:"/api/get-organization-invitations",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"get-organization-invitations",title:"Get organization invitations",description:"Get a paginated list of invitations to an organization, using an optional search query for email address.",sidebar_label:"Get organization invitations",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Invitations"],operationId:"getOrganizationInvitations",description:"Get a paginated list of invitations to an organization, using an optional search query for email address.",parameters:[{in:"query",name:"search",schema:{type:"string"},style:"form"},{in:"query",name:"first",schema:{type:"integer",format:"int32"},style:"form"},{in:"query",name:"max",schema:{type:"integer",format:"int32"},style:"form"},{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"}],responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},email:{type:"string"},inviterId:{type:"string"},organizationId:{type:"string"},roles:{type:"array",items:{type:"string"}}},title:"InvitationRepresentation"}}}}}},method:"get",path:"/{realm}/orgs/{orgId}/invitations",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Get organization invitations",description:{content:"Get a paginated list of invitations to an organization, using an optional search query for email address.",type:"text/plain"},url:{path:[":realm","orgs",":orgId","invitations"],host:["{{baseUrl}}"],query:[{disabled:!1,key:"search",value:""},{disabled:!1,key:"first",value:""},{disabled:!1,key:"max",value:""}],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},sidebar:"api",previous:{title:"Create an invitation to an organization",permalink:"/api/add-organization-invitation"},next:{title:"Remove a pending invitation",permalink:"/api/remove-organization-invitation"}},v={},f=[{value:"Get organization invitations",id:"get-organization-invitations",level:2}],k={toc:f};function b(e){var t=e.components,a=(0,i.Z)(e,h);return(0,o.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"get-organization-invitations"},"Get organization invitations"),(0,o.kt)("p",null,"Get a paginated list of invitations to an organization, using an optional search query for email address."),(0,o.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,o.kt)("summary",{style:{}},(0,o.kt)("strong",null,"Path Parameters")),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)(p.Z,{className:"paramsItem",param:{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,o.kt)(p.Z,{className:"paramsItem",param:{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"})))),(0,o.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,o.kt)("summary",{style:{}},(0,o.kt)("strong",null,"Query Parameters")),(0,o.kt)("div",null,(0,o.kt)("ul",null,(0,o.kt)(p.Z,{className:"paramsItem",param:{in:"query",name:"search",schema:{type:"string"},style:"form"},mdxType:"ParamsItem"}),(0,o.kt)(p.Z,{className:"paramsItem",param:{in:"query",name:"first",schema:{type:"integer",format:"int32"},style:"form"},mdxType:"ParamsItem"}),(0,o.kt)(p.Z,{className:"paramsItem",param:{in:"query",name:"max",schema:{type:"integer",format:"int32"},style:"form"},mdxType:"ParamsItem"})))),(0,o.kt)("div",null,(0,o.kt)(s.Z,{mdxType:"ApiTabs"},(0,o.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,o.kt)("div",null,(0,o.kt)("p",null,"success")),(0,o.kt)("div",null,(0,o.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,o.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,o.kt)(c.Z,{mdxType:"SchemaTabs"},(0,o.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,o.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,o.kt)("summary",{style:{textAlign:"left"}},(0,o.kt)("strong",null,"Schema")),(0,o.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,o.kt)("ul",{style:{marginLeft:"1rem"}},(0,o.kt)("li",null,(0,o.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,o.kt)(m.Z,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,o.kt)(m.Z,{collapsible:!1,name:"email",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,o.kt)(m.Z,{collapsible:!1,name:"inviterId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,o.kt)(m.Z,{collapsible:!1,name:"organizationId",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,o.kt)(m.Z,{collapsible:!1,name:"roles",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,o.kt)("li",null,(0,o.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,o.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,o.kt)(l.Z,{responseExample:'[\n  {\n    "id": "string",\n    "email": "string",\n    "inviterId": "string",\n    "organizationId": "string",\n    "roles": [\n      "string"\n    ]\n  }\n]',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);