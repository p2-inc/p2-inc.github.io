"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[7593],{16334:function(e,t,a){a.r(t),a.d(t,{assets:function(){return g},contentTitle:function(){return h},default:function(){return b},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return y}});var n=a(83117),i=(a(67294),a(3905)),s=a(26389),r=a(94891),o=a(75190),p=a(47507),l=a(24310),m=a(63303),c=(a(75035),a(85162));const d={id:"get-user-organization-roles",title:"Get users with this organization role",description:"Get users with this organization role",sidebar_label:"Get users with this organization role",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Roles"],operationId:"getUserOrganizationRoles",responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{attributes:{type:"object",additionalProperties:!0},createdTimestamp:{type:"integer",format:"int64"},email:{type:"string"},emailVerified:{type:"boolean"},enabled:{type:"boolean"},firstName:{type:"string"},groups:{type:"array",items:{type:"string"}},id:{type:"string"},lastName:{type:"string"},username:{type:"string"}},title:"UserRepresentation"}}}}}},description:"Get users with this organization role",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"name",description:"organization role name",required:!0,schema:{type:"string"},style:"simple"}],method:"get",path:"/{realm}/orgs/{orgId}/roles/{name}/users",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Get users with this organization role",description:{type:"text/plain"},url:{path:[":realm","orgs",":orgId","roles",":name","users"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"},{disabled:!1,description:{content:"(Required) organization role name",type:"text/plain"},type:"any",value:"",key:"name"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},h=void 0,u={unversionedId:"get-user-organization-roles",id:"get-user-organization-roles",title:"Get users with this organization role",description:"Get users with this organization role",source:"@site/api/get-user-organization-roles.api.mdx",sourceDirName:".",slug:"/get-user-organization-roles",permalink:"/api/get-user-organization-roles",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"get-user-organization-roles",title:"Get users with this organization role",description:"Get users with this organization role",sidebar_label:"Get users with this organization role",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Organization Roles"],operationId:"getUserOrganizationRoles",responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{attributes:{type:"object",additionalProperties:!0},createdTimestamp:{type:"integer",format:"int64"},email:{type:"string"},emailVerified:{type:"boolean"},enabled:{type:"boolean"},firstName:{type:"string"},groups:{type:"array",items:{type:"string"}},id:{type:"string"},lastName:{type:"string"},username:{type:"string"}},title:"UserRepresentation"}}}}}},description:"Get users with this organization role",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"name",description:"organization role name",required:!0,schema:{type:"string"},style:"simple"}],method:"get",path:"/{realm}/orgs/{orgId}/roles/{name}/users",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"Get users with this organization role",description:{type:"text/plain"},url:{path:[":realm","orgs",":orgId","roles",":name","users"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) organization id",type:"text/plain"},type:"any",value:"",key:"orgId"},{disabled:!1,description:{content:"(Required) organization role name",type:"text/plain"},type:"any",value:"",key:"name"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},sidebar:"api",previous:{title:"Delete this organization role",permalink:"/api/delete-organization-role"},next:{title:"Check if a user has an organization role",permalink:"/api/check-user-organization-role"}},g={},y=[{value:"Get users with this organization role",id:"get-users-with-this-organization-role",level:2}],k={toc:y};function b(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"get-users-with-this-organization-role"},"Get users with this organization role"),(0,i.kt)("p",null,"Get users with this organization role"),(0,i.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"Path Parameters")),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)(o.Z,{className:"paramsItem",param:{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,i.kt)(o.Z,{className:"paramsItem",param:{in:"path",name:"orgId",description:"organization id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,i.kt)(o.Z,{className:"paramsItem",param:{in:"path",name:"name",description:"organization role name",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"})))),(0,i.kt)("div",null,(0,i.kt)(s.Z,{mdxType:"ApiTabs"},(0,i.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"success")),(0,i.kt)("div",null,(0,i.kt)(r.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,i.kt)(m.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"attributes"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}}))),(0,i.kt)(l.Z,{collapsible:!1,name:"createdTimestamp",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"email",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"emailVerified",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"enabled",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"firstName",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"groups",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"lastName",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"username",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(p.Z,{responseExample:'[\n  {\n    "attributes": {},\n    "createdTimestamp": 0,\n    "email": "string",\n    "emailVerified": true,\n    "enabled": true,\n    "firstName": "string",\n    "groups": [\n      "string"\n    ],\n    "id": "string",\n    "lastName": "string",\n    "username": "string"\n  }\n]',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);