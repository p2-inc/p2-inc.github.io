"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[2345],{94869:function(e,t,a){a.r(t),a.d(t,{assets:function(){return f},contentTitle:function(){return y},default:function(){return b},frontMatter:function(){return u},metadata:function(){return g},toc:function(){return k}});var n=a(83117),i=a(80102),s=(a(67294),a(3905)),r=a(26389),o=a(94891),p=a(75190),l=a(47507),c=a(24310),m=a(63303),d=(a(75035),a(85162)),h=["components"],u={id:"list-organizations-for-the-given-user",title:"List organizations for the given user",description:"List organizations for the given user",sidebar_label:"List organizations for the given user",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Users","Organizations"],responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"},url:{type:"string"},realm:{type:"string"},domains:{type:"array",items:{type:"string"}},attributes:{type:"object",additionalProperties:{type:"array",items:{type:"string"}}}},title:"OrganizationRepresentation"}}}}}},description:"List organizations for the given user",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"}],method:"get",path:"/{realm}/users/{userId}/orgs",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"List organizations for the given user",description:{type:"text/plain"},url:{path:[":realm","users",":userId","orgs"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) user id",type:"text/plain"},type:"any",value:"",key:"userId"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},y=void 0,g={unversionedId:"list-organizations-for-the-given-user",id:"list-organizations-for-the-given-user",title:"List organizations for the given user",description:"List organizations for the given user",source:"@site/api/list-organizations-for-the-given-user.api.mdx",sourceDirName:".",slug:"/list-organizations-for-the-given-user",permalink:"/api/list-organizations-for-the-given-user",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"list-organizations-for-the-given-user",title:"List organizations for the given user",description:"List organizations for the given user",sidebar_label:"List organizations for the given user",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Users","Organizations"],responses:{200:{description:"success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"},url:{type:"string"},realm:{type:"string"},domains:{type:"array",items:{type:"string"}},attributes:{type:"object",additionalProperties:{type:"array",items:{type:"string"}}}},title:"OrganizationRepresentation"}}}}}},description:"List organizations for the given user",parameters:[{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"}],method:"get",path:"/{realm}/users/{userId}/orgs",servers:[{url:"{protocol}://{host}{port}/auth/realms",variables:{host:{enum:["app.phasetwo.io","localhost"],default:"app.phasetwo.io",description:"API host"},port:{enum:["","8081"],default:"",description:"API port"},protocol:{enum:["http","https"],default:"https"}}}],security:[{access_token:[]}],securitySchemes:{access_token:{type:"http",scheme:"bearer",bearerFormat:""}},info:{title:"Phase Two Admin REST API",description:"This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/17.0/rest-api/index.html).\n\n### Base URI format\nPaths specified in the documentation are relative to the the base URI.\n- Format: `https://<host>:<port>/auth/realms`\n- Example: `https://app.phasetwo.io/auth/realms`\n\n### Authentication\nAuthentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.\n\nIt is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.\n\n#### Client credentials grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1\n```\n\n#### Password grant example\n```\nPOST /auth/realms/test-realm/protocol/openid-connect/token\nHost: app.phasetwo.io\nAccept: application/json\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli\n```\n\n### SDKs\nModern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/master/openapi.yaml).\n\n| Language | Library |\n| --- | --- |\n| Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java |\n| JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js |\n| Python | https://github.com/p2-inc/phasetwo-python |\n",version:"v1"},postman:{name:"List organizations for the given user",description:{type:"text/plain"},url:{path:[":realm","users",":userId","orgs"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) realm name (not id!)",type:"text/plain"},type:"any",value:"",key:"realm"},{disabled:!1,description:{content:"(Required) user id",type:"text/plain"},type:"any",value:"",key:"userId"}]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/phase-two-admin-rest-api",custom_edit_url:null},sidebar:"api",previous:{title:"Create a link for the organization's admin portal",permalink:"/api/create-portal-link"},next:{title:"Organization Memberships",permalink:"/api/category/i/organization-memberships"}},f={},k=[{value:"List organizations for the given user",id:"list-organizations-for-the-given-user",level:2}],v={toc:k};function b(e){var t=e.components,a=(0,i.Z)(e,h);return(0,s.kt)("wrapper",(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"list-organizations-for-the-given-user"},"List organizations for the given user"),(0,s.kt)("p",null,"List organizations for the given user"),(0,s.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Path Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(p.Z,{className:"paramsItem",param:{in:"path",name:"realm",description:"realm name (not id!)",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"}),(0,s.kt)(p.Z,{className:"paramsItem",param:{in:"path",name:"userId",description:"user id",required:!0,schema:{type:"string"},style:"simple"},mdxType:"ParamsItem"})))),(0,s.kt)("div",null,(0,s.kt)(r.Z,{mdxType:"ApiTabs"},(0,s.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"success")),(0,s.kt)("div",null,(0,s.kt)(o.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(m.Z,{mdxType:"SchemaTabs"},(0,s.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(c.Z,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"name",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"displayName",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"realm",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"domains",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"attributes"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"property name*"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)("li",null,(0,s.kt)("div",null,(0,s.kt)("strong",null,"string"))),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,s.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(l.Z,{responseExample:'[\n  {\n    "id": "string",\n    "name": "string",\n    "displayName": "string",\n    "url": "string",\n    "realm": "string",\n    "domains": [\n      "string"\n    ],\n    "attributes": {}\n  }\n]',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);