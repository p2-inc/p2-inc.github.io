"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[9389],{78333:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(74848),o=t(28453);const i={id:"django",title:"Django"},r=void 0,s={id:"securing-applications/django",title:"Django",description:"The following could be applied to an existing Django application, but we have chosen to use the excellent tutorial application built by Mozilla as our example. If you aren't yet familiar with Django, we encourage you to follow the tutorial there.",source:"@site/docs/securing-applications/django.md",sourceDirName:"securing-applications",slug:"/securing-applications/django",permalink:"/docs/securing-applications/django",draft:!1,unlisted:!1,editUrl:"https://github.com/p2-inc/phasetwo-docs/tree/main/docs/securing-applications/django.md",tags:[],version:"current",frontMatter:{id:"django",title:"Django"},sidebar:"docs",previous:{title:"Securing Applications",permalink:"/docs/securing-applications/"},next:{title:"SpringBoot",permalink:"/docs/securing-applications/springboot"}},l={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Install and configure the Django OIDC library",id:"install-and-configure-the-django-oidc-library",level:2},{value:"Using it in your app",id:"using-it-in-your-app",level:2},{value:"Protect your views",id:"protect-your-views",level:3},{value:"Accessing user information",id:"accessing-user-information",level:3},{value:"Use Username rather than Email",id:"use-username-rather-than-email",level:4},{value:"Logging out",id:"logging-out",level:3},{value:"Add support for Django Rest Framework",id:"add-support-for-django-rest-framework",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The following could be applied to an existing Django application, but we have chosen to use the excellent tutorial application built by ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django",children:"Mozilla"})," as our example. If you aren't yet familiar with Django, we encourage you to follow the tutorial there."]}),"\n",(0,a.jsx)(n.p,{children:"The completed code for that tutorial is available in their GitHub repository. We'll clone it to get started."}),"\n",(0,a.jsxs)(n.p,{children:["A full ",(0,a.jsx)(n.a,{href:"https://github.com/p2-inc/examples/tree/main/frameworks/django",children:"Django example"})," is available."]}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(n.p,{children:"To get this project up and running locally on your computer:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Set up the ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/development_environment",children:"Python development environment"}),".\nWe recommend using a Python virtual environment."]}),"\n",(0,a.jsxs)(n.li,{children:["Assuming you have Python setup, run the following commands (if you're on Windows you may use ",(0,a.jsx)(n.code,{children:"py"})," or ",(0,a.jsx)(n.code,{children:"py -3"})," instead of ",(0,a.jsx)(n.code,{children:"python"})," to start Python):","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"pip install -r requirements.txt\npython manage.py makemigrations\npython manage.py migrate\npython manage.py collectstatic\npython manage.py test # Run the standard tests. These should all pass.\npython manage.py createsuperuser # Create a superuser\npython manage.py runserver\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Open a browser to ",(0,a.jsx)(n.code,{children:"http://127.0.0.1:8000/admin/"})," to open the admin site"]}),"\n",(0,a.jsx)(n.li,{children:"Create a few test objects of each type."}),"\n",(0,a.jsxs)(n.li,{children:["Open tab to ",(0,a.jsx)(n.code,{children:"http://127.0.0.1:8000"})," to see the main site, with your new objects."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"install-and-configure-the-django-oidc-library",children:"Install and configure the Django OIDC library"}),"\n",(0,a.jsx)(n.p,{children:"Now that we've installed and configured Keycloak, we need to setup Django to replace the native authentication method provided by the framework. The first task is to install a library that is compatible with Keycloak's OIDC implementation."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://mozilla-django-oidc.readthedocs.io/",children:"mozilla-django-oidc"})," library provides an easy way to integrate Keycloak (or any OpenID Connect-compliant identity provider) with your Django app. It abstracts many of the complexities of integrating authentication and authorization. Here's how you can set it up:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Install the Package"}),":\nInstall the ",(0,a.jsx)(n.code,{children:"mozilla-django-oidc"})," package using pip:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install mozilla-django-oidc\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Configure Django Settings"}),":\nUpdate your Django app's ",(0,a.jsx)(n.code,{children:"settings.py"})," to include the necessary configurations for ",(0,a.jsx)(n.code,{children:"mozilla-django-oidc"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"INSTALLED_APPS = [\n    # ...\n    'django.contrib.auth',\n    'mozilla_django_oidc',  # Load after django.contrib.auth\n    # ...\n]\n\nAUTHENTICATION_BACKENDS = (\n    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',\n    # ...\n)\n\nOIDC_RP_CLIENT_ID = 'your-client-id'\nOIDC_RP_CLIENT_SECRET = 'your-client-secret'\nOIDC_OP_AUTHORIZATION_ENDPOINT = 'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/auth'\nOIDC_OP_TOKEN_ENDPOINT = 'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/token'\nOIDC_OP_USER_ENDPOINT = 'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/userinfo'\nOIDC_OP_JWKS_ENDPOINT = 'https://keycloak-url/auth/realms/your-realm/protocol/openid-connect/certs'\nOIDC_RP_SIGN_ALGO = 'RS256'\n\nLOGIN_URL = 'oidc_authentication_init'\nLOGOUT_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"your-client-id"}),", ",(0,a.jsx)(n.code,{children:"your-client-secret"}),", and the Keycloak URLs with your actual Keycloak configurations."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Add URLs"}),":\nUpdate your Django app's ",(0,a.jsx)(n.code,{children:"urls.py"})," to include the authentication URLs provided by ",(0,a.jsx)(n.code,{children:"mozilla-django-oidc"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"urlpatterns += [\n    path('oidc/', include('mozilla_django_oidc.urls')),\n]\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"using-it-in-your-app",children:"Using it in your app"}),"\n",(0,a.jsx)(n.h3,{id:"protect-your-views",children:"Protect your views"}),"\n",(0,a.jsxs)(n.p,{children:["Use Decorators for Access Control. You can now use the ",(0,a.jsx)(n.code,{children:"@oidc_protected"})," decorator to protect views that require authentication and potentially specific roles:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from mozilla_django_oidc.decorators import oidc_protected\n\n@oidc_protected\ndef protected_view(request):\n    # Your view logic\n"})}),"\n",(0,a.jsx)(n.h3,{id:"accessing-user-information",children:"Accessing user information"}),"\n",(0,a.jsxs)(n.p,{children:["You can access user information after authentication using the ",(0,a.jsx)(n.code,{children:"request.oidc_user"})," attribute. For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def profile_view(request):\n    user_info = request.oidc_user.userinfo\n    # Access user_info['sub'], user_info['email'], etc.\n    # Your view logic\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By default, ",(0,a.jsx)(n.code,{children:"mozilla-django-oidc"})," looks up a Django user matching the email field to the email address returned in the user info data from Keycloak."]}),"\n",(0,a.jsxs)(n.p,{children:["If a user logs into your site and doesn\u2019t already have an account, by default, ",(0,a.jsx)(n.code,{children:"mozilla-django-oidc"})," will create a new Django user account. It will create the User instance filling in the username (hash of the email address) and email fields."]}),"\n",(0,a.jsx)(n.h4,{id:"use-username-rather-than-email",children:"Use Username rather than Email"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"mozilla-django-oidc"})," defaults to setting up Django users using the email address as the user name from keycloak was required. Fortunately, ",(0,a.jsx)(n.code,{children:"preferred_username"})," is set up by default in Keycloak as a claim. The claim can used by overriding the ",(0,a.jsx)(n.code,{children:"OIDCAuthenticationBackend"})," class in ",(0,a.jsx)(n.code,{children:"mozilla_django_oidc.auth"})," and referring to this in ",(0,a.jsx)(n.code,{children:"AUTHENTICATION_BACKENDS"})," as below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\n# Classes to override default OIDCAuthenticationBackend (Keycloak authentication)\nfrom mozilla_django_oidc.auth import OIDCAuthenticationBackend\n\nclass KeycloakOIDCAuthenticationBackend(OIDCAuthenticationBackend):\n\n def create_user(self, claims):\n     \"\"\" Overrides Authentication Backend so that Django users are\n         created with the keycloak preferred_username.\n         If nothing found matching the email, then try the username.\n     \"\"\"\n     user = super(KeycloakOIDCAuthenticationBackend, self).create_user(claims)\n     user.first_name = claims.get('given_name', '')\n     user.last_name = claims.get('family_name', '')\n     user.email = claims.get('email')\n     user.username = claims.get('preferred_username')\n     user.save()\n     return user\n\n def filter_users_by_claims(self, claims):\n     \"\"\" Return all users matching the specified email.\n         If nothing found matching the email, then try the username\n     \"\"\"\n     email = claims.get('email')\n     preferred_username = claims.get('preferred_username')\n\n     if not email:\n         return self.UserModel.objects.none()\n     users = self.UserModel.objects.filter(email__iexact=email)\n\n     if len(users) < 1:\n         if not preferred_username:\n             return self.UserModel.objects.none()\n         users = self.UserModel.objects.filter(username__iexact=preferred_username)\n     return users\n\n def update_user(self, user, claims):\n     user.first_name = claims.get('given_name', '')\n     user.last_name = claims.get('family_name', '')\n     user.email = claims.get('email')\n     user.username = claims.get('preferred_username')\n     user.save()\n     return user\n"})}),"\n",(0,a.jsx)(n.p,{children:"In settings.py, overide the new library you have just added in AUTHENTICATION_BACKENDS :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:' # mozilla_django_oidc - Keycloak authentication\n "fragalysis.auth.KeycloakOIDCAuthenticationBackend",\n'})}),"\n",(0,a.jsx)(n.h3,{id:"logging-out",children:"Logging out"}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"@oidc_logout"})," decorator to log the user out of both your app and Keycloak:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from mozilla_django_oidc.decorators import oidc_logout\n\n@oidc_logout\ndef logout_view(request):\n    # Your logout view logic\n"})}),"\n",(0,a.jsx)(n.h2,{id:"add-support-for-django-rest-framework",children:"Add support for Django Rest Framework"}),"\n",(0,a.jsx)(n.p,{children:"Django Rest Framework (DRF) is a flexible toolkit built on top of Django, specifically designed for building RESTful APIs."}),"\n",(0,a.jsx)(n.p,{children:"If you want DRF to authenticate users based on an OAuth access token provided in the Authorization header, you can use the DRF-specific authentication class which ships with the package."}),"\n",(0,a.jsx)(n.p,{children:"Add this to your settings:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        # other authentication classes, if needed\n    ],\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note that this only takes care of authenticating against an access token, and provides no options to create or renew tokens."}),"\n",(0,a.jsx)(n.p,{children:"If you\u2019ve created a custom Django OIDCAuthenticationBackend and added that to your AUTHENTICATION_BACKENDS, the DRF class should be smart enough to figure that out. Alternatively, you can manually set the OIDC backend to use:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"OIDC_DRF_AUTH_BACKEND = 'mozilla_django_oidc.auth.OIDCAuthenticationBackend'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(96540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);