"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[1343],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(a),h=i,k=m["".concat(p,".").concat(h)]||m[h]||u[h]||o;return a?n.createElement(k,r(r({ref:t},c),{},{components:a})):n.createElement(k,r({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6062:function(e,t,a){a.d(t,{ZP:function(){return r}});var n=a(83117),i=(a(67294),a(3905));const o={toc:[]};function r(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is bad practice to use your Admin user to sign in to an Application.")),(0,i.kt)("p",null,"Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open the Admin UI by clicking ",(0,i.kt)("strong",{parentName:"li"},"Open Console")," in the Phase Two Dashboard."),(0,i.kt)("li",{parentName:"ol"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Users")," in the menu."),(0,i.kt)("li",{parentName:"ol"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Add user"),"."),(0,i.kt)("li",{parentName:"ol"},"Fill out the information for Email, First name, and Last name. Click ",(0,i.kt)("strong",{parentName:"li"},"Create"),"."),(0,i.kt)("li",{parentName:"ol"},"We will now set the password for this user manually. Click ",(0,i.kt)("strong",{parentName:"li"},"Credentials")," (tab) and click ",(0,i.kt)("strong",{parentName:"li"},"Set Password"),'. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".'),(0,i.kt)("li",{parentName:"ol"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Save")," and confirm the password by clicking ",(0,i.kt)("strong",{parentName:"li"},"Save password"))))}r.isMDXComponent=!0},47842:function(e,t,a){a.d(t,{ZP:function(){return r}});var n=a(83117),i=(a(67294),a(3905));const o={toc:[{value:"OIDC Config",id:"oidc-config",level:3}]};function r(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We need to create a ",(0,i.kt)("a",{parentName:"p",href:"https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide"},"OpenID Connect")," Client in Keycloak for the app to communicate with. Keycloak's ",(0,i.kt)("a",{parentName:"p",href:"https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients"},"docs")," provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the Admin UI by clicking ",(0,i.kt)("strong",{parentName:"p"},"Open Console")," in the Phase Two Dashboard.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Clients")," in the menu.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Create client"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Leave ",(0,i.kt)("strong",{parentName:"p"},"Client type")," set to ",(0,i.kt)("strong",{parentName:"p"},"OpenID Connect"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enter a ",(0,i.kt)("strong",{parentName:"p"},"Client ID"),". This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Supply a ",(0,i.kt)("strong",{parentName:"p"},"Name")," for the client.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Next"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Keycloak OIDC Create Client General Settings",src:a(26212).Z,width:"3000",height:"2072"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Under the Capability Config section, leave the defaults as selected. This can be configured further later."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Client authentication to On."),(0,i.kt)("li",{parentName:"ul"},"Authorization to Off."),(0,i.kt)("li",{parentName:"ul"},"Standard flow checked. Direct access grants checked. All other items unchecked.")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Keycloak OIDC Create Client Capability Config with Authentication",src:a(74669).Z,width:"3000",height:"1909"})),(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Next"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Valid redirect URI")," (allows redirect back to application)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"http://localhost:3000/*\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Web origins")," (allows for Token auth call)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"http://localhost:3000\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"URI and Origin Details"),(0,i.kt)("p",{parentName:"li"},"The choice of ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost")," is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Save")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Keycloak OIDC Create Login Settings",src:a(1375).Z,width:"3000",height:"2074"})))),(0,i.kt)("h3",{id:"oidc-config"},"OIDC Config"),(0,i.kt)("p",null,"We will need values to configure our application. To get these values follow the instructions below."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("strong",{parentName:"p"},"Clients")," in the menu.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Find the Client you just created and click on it. In the top right click the ",(0,i.kt)("strong",{parentName:"p"},"Action")," dropdown and select ",(0,i.kt)("strong",{parentName:"p"},"Download adapter config"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Select ",(0,i.kt)("strong",{parentName:"p"},"Keycloak OIDC JSON")," in the format option. The details section will populate with the details we will need."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Note the ",(0,i.kt)("inlineCode",{parentName:"li"},"realm"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"auth-server-url"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"resource")," values.")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Keycloak OIDC Create Client Adapter Config",src:a(69245).Z,width:"3000",height:"2081"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You also need to copy the ",(0,i.kt)("strong",{parentName:"p"},"Client secret")," in the ",(0,i.kt)("strong",{parentName:"p"},"Credential")," tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Keycloak OIDC Create Client Client Secret",src:a(20477).Z,width:"3492",height:"2212"})))))}r.isMDXComponent=!0},77546:function(e,t,a){a.d(t,{ZP:function(){return r}});var n=a(83117),i=(a(67294),a(3905));const o={toc:[]};function r(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you already have a functioning Keycloak instance, you can skip to the next section.")),(0,i.kt)("p",null,'Rather than trying to set up a "from scratch" instance of Keycloak, we\'re going to short-circuit that process by leveraging a free ',(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/"},"Phase Two Starter")," instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Visit the sign-up ",(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/dashboard/"},"page"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Enter an email, use a Github account, or use an existing Google account to register."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Phase Two Register",src:a(70618).Z,width:"3000",height:"1763"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Phase Two Email Magic Link Register",src:a(61175).Z,width:"3000",height:"857"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"After creating an account, a ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=ZTFlc-3pG1M"},"realm")," is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.'),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Phase Two Create Shared Deployment",src:a(22983).Z,width:"3000",height:"1541"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.'),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Phase Two Open Console Keycloak Admin UI",src:a(52787).Z,width:"3000",height:"1311"})))),(0,i.kt)("p",null,"At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance."))}r.isMDXComponent=!0},60427:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var n=a(83117),i=(a(67294),a(3905)),o=a(77546),r=a(47842),l=a(6062);const p={slug:"instant-user-managemenet-and-sso-for-nuxt",title:"Securing Nuxt Apps with Keycloak",author:"Phase Two",tags:["phase_two","tutorial","frameworks","nuxt","vue","vuejs","nuxt","nuxtjs","authentication","authorization","sso"]},s=void 0,c={permalink:"/blog/instant-user-managemenet-and-sso-for-nuxt",source:"@site/blog/2023-09-08-secure-nuxt.mdx",title:"Securing Nuxt Apps with Keycloak",description:"In this article we'll be using Keycloak to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations.",date:"2023-09-08T00:00:00.000Z",formattedDate:"September 8, 2023",tags:[{label:"phase_two",permalink:"/blog/tags/phase-two"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"frameworks",permalink:"/blog/tags/frameworks"},{label:"nuxt",permalink:"/blog/tags/nuxt"},{label:"vue",permalink:"/blog/tags/vue"},{label:"vuejs",permalink:"/blog/tags/vuejs"},{label:"nuxtjs",permalink:"/blog/tags/nuxtjs"},{label:"authentication",permalink:"/blog/tags/authentication"},{label:"authorization",permalink:"/blog/tags/authorization"},{label:"sso",permalink:"/blog/tags/sso"}],readingTime:6.93,hasTruncateMarker:!1,authors:[{name:"Phase Two"}],frontMatter:{slug:"instant-user-managemenet-and-sso-for-nuxt",title:"Securing Nuxt Apps with Keycloak",author:"Phase Two",tags:["phase_two","tutorial","frameworks","nuxt","vue","vuejs","nuxt","nuxtjs","authentication","authorization","sso"]},prevItem:{title:"Securing Vue Apps with Keycloak",permalink:"/blog/instant-user-managemenet-and-sso-for-vue"},nextItem:{title:"Django Web Authentication with Keycloak",permalink:"/blog/secure-django"}},u={authorsImageUrls:[void 0]},m=[{value:"Setting up a Keycloak Instance",id:"setting-up-a-keycloak-instance",level:2},{value:"Setting up an OIDC Client",id:"setting-up-an-oidc-client",level:2},{value:"Adding a Non-Admin User",id:"adding-a-non-admin-user",level:2},{value:"Setting up a Nuxt Project",id:"setting-up-a-nuxt-project",level:2},{value:"Using <code>keycloak-js</code>",id:"using-keycloak-js",level:3},{value:"Using <code>oidc-client</code>",id:"using-oidc-client",level:3},{value:"Learning more",id:"learning-more",level:2}],h={toc:m};function k(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this article we'll be using ",(0,i.kt)("a",{parentName:"p",href:"https://www.keycloak.org/"},"Keycloak")," to quickly augment an application with user management and SSO. We will demonstrate the integration by securing a page for logged-in users. This quickly provides a jump-off point to more complex integrations."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you just want to skip to the code, visit the Phase Two ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/nuxt"},"Nuxt example"),".")),(0,i.kt)("h2",{id:"setting-up-a-keycloak-instance"},"Setting up a Keycloak Instance"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Instructions"),(0,i.kt)(o.ZP,{mdxType:"PhaseTwoStarterInstructions"})),(0,i.kt)("h2",{id:"setting-up-an-oidc-client"},"Setting up an OIDC Client"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Instructions"),(0,i.kt)(r.ZP,{mdxType:"OIDC"})),(0,i.kt)("h2",{id:"adding-a-non-admin-user"},"Adding a Non-Admin User"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Instructions"),(0,i.kt)(l.ZP,{mdxType:"NonAdminUser"})),(0,i.kt)("h2",{id:"setting-up-a-nuxt-project"},"Setting up a Nuxt Project"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We will use the Phase Two Nuxt example code here, but the logic could easily be applied to any existing application.")),(0,i.kt)("p",null,"This example uses Nuxt3. There are a couple methods by which you can integrate Keycloak to your Nuxt application. We're going to explore two methods here, one uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/keycloak-js"},(0,i.kt)("inlineCode",{parentName:"a"},"keycloak-js"))," and the other leverages ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/oidc-client-ts"},(0,i.kt)("inlineCode",{parentName:"a"},"oidc-client-ts")),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," library provides a simple, client-only method, but lacks some of the sophistication provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-client")," library that is heavily supported and more widely used."),(0,i.kt)("h3",{id:"using-keycloak-js"},"Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"keycloak-js")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},'For this example, we need to disable "Client Authentication" in the OIDC client that was setup earlier. This is available under Client > Settings > Capability config > Client authentication to OFF.')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Clone the Phase Two ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/"},"example repo"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the Nuxt ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/nuxt"},"folder")," within ",(0,i.kt)("inlineCode",{parentName:"p"},"/frameworks/nuxt")," and open the ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," folder within ",(0,i.kt)("inlineCode",{parentName:"p"},"/frameworks/nuxt/keycloak-js"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run dev"),". ",(0,i.kt)("a",{parentName:"p",href:"https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter"},(0,i.kt)("inlineCode",{parentName:"a"},"keycloak-js"))," is a Javascript library that provides a fast way to secure an application.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The project makes use of the following Nuxt items: components, composables, layouts, and plugins. We'll review each in kind.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The main component that shows the User's authenticated state is in ",(0,i.kt)("inlineCode",{parentName:"p"},"/components/User"),". In this component we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"useKeycloak")," composable, which let's us key into the ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," functions that we've wrapped to make easily availble."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { keycloak, authState } = useKeycloak();\n\nfunction login() {\n  keycloak.login();\n}\n\nfunction logout() {\n  keycloak.logout();\n}\n")),(0,i.kt)("p",{parentName:"li"},"Lower in the file the component leverages ",(0,i.kt)("inlineCode",{parentName:"p"},"v-if")," checks to determine if the ",(0,i.kt)("inlineCode",{parentName:"p"},"authState")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"authenticated")," or not. Depending on the state, a Log in or Log out button is available.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let's take a look at the setup for the composable next. Our composable is in ",(0,i.kt)("inlineCode",{parentName:"p"},"/composables/keycloak-c"),". A composable is a function defined that can be called anywhere in the Nuxt application. It's a good way to abstract logic to be reused. In our case we use it to wrap a ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," plugin (more on that in the next step) and help provided a state value for the authenticated state."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'export const useKeycloak = () => {\n  const nuxtApp = useNuxtApp();\n  const keycloak = nuxtApp.$keycloak as Keycloak;\n  const authState = useState("authState", () => "unAuthenticated");\n\n  keycloak.onAuthSuccess = () => (authState.value = "authenticated");\n  keycloak.onAuthError = () => (authState.value = "error");\n\n  return {\n    keycloak,\n    authState,\n  };\n};\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the plugin, ",(0,i.kt)("inlineCode",{parentName:"p"},"/plugins/keycloak.client.ts")," we instantiate the ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," library. We can then attach that instance to the ",(0,i.kt)("inlineCode",{parentName:"p"},"NuxtApp")," instance. Substitute the correct values for your Keycloak instance that we created earlier in the tutorial."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'export default defineNuxtPlugin((nuxtApp) => {\n  const initOptions: KeycloakConfig = {\n    url: "https://euc1.auth.ac/auth/",\n    realm: "shared-deployment-001",\n    clientId: "reg-example-1",\n  };\n\n  const keycloak = new Keycloak(initOptions);\n\n  nuxtApp.$keycloak = keycloak;\n\n  keycloak.init({\n    onLoad: "check-sso",\n  });\n});\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The logic for checking the ",(0,i.kt)("inlineCode",{parentName:"p"},"authenticated")," state can be used to expand in ways to secure your site in a number of ways."))),(0,i.kt)("h3",{id:"using-oidc-client"},"Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"oidc-client")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/oidc-client-ts"},(0,i.kt)("inlineCode",{parentName:"a"},"oidc-client-ts"))," package is a well-maintained and used library. It provides a lot of utilities for building out a fully production app."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Clone the Phase Two ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/"},"example repo"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the Nuxt ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/nuxt"},"folder")," within ",(0,i.kt)("inlineCode",{parentName:"p"},"/frameworks/nuxt")," and open the ",(0,i.kt)("inlineCode",{parentName:"p"},"/nuxt/oidc-client-ts")," folder.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," and then ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run dev"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The structure of the project is similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloak-js")," version but with a the use of services, stores, and middleware.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We'll review where we configure out Keycloak instance. First open ",(0,i.kt)("inlineCode",{parentName:"p"},"/services/keycloak-config.ts"),". In this file you will want to update it with the values for the Keycloak instance we set-up earlier in the tutorial. Make sure you are using the one with Client Authentication enabled. Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"clientSecret")," with the value. Use and environment variable here if you wish."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'export const keycloakConfig = {\n  authorityUrl: "https://euc1.auth.ac",\n  applicationUrl: "http://localhost:3000",\n  realm: "shared-deployment-001",\n  clientId: "reg-example-1",\n  clientSecret: "CLIENT_SECRET",\n};\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Switch over to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/services/auth-service")," now to see how the Oidc instance is started. The class pulls in values from the ",(0,i.kt)("inlineCode",{parentName:"p"},"keycloakConfig")," to use in the constructor. The other functions are wrappers around methods provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-client")," library. This allows us to key into things like ",(0,i.kt)("inlineCode",{parentName:"p"},"signInRedirect")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"signoutRedirect"),"."),(0,i.kt)("p",{parentName:"li"},"How the settings are integrated:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const settings = {\n  authority: `${keycloakConfig.authorityUrl}/auth/realms/${keycloakConfig.realm}`,\n  client_id: keycloakConfig.clientId,\n  client_secret: keycloakConfig.clientSecret,\n  redirect_uri: `${window.location.origin}/auth`,\n  silent_redirect_uri: `${window.location.origin}/silent-refresh`,\n  post_logout_redirect_uri: `${window.location.origin}`,\n  response_type: "code",\n  userStore: new WebStorageStateStore(),\n  loadUserInfo: true,\n};\nthis.userManager = new UserManager(settings);\n')),(0,i.kt)("p",{parentName:"li"},"Example function wrapper:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"public signInRedirect() {\n  return this.userManager.signinRedirect();\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"With the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," defined, we can now expose that through a composable. Switch to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/composables/useServices")," file. The file is simple but provides a way for any component to hook into the service instance."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import AuthService from "@/services/auth-service";\nimport ApplicationService from "@/services/application-service";\nimport { useAuth } from "@/stores/auth";\n\nexport const useServices = () => {\n  const authStore = useAuth();\n\n  return {\n    $auth: new AuthService(),\n    $application: new ApplicationService(authStore.access_token),\n  };\n};\n')),(0,i.kt)("p",{parentName:"li"},"We pull in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," then expose it through the ",(0,i.kt)("inlineCode",{parentName:"p"},"$auth")," variable. The ",(0,i.kt)("inlineCode",{parentName:"p"},"$application")," variable exposes the ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationService")," which is provided as an example of how you could secure API calls.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We leverage the ",(0,i.kt)("a",{parentName:"p",href:"https://pinia.vuejs.org/"},(0,i.kt)("inlineCode",{parentName:"a"},"pinia"))," library to make store User information to make it easily accessible. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"/stores/auth/index"),". From within this file, we can wrap the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," object exposed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-client")," package. This can then be leveraged in the middleware function we want to define or to pull information quickly about the user.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"There are a few main pages in play here that we define to create paths the library can leverage. The ",(0,i.kt)("inlineCode",{parentName:"p"},"/pages/auth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/pages/logout"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/pages/silent-refresh")," create paths at the same name. These are used to do the redirection during authentication or log out. From within these we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," to direct the user around within the app. For instance in ",(0,i.kt)("inlineCode",{parentName:"p"},"/auth"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const authenticateOidc = async () => {\n  try {\n    await services.$auth.signInCallback();\n    router.push("/");\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nawait authenticateOidc();\n')),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"router.push")," naively sends someone to the home page. This could be updated to go to any number of places, including the page one started the login flow from if you were to store that information to be retrieved.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We have also created a middleware file in ",(0,i.kt)("inlineCode",{parentName:"p"},"/middleware/auth.global")," to be used in a couple of ways. It checks if the user is authenticated and based on that knowledge, stores the user information in the store (if not there) or could be used to send someone to login. For our example, we created buttons to initiate that but there is a comment which shows how you could force a set of paths to require login."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const authFlowRoutes = ["/auth", "/silent-refresh", "/logout"];\n\nexport default defineNuxtRouteMiddleware(async (to, from) => {\n  const authStore = useAuth();\n  const services = useServices();\n  const user = (await services.$auth.getUser()) as User;\n\n  if (!user && !authFlowRoutes.includes(to.path)) {\n    // use this to automatically force a sign in and redirect\n    // services.$auth.signInRedirect();\n  } else {\n    authStore.setUpUserCredentials(user);\n  }\n});\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now that we have all the things setup, we can define the user component ",(0,i.kt)("inlineCode",{parentName:"p"},"/components/User")," to easily pull information about the user's state and display the appropriate UI."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const authStore = useAuth();\nconst user = authStore.user;\n\nconst signIn = () => services.$auth.signInRedirect();\nconst signOut = () => services.$auth.logout();\n")),(0,i.kt)("p",{parentName:"li"},"With this, the user object is now easily available. A simple ",(0,i.kt)("inlineCode",{parentName:"p"},'v-if="user"')," allows the app to determine what UI to show.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A bit more complicated of a setup, but more elegant in the handling of the logged in flow. The ",(0,i.kt)("inlineCode",{parentName:"p"},"oidc-client")," allows for much better fine-tuning of the experience."))),(0,i.kt)("h2",{id:"learning-more"},"Learning more"),(0,i.kt)("p",null,"Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our ",(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog"},"blog")," has many use cases from ",(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog/customizing-login-pages"},"customizing login pages"),", setting up ",(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog/set-up-magic-links"},"magic links")," (password-less sign in), and ",(0,i.kt)("a",{parentName:"p",href:"https://phasetwo.io/product/organizations"},"Organization")," workflows."))}k.isMDXComponent=!0},69245:function(e,t,a){t.Z=a.p+"assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png"},74669:function(e,t,a){t.Z=a.p+"assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png"},20477:function(e,t,a){t.Z=a.p+"assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png"},26212:function(e,t,a){t.Z=a.p+"assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png"},1375:function(e,t,a){t.Z=a.p+"assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png"},22983:function(e,t,a){t.Z=a.p+"assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png"},52787:function(e,t,a){t.Z=a.p+"assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png"},61175:function(e,t,a){t.Z=a.p+"assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png"},70618:function(e,t,a){t.Z=a.p+"assets/images/register-c45850867ce85096a398bb0dfab9df4d.png"}}]);