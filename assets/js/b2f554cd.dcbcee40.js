"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[1477],{430010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"securing-apps-with-keycloak","metadata":{"permalink":"/blog/securing-apps-with-keycloak","source":"@site/blog/2022-10-17-securing-apps-with-keycloak.md","title":"Protecting Your Application With Keycloak","description":"There are a lot of guides out there, official and unofficial, for how to secure applications with Keycloak. The subject is rather broad, so it\'s difficult to know where to start. To begin, we\'ll be focusing on Keycloak\'s use of OpenID Connect (OIDC), and how to use that standard, along with some helpful libraries, to secure a simple but instructive application.","date":"2022-10-17T00:00:00.000Z","formattedDate":"October 17, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":5.9,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"securing-apps-with-keycloak","title":"Protecting Your Application With Keycloak","author":"Phase Two","tags":["tutorial","keycloak","phase_two"]},"nextItem":{"title":"Magic Links Guide, and 5 Minute Setup","permalink":"/blog/set-up-magic-links"}},"content":"There are a lot of guides out there, official and unofficial, for how to secure applications with Keycloak. The subject is rather broad, so it\'s difficult to know where to start. To begin, we\'ll be focusing on Keycloak\'s use of OpenID Connect (OIDC), and how to use that standard, along with some helpful libraries, to secure a simple but instructive application. \\n\\nFor the purposes of the sample, we\'ll actually be using two common applications, a frontend single-page application (SPA) written in JavaScript, and a backend REST API written for Node.js. The language we selected for the sample is JavaScript, but the principles apply no matter the implementation technology you choose.\\n\\n### What is OIDC?\\n\\nWhen learning about identity and access management technologies, you\'ll be confronted with an alphabet-soup of acronyms to learn. OIDC, or OpenID Connect is one of the most important ones for securing applications, be it browser-based, APIs, mobile or native. Our friend over at OneLogin does a great job of explaining [OIDC in plain english](https://www.onelogin.com/blog/openid-connect-explained-in-plain-english-2) for those that are curious.\\n\\nFor the purpose of this guide, it is sufficient to know that OIDC is an open authentication protocol that works on top of the OAuth 2.0 framework. OIDC allows individuals to use single sign-on (SSO) to access relying party sites using OpenID Providers (OPs), such as an email provider or social network, to authenticate their identities. It provides the application or service with information about the user, the context of their authentication, and access to their profile information.\\n\\n### Login flow\\n\\nA \\"flow\\" in OIDC terms is a mechanism of authenticating a user, and obtaning access tokens. The flow we\'ll be using in this guide is called the authorization code flow. Fortunately, the internals of the flow are not necessary to understand, as Keycloak handles the details for you. \\n\\nHowever, it is useful to see what is going on in the login process, so that you understand your user\'s experience.\\n\\n![](/blog/2022-10-17-authentication-flow.png)\\n\\n### Setup\\n\\nWe\'ll make an assumption for this guide that you are using a cloud deployment of Phase Two enhanced Keycloak. If you haven\'t already set one up, go over to the [self-service launch announcement](/blog/self-service) for details. You may also use your own Keycloak setup, but that setup is beyond the scope of this article.\\n\\nThe sample applications are available in our [demo repo](https://github.com/p2-inc/debug-app) on Github. Clone that repo to your local machine. You\'ll find the applications in the `frontend` and `backend` directory, and a set of supporting files for configuration and deployment.\\n\\n```\\ngit clone https://github.com/p2-inc/debug-app.git\\ncd debug-app\\n```\\n\\n### Client\\n\\nEvery application that Keycloak protects is considered a **Client**. Log into your Keycloak realm, and click on **Clients** in the left navigation, and click *Create client*. \\n\\n1. Enter `frontend` as the **Client ID** and click *Next*\\n2. In the **Capability config** screen, keep the defaults and click *Save*\\n3. In the **Access settings** screen, enter the following values:\\n    1. `http://localhost:3001/*` for **Valid redirect URIs**\\n\\t2. `+` in **Valid post logout redirect URIs**\\n\\t3. `+` in **Web origins**\\n4. Click *Save*\\n4. In the upper right corner, open the **Action** menu and select **Download adapter config**. Click *Download* and move the file to the `debug-app` repo you cloned under the `frontend` folder.\\n\\n![](/blog/2022-10-17-client-setup.png)\\n\\n### Make a user\\n\\nBefore we run the application, we need to create a user to log in. Click on **Users** in the left navigation, and click *Add user*. You only need to give the user a username and click *Create*. Find the **Credentials** tab and click **Set password** to give the user a password.\\n\\n### Running the sample apps\\n\\nOpen two terminal windows and go to the directory of the repo you cloned in both. To start, run the following commands in each terminal:\\n\\nFrontend:\\n```\\ncd frontend/\\nnpm install\\nnpm start\\n```\\nBackend:\\n```\\ncd backend/\\nnpm install\\nKC_REALM=<your-realm-name> KC_URL=<your-keycloak-url> npm start\\n```\\nBe sure to replace the realm name, and the URL of your Keycloak installation (e.g. `https://usw2.auth.ac/auth/`).\\n\\nThis will install the necessary components using npm, and will start the servers for both applications. Note: the applications use ports 3001 and 3002 by default. If you have other applications running on these ports, you may have to temporarily shut them down.\\n\\n### Putting it all together\\n\\nLoad <a href=\\"http://localhost:3001/\\" target=\\"_blank\\">http://localhost:3001/</a> in your browser. This will load the frontend application, which will be immediately redirected to the Keycloak login page. Log in with the user you created.\\n\\nOnce you log in, you\'ll see your profile, and several menu items. First click to the **Access token** menu item. You\'ll see the information from the parsed access token that was returned by Keycloak. This contains information about the user, but also claims related to the users roles and groups. This is because access tokens are meant to be read and validated by resource servers (i.e. our backend service).\\n\\nNext, click **ID token**. You\'ll see similar information to what we saw in the access token, but limited to a standardized set of information that identifies the authentication state of the user. ID tokens are not meant for calling resource servers, and because of that, don\'t contain claims that are meant to be validated by backend services.\\n\\nClicking **Service** will call the backend service. You\'ll see a message that indicates the frontend called the backend, passing the access token, and was authorized to access a secured service. \\n\\nYou can also try the built-in Keycloak Account Management console by clicking **Account**, which gives the user a simple way to manage their information that is stored in Keycloak. It is not necessary to use this with your applications, as you may choose to build it in to your app. However, it\'s a good tool to have out of the box.\\n\\nFinally, clicking **Logout** will take you back to the login page. This is actually sending you to the frontend\'s initial page, which is redirecting you to the login page as its default behavior.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Wi9qipIDi4w\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n### What just happened?\\n\\nThere\'s a lot that goes into implementation of the OIDC flow we used to secure our sample applications. Part of the reason to use Keycloak is the mature implementation and client libraries that make protecting applications in a secure way almost trivial. \\n\\nWe encourage you to look at the source in the sample applications (specifically `frontend/app.js` and `backend/app.js`) and observe how the Keycloak client libraries are used to secure these applications. This will be a good place to start when you are working on securing your own applications.\\n\\n### Your application\\n\\nAnother incredible advantage to using standards like OIDC is that you are not constrained to using Keycloak libraries. Because your applications may not be written in JavaScript also, it\'s easy to use other language OIDC client libraries. We maintain a [list of OIDC libraries](/docs/securing-applications/#libraries), and the [OpenID Foundation](https://openid.net/) also maintains lists of [certified](https://openid.net/developers/certified/) and [uncertified](https://openid.net/developers/uncertified/) implementations\\n\\nToday you saw how to quickly secure an application using Keycloak, and learned more about the underlying OIDC standards. We look forward to seeing what you build!"},{"id":"set-up-magic-links","metadata":{"permalink":"/blog/set-up-magic-links","source":"@site/blog/2022-10-12-set-up-magic-links.md","title":"Magic Links Guide, and 5 Minute Setup","description":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer password-less authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.","date":"2022-10-12T00:00:00.000Z","formattedDate":"October 12, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"magic_links","permalink":"/blog/tags/magic-links"}],"readingTime":5.31,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"set-up-magic-links","title":"Magic Links Guide, and 5 Minute Setup","author":"Phase Two","tags":["tutorial","keycloak","phase_two","magic_links"]},"prevItem":{"title":"Protecting Your Application With Keycloak","permalink":"/blog/securing-apps-with-keycloak"},"nextItem":{"title":"Set Up Email in Phase Two","permalink":"/blog/set-up-email"}},"content":"Someone who is reading this article is probably very different that the average internet user when it comes to passwords. Developers and IT admins, either because of security savvy or compliance, use password managers, multi-factor authentication (MFA) mechanisms, or prefer sites that offer password-less authentication. Furthermore, they are keenly aware of the weaknesses in their personal \\"attack surface\\", and search for ways to balance convenience with risk.\\n\\nBut you are here because you want to find a way to implement magic links quickly. First, some background.\\n\\n### What are magic links?\\n\\nMagic links are a type of password-less authentication that allow your users to log in to your application following a link that is emailed to them, rather than typing a username and password. Magic links can also be used as a part of a multi-factor authentication (MFA) strategy.\\n\\nIn a magic link flow, the application\'s authentication provider asks users for an email address rather than a password. The authentication provider generates a link with an embedded token, and sends to the user\'s email. There may be some other steps taken by the provider, such as verifying the provided email address matches an existing user. The user then opens the email, clicks the link, is verified by the authentication provider, and is granted access to the application\\n\\n![](/blog/2022-10-12-set-up-magic-links-flow.png)\\n\\n### Pros and cons\\n\\nLike any mechanism that tries to streamline a security process such as authentication, there are both pros and cons to the magic link approach. First in the plus column:\\n\\n- Enhances user experience, which makes users more likely to use your application, and be satisfied with the experience. This drives user engagement.\\n- User onboarding is accelerated, as magic links can be sent to new users as well as existing ones. Registration for your application is as easy as entering your email address.\\n- You\'ll never have a password breach. When there are no passwords, there are no password breaches. A huge number of corporate data breaches are due to insufficient and compromised passwords.\\n- No more customer support requests related to lost passwords. Over half of customer support requests are due to authentication problems, many of those are users unable to remember their passwords. This eliminates a huge portion of those.\\n\\nNothing is perfect, and there are also several potential downsides to magic links:\\n\\n- Account security and access are now tied to the security of the user\'s email account. If the user\'s computer or other device is compromised, and attacker could potentially obtain the link and impersonate the user.\\n- If the user or email provider does not enforce encrypted network access to email, it may be possible for an attacker to perform a man-in-the-middle attack where they can obtain the link by observing network traffic.\\n- Ability to access your application is now tied to email deliverability. If your email service or the user\'s email provider fails to deliver the email containing the link in a timely fashion, it could deteriorate the experience for the user.\\n\\n### Limiting risk\\n\\nFortunately, there are things your application and the user can do in order to limit some of the possible downside risks of using magic links. Your application can:\\n\\n- Make the magic links single use, or set a very short expiration time for the links.\\n- Enforce an additional factor when using magic links.\\n\\nYour user can:\\n\\n- Choose an email provider that enforces the use of encrypted connections.\\n- Use multi-factor authentication (MFA) mechanisms to further protect their email accounts.\\n\\n### Setup guide\\n\\nSorry for the wait! We wanted to give you an overview of magic links before diving into how to set them up with Phase Two. \\n\\nIf you haven\'t already, get an account on [Phase Two](https://phasetwo.io/dashboard). You\'ll notice that we use magic links in addition to social login options. As we said above, we\'re trying to make it as frictionless as possible to get in and start using the product.\\n\\nOnce you log in and create your first deployment, open the Phase Two enhanced Keycloak console. In order to email links to your users, you\'ll need to set up email. If you haven\'t already done that, head over to our [email setup guide](/blog/2022-10-05-set-up-email.md). \\n\\nAfter you\'ve completed email setup, select the **Authentication** menu item, and then select the **Magic link** flow from the list.\\n\\n![](/blog/2022-10-12-set-up-magic-links-magiclinkauth.png)\\n\\nOpen the configuration for the **Magic Link Authenticator** by clicking the gear icon on the last line with the **Magic Link** execution. You\'ll notice two options:\\n- **Force create user** creates a new user when an email is provided that does not match an existing user. This allows the use of magic links to register new users that have not been previously seen.\\n- **Update profile on create** adds an UPDATE_PROFILE required action if the user was created. This means that the user will need to fill out other required fields such as first/last name, etc. \\n\\nFor the purpose of our demonstration, let\'s set **Force create user** to ON and **Update profile on create** to OFF (remember, low friction). Save the configuration, and go back to the flow page.\\n\\nIn the **Action** menu of the flow page, select **Bind**, and select **Browser flow**.\\n\\n![](/blog/2022-10-12-set-up-magic-links-bind.png)\\n\\nNow you\'re ready to test it out. If you don\'t have an application that is setup and protected by Keycloak, you can use the built-in account console to try it out. Navigate to the **Clients** menu, and open the link next to the **account** client in an incognito window (this will prevent conflict, as you are already logged in to the admin console as the administrator). \\n\\nClick **Sign In** and you\'ll be redirected to the authentication page. Enter your email address, and you\'ll be sent a magic link. Click on the link in your email, and you\'ll see your details in the account console. \\n\\n![](/blog/2022-10-12-set-up-magic-links-login.png)\\n![](/blog/2022-10-12-set-up-magic-links-confirm.png)\\n\\nGo back to the admin console in the other browser window, and navigate to the **Users** section. You will be able to find the user that was just created.\\n\\n![](/blog/2022-10-12-set-up-magic-links-admin-user.png)\\n\\nMagic links are a great way to streamline your user onboarding and experience to help you easily drive engagement across your application. Phase Two makes it quick and easy to integrate magic links (and social login, and enterprise SSO, and much more). Stay tuned for more guides that will help you build the authentication experience that is right for your app."},{"id":"set-up-email","metadata":{"permalink":"/blog/set-up-email","source":"@site/blog/2022-10-05-set-up-email.md","title":"Set Up Email in Phase Two","description":"One of the first things you will need to do when getting a Keycloak Realm ready for use is to set up your email server configuration. There are many system emails that are sent to users in the course of verifying and updating user accounts: Email address verification, magic links, password reset, account update, login failure notifications, identity provider linking, etc.","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"email","permalink":"/blog/tags/email"}],"readingTime":2.455,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"set-up-email","title":"Set Up Email in Phase Two","author":"Phase Two","tags":["tutorial","keycloak","phase_two","email"]},"prevItem":{"title":"Magic Links Guide, and 5 Minute Setup","permalink":"/blog/set-up-magic-links"},"nextItem":{"title":"Self-service (beta) Launch","permalink":"/blog/self-service"}},"content":"One of the first things you will need to do when getting a Keycloak Realm ready for use is to set up your email server configuration. There are many system emails that are sent to users in the course of verifying and updating user accounts: Email address verification, magic links, password reset, account update, login failure notifications, identity provider linking, etc.\\n\\nIn order to provide your users with a positive experience, these messages need a way to get to them. Keycloak supports any internet reachable SMTP server. If you are currently testing, and don\'t have an email server or service that you currently use, [SendGrid](https://sendgrid.com/) provides free accounts that allow you to send up to 100 emails per day forever. For debugging, you can also use a service like [MailTrap](https://mailtrap.io/) to give you a catch-all for emails coming from Keycloak.\\n\\nIf you are using a Phase Two Deployment, log in to the self-service dashboard, and click on the **Open Console** link for the Deployment you wish to use. Once in the Keycloak admin console, click **Realm settings** in the left menu, and then click the **Email** tab.\\n\\n![](/blog/2022-10-05-set-up-email-template.png)\\n\\nIn the first section, labeled **Template**, you will set options that will be used in the templates for the emails that are sent to your users. The only required field is the **From** field, which must contain the email address the user will see the email originating from. This should be an email address that your email server is expecting, and it will not block for authorization reasons.\\n\\nThe other fields in the **Template** section are not required, but will enhance how your emails look:\\n\\n- **From** address used to send emails (required)\\n- **From display name** a user-friendly name displayed along **From**\\n- **Reply to** an email address that will be used by email clients when your user replies to an email\\n- **Reply to display name** a user-friendly name displayed along **Reply to**\\n- **Envelope from** Bounce Address used for the mails that are rejected\\n\\n![](/blog/2022-10-05-set-up-email-connection.png)\\n\\nIn the **Connection & Authentication** section, you will provide details of your SMTP server:\\n\\n- **Host** indicates the SMTP server hostname used for sending emails\\n- **Port** indicates the SMTP server port (usually 25, 465, 587, or 2525)\\n- **Encryption** support encryption for communication with your SMTP server\\n- **Authentication** if your SMTP server requires authentication, and supply the **Username** and **Password**\\n\\n![](/blog/2022-10-05-set-up-email-buttons.png)\\n\\nFinally, before you click **Save**, click the **Test connection** button to send a test email to the email address of the currently logged in user. If you don\'t have that set, you might have click **Save** and edit your user before you come back. You\'ll receive a success message, or information that will help you resolve problems.\\n\\nOnce you do that, you\'ll have accomplished a significant task which enables lots of other functionality!\\n\\nAlso, stay tuned for another post on how to customize your email templates to match your branding and messaging."},{"id":"self-service","metadata":{"permalink":"/blog/self-service","source":"@site/blog/2022-09-16-self-service.md","title":"Self-service (beta) Launch","description":"We\'ve been pretty quiet over the summer. Since we released the Organizations and Magic Link extensions and open sourced them, there has been a lot of interest in using Phase Two.","date":"2022-09-16T00:00:00.000Z","formattedDate":"September 16, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"cockroach","permalink":"/blog/tags/cockroach"}],"readingTime":1.16,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"self-service","title":"Self-service (beta) Launch","author":"Phase Two","tags":["release","keycloak","phase_two","cockroach"]},"prevItem":{"title":"Set Up Email in Phase Two","permalink":"/blog/set-up-email"},"nextItem":{"title":"Magic Links","permalink":"/blog/magic-link"}},"content":"We\'ve been pretty quiet over the summer. Since we released the [Organizations](https://github.com/p2-inc/keycloak-orgs) and [Magic Link](https://github.com/p2-inc/keycloak-magic-link) extensions and open sourced them, there has been a lot of interest in using Phase Two.\\n\\nWe were flattered by the inbound interest, but our small team wasn\'t able to keep up with demand for trial accounts. Rather than scramble against that demand, we opted to pause new accounts, and instead build a self-service tool to allow anyone to quickly provision a new deployment a try it out.\\n\\nToday we\'re announcing the beta launch of the Phase Two Self-service deployment tool. This tool allows you to easily create new deployments of the Phase Two enhanced version of Keycloak in our secure, highly-available clusters. In the future, it will also allow you to deploy dedicated instances that use your own database.\\n\\nTake a look at how easy it is to get started:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/zzJPmwrEHmU\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nThe clusters that run our deployments are available in two regions (AWS, us-west-2 and eu-central-1), and are backed by [CockroachDB](https://www.cockroachlabs.com/), giving you scale, resilience and low-latency performance. In the future, clusters and dedicated instances will be available in other regions based on demand.\\n\\nWe hope you find this new tool valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community.\\n\\n[TRY IT NOW!](https://phasetwo.io/dashboard/)"},{"id":"magic-link","metadata":{"permalink":"/blog/magic-link","source":"@site/blog/2022-04-27-magic-link.md","title":"Magic Links","description":"Today we\'re making two announcements: A new, highly-requested feature, and the open sourcing of the extension at the same time. We\'ve received a lot of requests from customers to implement \\"magic link\\" login functionality that would allow users to login to an application using a link sent to their email or over some other secure channel.","date":"2022-04-27T00:00:00.000Z","formattedDate":"April 27, 2022","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.395,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"magic-link","title":"Magic Links","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"Self-service (beta) Launch","permalink":"/blog/self-service"},"nextItem":{"title":"Multi-tenant Extensions","permalink":"/blog/orgs"}},"content":"Today we\'re making two announcements: A new, highly-requested feature, and the open sourcing of the extension at the same time. We\'ve received a lot of requests from customers to implement \\"magic link\\" login functionality that would allow users to login to an application using a link sent to their email or over some other secure channel. \\n\\nTo that end, we\'ve implemented two pathways for creating a magic link. One can be configured in the Authentication section of the admin UI by duplicating the Browser flow, and replacing the normal Username/Password/OTP forms with the Magic Link execution type\\n![Install Magic Link Authenticator in Browser Flow](https://github.com/p2-inc/keycloak-magic-link/raw/main/docs/assets/magic-authenticator.png)\\nThis mechanism inserts a authenticator in the login flow that intercepts the email address and sends the magic link in an email to to the user.\\n\\nWe\'ve also implemented a web service that allows you to create a magic link without necessarily sending an email. This will allow you to send the link through another channel. Specification for the new endpoint can be found in the [Magic Link API Documentation](/api/create-a-magic-link-to-log-in-a-user).\\n\\nBoth methods have the option of forcing the creation of a new user when an unknown email address is used. This allows a combination login/registration flow that combines an email verification. We think this really nails reducing friction in a new user flow.\\n\\nWe\'re open sourcing the Keycloak extensionsso that the broad Keycloak community can benefit right away. We are doing this in line with our committment to keeping our core extensions [open source](/docs/introduction/open-source). We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-magic-link"},{"id":"orgs","metadata":{"permalink":"/blog/orgs","source":"@site/blog/2022-03-21-orgs.md","title":"Multi-tenant Extensions","description":"Today we\'re open sourcing set of Keycloak extensions that are focused on solving several of the common use cases of multi-tenant, SaaS applications that Keycloak does not solve out of the box. We are doing this in line with our committment to keeping our core extensions open source. These extensions are the basis of our Organizations features, which allow Phase Two customers to model their own customers in their systems and create enterprise \\"team\\" functionality that suits their business case.","date":"2022-03-21T00:00:00.000Z","formattedDate":"March 21, 2022","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.725,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"orgs","title":"Multi-tenant Extensions","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"Magic Links","permalink":"/blog/magic-link"},"nextItem":{"title":"Introducing Phase Two Connect","permalink":"/blog/connect"}},"content":"Today we\'re open sourcing set of Keycloak extensions that are focused on solving several of the common use cases of multi-tenant, SaaS applications that Keycloak does not solve out of the box. We are doing this in line with our committment to keeping our core extensions [open source](/docs/introduction/open-source). These extensions are the basis of our Organizations features, which allow Phase Two customers to model their own customers in their systems and create enterprise \\"team\\" functionality that suits their business case.\\n\\nA variation of this code has been built, enhanced and used in production by several customers for almost two years. It is now available as open source for members of the broader Keycloak community. We hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-orgs"},{"id":"connect","metadata":{"permalink":"/blog/connect","source":"@site/blog/2022-02-25-connect.md","title":"Introducing Phase Two Connect","description":"Following our post about our wizard product, we received an overwhelming amount of interest in it. Many customers of our cloud offering asked for it as a portal for their organization administrators to set up their identity providers. On-prem customers said that one consistent onboarding hurdle was SSO complexity, and asked for it to be included in the bundled distribution.","date":"2022-02-25T00:00:00.000Z","formattedDate":"February 25, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"connect","permalink":"/blog/tags/connect"}],"readingTime":0.705,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"connect","title":"Introducing Phase Two Connect","author":"Phase Two","tags":["release","phase_two","connect"]},"prevItem":{"title":"Multi-tenant Extensions","permalink":"/blog/orgs"},"nextItem":{"title":"SSO? Wave Your Magic Wand","permalink":"/blog/wizard"}},"content":"Following our [post about our wizard product](/blog/wizard), we received an overwhelming amount of interest in it. Many customers of our cloud offering asked for it as a portal for their organization administrators to set up their identity providers. On-prem customers said that one consistent onboarding hurdle was SSO complexity, and asked for it to be included in the bundled distribution.\\n\\nToday we\'re pleased to report that we\'ve listened to both use cases and completed embedding the \\"wizard\\" product into Phase Two. We\'re calling it \\"Connect\\", as it\'s the best way we could come up with characterizing its simplicity. It massively reduces the complexit of configuring SSO connections, and distills the process into something any member of the team can understand.\\n\\nPhase Two Connect is currently available by invitation only while we work out the final kinks. [Contact sales](mailto:sales@phasetwo.io) for more information."},{"id":"wizard","metadata":{"permalink":"/blog/wizard","source":"@site/blog/2022-01-24-wizard.md","title":"SSO? Wave Your Magic Wand","description":"Working with one of our customers, we discovered that even the most technically literate developer or ops professional could look at the configuration for an SSO connection like it was a foreign language. While our configuration interface attempts to cover all possible options, and document clearly what each option means, it can still be entirely unclear what is required during a setup.","date":"2022-01-24T00:00:00.000Z","formattedDate":"January 24, 2022","tags":[{"label":"sso","permalink":"/blog/tags/sso"},{"label":"wizard","permalink":"/blog/tags/wizard"},{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.935,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"wizard","title":"SSO? Wave Your Magic Wand","author":"Phase Two","tags":["sso","wizard","release","phase_two"]},"prevItem":{"title":"Introducing Phase Two Connect","permalink":"/blog/connect"},"nextItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"}},"content":"Working with one of our customers, we discovered that even the most technically literate developer or ops professional could look at the configuration for an SSO connection like it was a foreign language. While our configuration interface attempts to cover all possible options, and document clearly what each option means, it can still be entirely unclear what is required during a setup.\\n\\nFurthermore, the identity provider that is being integrated can present a similarly extensive interface that may not use the same terms and language. However, after investigation into the most common identity providers, we found that most of the configuration options can simply be set by convention if the vendor is known.\\n\\nBased on that observation, we\'ve built what we call a \\"wizard\\" UI on top of our identity provider configuration to make it easy to integration the top commercial identity provider vendors. Take a look at a quick video of a setup using our most recent prototype. \\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/9HJWdJqnE0I\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nIf you\'re interested in early access to our \\"wizards\\", please [contact us](mailto:sales@phasetwo.io) today."},{"id":"events","metadata":{"permalink":"/blog/events","source":"@site/blog/2021-10-18-events.md","title":"Events and Audit Logging Extensions","description":"Per our committment to keeping our core extensions open source, today we\'re releasing our Keycloak extensions to the event system. These extensions form the basis of how our Audit Log features are built.","date":"2021-10-18T00:00:00.000Z","formattedDate":"October 18, 2021","tags":[{"label":"open_source","permalink":"/blog/tags/open-source"},{"label":"release","permalink":"/blog/tags/release"},{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":0.66,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"events","title":"Events and Audit Logging Extensions","author":"Phase Two","tags":["open_source","release","keycloak","phase_two"]},"prevItem":{"title":"SSO? Wave Your Magic Wand","permalink":"/blog/wizard"},"nextItem":{"title":"Free as in Beer","permalink":"/blog/free-realm"}},"content":"Per our committment to keeping our core extensions [open source](/docs/introduction/open-source), today we\'re releasing our Keycloak extensions to the event system. These extensions form the basis of how our [Audit Log](/docs/audit-logs) features are built.\\n\\nAdditionally, we\'re providing several goodies that will be valuable to others building extensions on top of Keycloak, including a generic scriptable event listener, an event emitter to send events to any HTTP endpoint, a mechanism for retrieving event listener configurations from realm attributes, a mechanism for running multiple event listeners of the same type with different configurations, and a unified event model with facility for subscribing to webhooks. \\n\\nWe hope you find these extensions valuable, and we look forward to feedback and participation from both our customers and the wider Keycloak community. \\n\\nThe extension is available on GitHub https://github.com/p2-inc/keycloak-events"},{"id":"free-realm","metadata":{"permalink":"/blog/free-realm","source":"@site/blog/2021-05-31-free-realm.md","title":"Free as in Beer","description":"Since our release about basing Phase Two on the Keycloak Open Source Identity and Access Management system, an our committment to keeping our core extensions open source, we\'ve received positive feedback from customers and interest from the the Keycloak community.","date":"2021-05-31T00:00:00.000Z","formattedDate":"May 31, 2021","tags":[{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":1.11,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"free-realm","title":"Free as in Beer","author":"Phase Two","tags":["phase_two"]},"prevItem":{"title":"Events and Audit Logging Extensions","permalink":"/blog/events"},"nextItem":{"title":"Keycloak, and Our Commitment to Open Source","permalink":"/blog/keycloak"}},"content":"Since our release about basing Phase Two on the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, an our committment to keeping our core extensions [open source](/docs/introduction/open-source), we\'ve received positive feedback from customers and interest from the the Keycloak community.\\n\\nWe\'ve noticed that support forums for Keycloak have many questions and requests around just getting started. Even though the software is mature, open source, and has a helpfu user community, just spinning up an environment and trying it out can be puzzling for first-time users. It\'s pretty clear that a lot of people just give up, because they can\'t get a server running, let alone configure their first realm[^1].\\n\\nBecause of that, we\'ve decided to offer developers a *FREE* realm in Phase Two, so those that are interested in trying it out can get successful quickly. Free realms are limited to fewer than 1000 users and 5 SSO connections. Otherwise, there are no restrictions beyond abiding by our [terms of use](/docs/terms). Sound good? Please fill out the [contact form](https://docs.google.com/forms/d/e/1FAIpQLScIwakLlJpd9OS3r1fCsPDX01Y9BTSvxf5Ceru_FrpAQE5hIA/viewform?usp=sf_link) with your company information, and we\'ll respond with access information for your realm. \\n\\n[^1]: In Keycloak, a \\"realm\\" manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control."},{"id":"keycloak","metadata":{"permalink":"/blog/keycloak","source":"@site/blog/2020-12-21-keycloak.md","title":"Keycloak, and Our Commitment to Open Source","description":"Following the initial release of Phase Two\'s authentication and SSO tools 3 months ago, we had a warm reception by several early- to mid- stage SaaS companies. The message was consistent. SSO was a key barrier to unlocking enterprise customers, and we had made it much easier to quickly integrate the alphabet-soup of enterprise identity providers.","date":"2020-12-21T00:00:00.000Z","formattedDate":"December 21, 2020","tags":[{"label":"keycloak","permalink":"/blog/tags/keycloak"},{"label":"phase_two","permalink":"/blog/tags/phase-two"},{"label":"open_source","permalink":"/blog/tags/open-source"}],"readingTime":1.705,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"keycloak","title":"Keycloak, and Our Commitment to Open Source","author":"Phase Two","tags":["keycloak","phase_two","open_source"]},"prevItem":{"title":"Free as in Beer","permalink":"/blog/free-realm"},"nextItem":{"title":"Welcome to Phase Two","permalink":"/blog/welcome"}},"content":"Following the initial release of Phase Two\'s authentication and SSO tools 3 months ago, we had a warm reception by several early- to mid- stage SaaS companies. The message was consistent. SSO was a key barrier to unlocking enterprise customers, and we had made it much easier to quickly integrate the alphabet-soup of enterprise identity providers.\\n\\nFurthermore, many of our customers have responded well to our \\"one price per project\\" idea, citing that competitors and other enterprise authentication companies had pricing models that ramped on a per-user and per-SSO connection basis, making them economically unattractive to companies with business and pricing models that couldn\'t support that. \\n\\nOne of the other points that we heard loud and clear from our first customers, was the fear of vendor lock-in. Integrating tools like this can be a large effort, and can be difficult to unwind if the terms or service fall short. While our adoption of standards such as OpenID and SAML allayed some of those fears, we wanted to go a step further.\\n\\nWe built the initial verison of Phase Two as a set of extensions to the [Keycloak](https://www.keycloak.org/) Open Source Identity and Access Management system, built and maintained by Red Hat. After several months of developing for it, and operating it for our customers, we\'ve decided to continue using it. Keycloak has been battle-tested and hardened for over 6 years. It\'s security and reliability is depended on by organizations from small startups to Fortune 500 companies and governments.\\n\\nTo put to rest any future concerns about vendor lock-in, we\'re committing to making our core extensions to Keycloak open source. While we will endeavor to make Phase Two simple to use, operate and scale, we will maintain compatibility so that customers can migrate to their own Keycloak deployment. Updates and links to our open source extensions will be published in the [Open Source](/docs/introduction/open-source) section of the documentation, and will be available in our [p2-inc GitHub organization page](https://github.com/p2-inc).\\n\\nWe have benefitted immensely from the open source communitiy, and we are excited to give back!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2020-09-28-welcome.md","title":"Welcome to Phase Two","description":"After building and working for startups and technology companies for almost 25 years, I found myself having a sense of d\xe9j\xe0-vu.","date":"2020-09-28T00:00:00.000Z","formattedDate":"September 28, 2020","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"phase_two","permalink":"/blog/tags/phase-two"}],"readingTime":2.1,"hasTruncateMarker":false,"authors":[{"name":"Phase Two"}],"frontMatter":{"slug":"welcome","title":"Welcome to Phase Two","author":"Phase Two","tags":["release","phase_two"]},"prevItem":{"title":"Keycloak, and Our Commitment to Open Source","permalink":"/blog/keycloak"}},"content":"After building and working for startups and technology companies for almost 25 years, I found myself having a sense of d\xe9j\xe0-vu. \\n\\nHad I really built the same features and functionality over and over?\\n\\nEveryone of us who has been in the industry for any length of time probably has the same feeling. Whether or not we are fully conscious of it, we probably built a (bad) version of login, registration, user management, authorization, organizations and invitations, audit logging, etc. at least one time for every company we\'ve worked for. \\n\\nIn early 2018, I joined an enterprise SaaS startup, where I built the initial team and product over 18 months. Analyzing tickets and epics in the project tracking system we used, I found that over 60% of our first 18 months was spent building features and functionality like this -- essential building blocks, but not the core competency we sought to test in the marketplace. And the result of that effort was only adequate versions of those common features, which resulted in less time spent on what we were trying to prove. I began to refer to this heavy tax a \\"SaaS CRUD\\".\\n\\nWas this really what everyone else was doing? I was lucky to have a large network of engineering leaders at companies that ranged from the earliest stages to the largest public companies, so I asked them. The responses were remarkably consisitent. Early stage companies wished there was something comprehensive they could adopt, and later stage and large companies lamented not adopting external tools earlier that gave them guarantees around uptime and compliance. All were aware of or had tried to knit together a mish-mash of \\"feature company\\" products, and all expressed dissatisfaction with \\"model mismatch\\" of most of the tools in the marketplace, which demanded more integration overhead than the perceived benefit allowed. \\n\\nI was lucky to find others that had observed the same thing. We joined forces and spent the next 6 months interviewing companies of a range of sizes, developing a playbook for companies building new products. Based on that playbook, today we are releasing our first version of tooling designed to help application developers avoid rebuilding \\"SaaS CRUD\\".\\n\\nPhase Two is designed to help SaaS companies accelerate time-to-market. Authentication and SSO are our first targets, but we plan to expand to many other areas of pain for the growing company seeking enterprise adoption. We\'d love for you to join us on this journey. For product demos and to become a beta customer, please [contact us](mailto:support@phasetwo.io)!"}]}')}}]);