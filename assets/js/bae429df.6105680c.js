"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[1878],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,d=m["".concat(p,".").concat(h)]||m[h]||u[h]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6062:function(e,t,n){n.d(t,{ZP:function(){return i}});var a=n(83117),r=(n(67294),n(3905));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is bad practice to use your Admin user to sign in to an Application.")),(0,r.kt)("p",null,"Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open the Admin UI by clicking ",(0,r.kt)("strong",{parentName:"li"},"Open Console")," in the Phase Two Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Users")," in the menu."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Add user"),"."),(0,r.kt)("li",{parentName:"ol"},"Fill out the information for Email, First name, and Last name. Click ",(0,r.kt)("strong",{parentName:"li"},"Create"),"."),(0,r.kt)("li",{parentName:"ol"},"We will now set the password for this user manually. Click ",(0,r.kt)("strong",{parentName:"li"},"Credentials")," (tab) and click ",(0,r.kt)("strong",{parentName:"li"},"Set Password"),'. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".'),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Save")," and confirm the password by clicking ",(0,r.kt)("strong",{parentName:"li"},"Save password"))))}i.isMDXComponent=!0},47842:function(e,t,n){n.d(t,{ZP:function(){return i}});var a=n(83117),r=(n(67294),n(3905));const o={toc:[{value:"OIDC Config",id:"oidc-config",level:3}]};function i(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We need to create a ",(0,r.kt)("a",{parentName:"p",href:"https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide"},"OpenID Connect")," Client in Keycloak for the app to communicate with. Keycloak's ",(0,r.kt)("a",{parentName:"p",href:"https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients"},"docs")," provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the Admin UI by clicking ",(0,r.kt)("strong",{parentName:"p"},"Open Console")," in the Phase Two Dashboard.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Clients")," in the menu.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Create client"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Leave ",(0,r.kt)("strong",{parentName:"p"},"Client type")," set to ",(0,r.kt)("strong",{parentName:"p"},"OpenID Connect"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enter a ",(0,r.kt)("strong",{parentName:"p"},"Client ID"),". This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Supply a ",(0,r.kt)("strong",{parentName:"p"},"Name")," for the client.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Next"),"."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Keycloak OIDC Create Client General Settings",src:n(26212).Z,width:"3000",height:"2072"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Under the Capability Config section, leave the defaults as selected. This can be configured further later."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Client authentication to On."),(0,r.kt)("li",{parentName:"ul"},"Authorization to Off."),(0,r.kt)("li",{parentName:"ul"},"Standard flow checked. Direct access grants checked. All other items unchecked.")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Keycloak OIDC Create Client Capability Config with Authentication",src:n(74669).Z,width:"3000",height:"1909"})),(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Next"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Valid redirect URI")," (allows redirect back to application)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"http://localhost:3000/*\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Web origins")," (allows for Token auth call)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"http://localhost:3000\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"URI and Origin Details"),(0,r.kt)("p",{parentName:"li"},"The choice of ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Save")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Keycloak OIDC Create Login Settings",src:n(1375).Z,width:"3000",height:"2074"})))),(0,r.kt)("h3",{id:"oidc-config"},"OIDC Config"),(0,r.kt)("p",null,"We will need values to configure our application. To get these values follow the instructions below."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Clients")," in the menu.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find the Client you just created and click on it. In the top right click the ",(0,r.kt)("strong",{parentName:"p"},"Action")," dropdown and select ",(0,r.kt)("strong",{parentName:"p"},"Download adapter config"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select ",(0,r.kt)("strong",{parentName:"p"},"Keycloak OIDC JSON")," in the format option. The details section will populate with the details we will need."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Note the ",(0,r.kt)("inlineCode",{parentName:"li"},"realm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"auth-server-url"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"resource")," values.")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Keycloak OIDC Create Client Adapter Config",src:n(69245).Z,width:"3000",height:"2081"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You also need to copy the ",(0,r.kt)("strong",{parentName:"p"},"Client secret")," in the ",(0,r.kt)("strong",{parentName:"p"},"Credential")," tab for the client to use. Once on the Credential tab, click the copy button to copy the key to your clipboard. Save the key somewhere for use later in this tutorial"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Keycloak OIDC Create Client Client Secret",src:n(20477).Z,width:"3492",height:"2212"})))))}i.isMDXComponent=!0},77546:function(e,t,n){n.d(t,{ZP:function(){return i}});var a=n(83117),r=(n(67294),n(3905));const o={toc:[]};function i(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you already have a functioning Keycloak instance, you can skip to the next section.")),(0,r.kt)("p",null,'Rather than trying to set up a "from scratch" instance of Keycloak, we\'re going to short-circuit that process by leveraging a free ',(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/"},"Phase Two Starter")," instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Visit the sign-up ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/dashboard/"},"page"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enter an email, use a Github account, or use an existing Google account to register."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Phase Two Register",src:n(70618).Z,width:"3000",height:"1763"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Phase Two Email Magic Link Register",src:n(61175).Z,width:"3000",height:"857"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"After creating an account, a ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=ZTFlc-3pG1M"},"realm")," is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.'),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Phase Two Create Shared Deployment",src:n(22983).Z,width:"3000",height:"1541"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.'),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Phase Two Open Console Keycloak Admin UI",src:n(52787).Z,width:"3000",height:"1311"})))),(0,r.kt)("p",null,"At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance."))}i.isMDXComponent=!0},44732:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var a=n(83117),r=(n(67294),n(3905)),o=n(77546),i=n(47842),l=n(6062);const p={slug:"secure-spring-boot",title:"Securing an Angular Application with Spring Boot and Keycloak",author:"Phase Two",tags:["phase_two","tutorial","frameworks","spring_boot","authentication","authorization","sso"],image:"/blog/og/springboot@2x.png"},s=void 0,c={permalink:"/blog/secure-spring-boot",source:"@site/blog/2024-05-09-secure-spring-boot.mdx",title:"Securing an Angular Application with Spring Boot and Keycloak",description:"Spring Boot is a open-source tool which uses Java-based frameworks for building web applications.",date:"2024-05-09T00:00:00.000Z",formattedDate:"May 9, 2024",tags:[{label:"phase_two",permalink:"/blog/tags/phase-two"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"frameworks",permalink:"/blog/tags/frameworks"},{label:"spring_boot",permalink:"/blog/tags/spring-boot"},{label:"authentication",permalink:"/blog/tags/authentication"},{label:"authorization",permalink:"/blog/tags/authorization"},{label:"sso",permalink:"/blog/tags/sso"}],readingTime:8.12,hasTruncateMarker:!1,authors:[{name:"Phase Two"}],frontMatter:{slug:"secure-spring-boot",title:"Securing an Angular Application with Spring Boot and Keycloak",author:"Phase Two",tags:["phase_two","tutorial","frameworks","spring_boot","authentication","authorization","sso"],image:"/blog/og/springboot@2x.png"},nextItem:{title:"Keycloak vs. Auth0, a Open-Source Alternative",permalink:"/blog/keycloak-vs-auth0-open-source-alternative"}},u={authorsImageUrls:[void 0]},m=[{value:"Setting up a Spring Boot project",id:"setting-up-a-spring-boot-project",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Setting up a Keycloak Instance",id:"setting-up-a-keycloak-instance",level:2},{value:"Setting up an OIDC Client",id:"setting-up-an-oidc-client",level:2},{value:"Adding a Non-Admin User",id:"adding-a-non-admin-user",level:2},{value:"Install and configure Spring Boot",id:"install-and-configure-spring-boot",level:2},{value:"Testing the secured endpoints",id:"testing-the-secured-endpoints",level:3},{value:"Integration with Angular",id:"integration-with-angular",level:2},{value:"Generate Angular Application",id:"generate-angular-application",level:3},{value:"Securing views",id:"securing-views",level:3},{value:"User Authentication",id:"user-authentication",level:4},{value:"Use Angular guards to secure routes",id:"use-angular-guards-to-secure-routes",level:4},{value:"Learning more",id:"learning-more",level:2}],h={toc:m};function d(e){let{components:t,...p}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-boot"},"Spring Boot")," is a open-source tool which uses Java-based frameworks for building web applications."),(0,r.kt)("p",null,"In this article we'll be using ",(0,r.kt)("a",{parentName:"p",href:"https://www.keycloak.org/"},"Keycloak")," to secure an ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/"},"Angular")," application and access secured resources from a Spring Boot Web application."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you just want to skip to the code, visit the Phase Two ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak"},"Spring Boot example"),". We are also building ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples"},"Keycloak examples")," for other frameworks.")),(0,r.kt)("h2",{id:"setting-up-a-spring-boot-project"},"Setting up a Spring Boot project"),(0,r.kt)("p",null,"In order to setup a Spring Boot project, a JDK version must be chosen. As of the time of writing, to be inline with the latest changes from Keycloak 24, the Java 17 baseline will be used. Other JDK versions can also be used for developing the resource server according to the preference of the developer."),(0,r.kt)("p",null,"Starting with Spring Boot 2.x the Keycloak client adapters were deprecated. In Spring Boot 3.x we will use native functionalities of the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html"},(0,r.kt)("inlineCode",{parentName:"a"},"spring-boot-oauth2-resource-server"))," to be able to configure the application security context."),(0,r.kt)("h3",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"To get this project up and running locally on your computer you can clone the Phase Two ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak"},"Spring Boot example")," or follow the instructions below to generate a project from scratch."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set up the Spring Boot project."),(0,r.kt)("p",{parentName:"li"},"To kickstart a project, we will use (and recommend) using the Spring Boot ",(0,r.kt)("a",{parentName:"p",href:"https://start.spring.io/"},"Initializr"),", a Web-based tool that provides a simple UI to generate the project."),(0,r.kt)("p",{parentName:"li"},"Provide the following values to spring initializr for the project metadata:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Group: com.example\nArtifact: spring-boot-keycloak\nName: spring-boot-keycloak\nDescription: Demo project for Spring Boot\nPackage name: com.example.spring-boot-keycloak\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Spring Boot Initializr",src:n(2697).Z,width:"1850",height:"1003"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the required dependencies in spring initializr."),(0,r.kt)("p",{parentName:"li"},"For the purpose of this project we will add the following dependencies:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Oauth2 Resource Server"),(0,r.kt)("li",{parentName:"ul"},"Spring Web"),(0,r.kt)("li",{parentName:"ul"},"Spring Security")),(0,r.kt)("p",{parentName:"li"},"This will result in the following lines within ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"implementation 'org.springframework.boot:spring-boot-starter-security'\nimplementation 'org.springframework.boot:spring-boot-starter-web'\nimplementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'\n")),(0,r.kt)("p",{parentName:"li"},"Generate the project with those settings. Open the .zip in your preferred text editor.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Setup JDK 17 for the project. Follow instructions on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/"},"JDK setup")," page."))),(0,r.kt)("h2",{id:"setting-up-a-keycloak-instance"},"Setting up a Keycloak Instance"),(0,r.kt)("p",null,"Before customizing the Spring Boot app, we need to set up and configure our Keycloak instance."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Instructions"),(0,r.kt)(o.ZP,{mdxType:"PhaseTwoStarterInstructions"})),(0,r.kt)("h2",{id:"setting-up-an-oidc-client"},"Setting up an OIDC Client"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Instructions"),(0,r.kt)(i.ZP,{mdxType:"OIDC"})),(0,r.kt)("h2",{id:"adding-a-non-admin-user"},"Adding a Non-Admin User"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Instructions"),(0,r.kt)(l.ZP,{mdxType:"NonAdminUser"})),(0,r.kt)("h2",{id:"install-and-configure-spring-boot"},"Install and configure Spring Boot"),(0,r.kt)("p",null,"Now that we've setup and configured Keycloak using ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/dashboard/"},"Phase Two")," and cloned or created our Spring Boot application template, we will need to configure the project to leverage the capabilities provided by Keycloak."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure application settings"),(0,r.kt)("p",{parentName:"li"},"Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"application.yaml")," configuration file with the Keycloak security configuration (it's possible your download includes a ",(0,r.kt)("inlineCode",{parentName:"p"},"application.properties")," file instead)."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spring:\n  application:\n    name: spring-boot-keycloak\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: $http-keycloak-url/auth/realms/$your-realm\n          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs\n")),(0,r.kt)("p",{parentName:"li"},"Replace"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$http-keycloak-url")," with the Keycloak URL from the Phase Two hosted Keycloak instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$your-realm")," with the Keycloak realm created earlier in this tutorial.")),(0,r.kt)("p",{parentName:"li"},"If you are using the local Keycloak instance from the cloned example, use the local address for ",(0,r.kt)("inlineCode",{parentName:"p"},"$http-keycloak-url"),"."),(0,r.kt)("p",{parentName:"li"},"The below Java code omits any imports, reference our example for necessary imports or use your text editor to assist with populating the imports.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure Spring Boot resource server"),(0,r.kt)("p",{parentName:"li"},"Under ",(0,r.kt)("inlineCode",{parentName:"p"},"src.main.java.com.springbootkeycloak")," create a new package, ",(0,r.kt)("inlineCode",{parentName:"p"},"config"),", and create a class ",(0,r.kt)("inlineCode",{parentName:"p"},"SecurityConfig.java"),". In this class, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpSecurity")," settings:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    private final JwtClaimsConverter jwtAuthConverter;\n\n    public SecurityConfig(JwtClaimsConverter jwtAuthConverter) {\n        this.jwtAuthConverter = jwtAuthConverter;\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.authorizeHttpRequests(authz ->\n                authz\n                        .requestMatchers("/api/**")\n                        .authenticated()\n        );\n        http.oauth2ResourceServer(oauth2ResourceServer ->\n                oauth2ResourceServer.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthConverter))\n        );\n        http.csrf(AbstractHttpConfigurer::disable);\n\n        http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n        return http.build();\n    }\n}\n')),(0,r.kt)("p",{parentName:"li"},"This configuration will make the Spring Boot act as an OAuth2 Resource Server's with JWT authentication. This configuration is part of the functionality provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"spring-boot-starter-oauth2-resource-server")," dependency. Read more about it's configuration ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-sansboot"},"here"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add JWT token convert configuration"),(0,r.kt)("p",{parentName:"li"},"In the same ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," package, create another class, ",(0,r.kt)("inlineCode",{parentName:"p"},"JwtClaimsConverter.java"),". Add a converter for extracting the security context attributes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," received from Keycloak."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class JwtClaimsConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n\n    @Override\n    public AbstractAuthenticationToken convert(Jwt jwt) {\n      var authorities = extractRealmRoles(jwt);\n        return new JwtAuthenticationToken(jwt, authorities, getPrincipalFromClaim(jwt));\n    }\n\n    private String getPrincipalFromClaim(Jwt jwt) {\n        var claimName = "preferred_username";\n        return jwt.getClaim(claimName);\n    }\n\n    private Collection<GrantedAuthority> extractRealmRoles(Jwt jwt) {\n        Map<String, Object> resource = jwt.getClaim("realm_access");\n        Collection<String> roles;\n        if (resource == null\n                || (roles = (Collection<String>) resource.get("roles")) == null) {\n            return Set.of();\n        }\n        return roles.stream()\n                .map(role -> new SimpleGrantedAuthority("ROLE_" + role))\n                .collect(Collectors.toSet());\n    }\n}\n')),(0,r.kt)("p",{parentName:"li"},"The provided example uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"preferred_username")," claim for populating the ",(0,r.kt)("em",{parentName:"p"},"principal")," of the security context and the ",(0,r.kt)("inlineCode",{parentName:"p"},"realm_access.roles")," to populate the ",(0,r.kt)("em",{parentName:"p"},"authorities"),"."),(0,r.kt)("p",{parentName:"li"},"This configuration is part of the functionality provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"spring-boot-starter-oauth2-resource-server")," dependency. Read more about it's configuration ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-authorization-extraction"},"here"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the secured API resources:"),(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"src.main.java.com.springbootkeycloak")," create a new package, ",(0,r.kt)("inlineCode",{parentName:"p"},"web"),", and create a new class ",(0,r.kt)("inlineCode",{parentName:"p"},"TestController.java"),"."),(0,r.kt)("p",{parentName:"li"},"To test the security integration two resource endpoints are defined:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/api/test/anonymous")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/api/test/user"))),(0,r.kt)("p",{parentName:"li"},"Implemented with this code:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@RestController\n@RequestMapping("/api/test")\npublic class TestController {\n\n    @RequestMapping(value = "/anonymous", method = RequestMethod.GET)\n    public ResponseEntity<String> getAnonymous() {\n        return ResponseEntity.ok("Hello Anonymous");\n    }\n\n    @PreAuthorize("hasRole(\'ROLE_user\')")\n    @RequestMapping(value = "/user", method = RequestMethod.GET)\n    public ResponseEntity<String> getUser()\n    {\n        return ResponseEntity.ok("Hello Secured with user role.");\n    }\n}\n\n')),(0,r.kt)("p",{parentName:"li"},"Because both endpoints have the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"/api")," they will require a secure context in order to access them. Furthermore, the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/test/user")," endpoint is secured using a predefined authority ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLE_user"),". This is a Realm role that can be created and applied to your example user from earlier in this tutorial."),(0,r.kt)("p",{parentName:"li"},"This logic can be used to extend access and authorization to any part of the application."),(0,r.kt)("p",{parentName:"li"},"Start the application running with ",(0,r.kt)("inlineCode",{parentName:"p"},"./gradlew bootRun"),"."))),(0,r.kt)("h3",{id:"testing-the-secured-endpoints"},"Testing the secured endpoints"),(0,r.kt)("p",null,"The secured endpoints can be tested using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header must contain the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location 'http://localhost:8080/api/test/anonymous' \\\n    --header 'Authorization: Bearer {{$access_token}}'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location 'http://localhost:8080/api/test/user' \\\n    --header 'Authorization: Bearer {{$access_token}}'\n")),(0,r.kt)("p",null,"To generate an access token, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"openid-connect/token")," endpoint from Keycloak."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X POST \\\n  --location \"https://$http-keycloak-url/auth/realms/$keycloak-realm/protocol/openid-connect/token\" \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'username=$test-user&password=$password&grant_type=password&client_id=$client-name&client_secret=$client-secret'\n")),(0,r.kt)("p",null,"Substitute the values from your Keycloak instance and test user for ",(0,r.kt)("inlineCode",{parentName:"p"},"$http-keycloak-url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$keycloak-realm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$test-user"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$password"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$client-name"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$client-secret"),"."),(0,r.kt)("p",null,"In the returned HTTP response, the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," will be present. Use this token to test the secured endpoints in the example curl's above."),(0,r.kt)("p",null,'At this point, your Spring Boot application is secured with Keycloak, but there is no "Frontend" to the application. In the next section, we will add an Angular SPA to demonstrate sign-in with Keycloak.'),(0,r.kt)("h2",{id:"integration-with-angular"},"Integration with Angular"),(0,r.kt)("p",null,"In order to access the secured resources of the Spring Boot server, we will create a client application which will authenticate our users. After Authentication, that user will then have access to the secured resources via their JWT token."),(0,r.kt)("h3",{id:"generate-angular-application"},"Generate Angular Application"),(0,r.kt)("p",null,"Our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/p2-inc/examples/tree/main/frameworks/spring-boot-keycloak"},"Spring Boot example")," already has a basic Angular application setup. We will use that for the rest of this setup."),(0,r.kt)("p",null,"In the example folder, open the ",(0,r.kt)("inlineCode",{parentName:"p"},"angularclient")," folder."),(0,r.kt)("p",null,"If you do want to start your own Application, follow the instructions below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setup a new Angular application following these ",(0,r.kt)("a",{parentName:"li",href:"https://angular.io/start"},"instructions")),(0,r.kt)("li",{parentName:"ul"},"Use the Angular Oauth2 OIDC ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/manfredsteyer/angular-oauth2-oidc"},"library")," to integrate authentication and authorization.")),(0,r.kt)("h3",{id:"securing-views"},"Securing views"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/angularclient/src/app")," folder, the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts")," file is the entry point for the Angular application. The Angular application will need to be configured in order to access user information only after authentication."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"@NgModule({\n  declarations: [\n    AppComponent,\n    MainpageComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    OAuthModule.forRoot()\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: applicationInitializerFactory,\n      deps: [OAuthService],\n      multi: true\n    },\n    {provide: LOCAL_STORAGE_TOKEN, useFactory: localStorageFactory},\n    {provide: OAuthStorage, useFactory: localStorageFactory}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {...}\n")),(0,r.kt)("p",null,"The app is initialized with the ",(0,r.kt)("inlineCode",{parentName:"p"},"OAuthService")," as a dependency. Tokens from the ",(0,r.kt)("inlineCode",{parentName:"p"},"OAuthService")," are stored in the browser's ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorage"),"."),(0,r.kt)("p",null,"To configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"OAuthService"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"authorization code")," login flow with the ",(0,r.kt)("inlineCode",{parentName:"p"},"angular-oauth2-oidc")," library add the following configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function configure() {\n  oauthService.configure({\n    // URL of the SPA to redirect the user to after login\n    redirectUri: window.location.origin + "/index.html",\n    // The SPA\'s id. The SPA is registered with this id at the auth-server\n    clientId: "$your-public-keycloak-client",\n    // set the scope for the permissions the client should request\n    scope: "openid",\n    // url for  /.well-known/openid-configuration endpoint\n    issuer: "http://$http-keycloak-url:8888/auth/realms/$your-keycloak-realm",\n    disablePKCE: true,\n    //initialize the code flow\n    responseType: "code",\n    showDebugInformation: true,\n  });\n}\n')),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"http-keycloak-url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$your-public-keycloak-client"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$your-keycloak-realm")," with your actual Keycloak configurations."),(0,r.kt)("p",null,"Start the application with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run start")),(0,r.kt)("h4",{id:"user-authentication"},"User Authentication"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"user.component.html")," file, we authenticate the user to the logged in state and conditionally render the login and logout buttons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div *ngIf="isLoggedIn">\n  \x3c!-- Content for logged-in users --\x3e\n  <div class="mb-2 text-p2blue-700 text-2xl">Authenticated</div>\n  <div class="mb-6 text-p2blue-700 text-md">\n    <div *ngIf="userInfo">\n      <p><span class="font-bold">Username</span>: {{ userInfo.username }}</p>\n      <p><span class="font-bold">Email</span>: {{ userInfo.email }}</p>\n      <p><span class="font-bold">Roles</span>: {{ userInfo.roles }}</p>\n    </div>\n  </div>\n  <button [class]="buttonClasses" (click)="signOut()">Sign Out</button>\n</div>\n<div *ngIf="!isLoggedIn">\n  <div class="mb-6 text-p2blue-700 text-2xl">Not authenticated.</div>\n  <button [class]="buttonClasses" (click)="signIn()">Sign In</button>\n</div>\n')),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"isLoggedIn")," function can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user.component.ts")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"this.isLoggedIn = this.oauthService.hasValidAccessToken();\n")),(0,r.kt)("p",null,"Clicking the Log In or Log Out buttons will redirect to the Keycloak login page or log the user out."),(0,r.kt)("h4",{id:"use-angular-guards-to-secure-routes"},"Use Angular guards to secure routes"),(0,r.kt)("p",null,"We can achieve route restriction by using guards. If the access token is not valid the guard will initiate the login flow. You could optionally apply this at the router level to enforce a full page login."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"export class AuthGuard implements CanActivate {\n\n  constructor(private oauthService: OAuthService) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>{\n    if(!this.oauthService.hasValidAccessToken()) {\n      this.oauthService.initLoginFlow();\n    }\n    return of(true);\n  }\n}\n")),(0,r.kt)("h2",{id:"learning-more"},"Learning more"),(0,r.kt)("p",null,"Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog"},"blog")," has many use cases from ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog/customizing-login-pages"},"customizing login pages"),", setting up ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/blog/set-up-magic-links"},"magic links")," (password-less sign in), and ",(0,r.kt)("a",{parentName:"p",href:"https://phasetwo.io/product/organizations"},"Organization")," workflows."))}d.isMDXComponent=!0},2697:function(e,t,n){t.Z=n.p+"assets/images/2024-05-10-create-spring-boot-project-template-5b21d7b893781dfb86087822643d2f20.png"},69245:function(e,t,n){t.Z=n.p+"assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png"},74669:function(e,t,n){t.Z=n.p+"assets/images/capability-config-with-auth-cdb9c0e4d816fd1b345a2b4f0ad31fea.png"},20477:function(e,t,n){t.Z=n.p+"assets/images/copy-credential-c9822fe7c52d15c588ca6661aa2416fd.png"},26212:function(e,t,n){t.Z=n.p+"assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png"},1375:function(e,t,n){t.Z=n.p+"assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png"},22983:function(e,t,n){t.Z=n.p+"assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png"},52787:function(e,t,n){t.Z=n.p+"assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png"},61175:function(e,t,n){t.Z=n.p+"assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png"},70618:function(e,t,n){t.Z=n.p+"assets/images/register-c45850867ce85096a398bb0dfab9df4d.png"}}]);