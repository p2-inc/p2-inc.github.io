"use strict";(self.webpackChunkphasetwo_docs=self.webpackChunkphasetwo_docs||[]).push([[92472],{1858:e=>{e.exports=JSON.parse('{"permalink":"/blog/keycloak-oidc-spa-phasetwo","source":"@site/blog/2024-10-10-oidc-spa.mdx","title":"Securing Keycloak with OIDC SPA and Phase Two","description":"OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.","date":"2024-10-10T00:00:00.000Z","tags":[{"inline":true,"label":"phase_two","permalink":"/blog/tags/phase-two"},{"inline":true,"label":"open_source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/blog/tags/authorization"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"oidc_spa","permalink":"/blog/tags/oidc-spa"},{"inline":true,"label":"keycloakify","permalink":"/blog/tags/keycloakify"}],"readingTime":5.73,"hasTruncateMarker":true,"authors":[{"name":"Phase Two","title":"Hosted Keycloak and Keycloak Support","url":"https://github.com/p2-inc","email":"support@phasetwo.io","imageURL":"https://avatars.githubusercontent.com/u/60152109?s=200&v=4","key":"phasetwo","page":null}],"frontMatter":{"title":"Securing Keycloak with OIDC SPA and Phase Two","description":"OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.","slug":"keycloak-oidc-spa-phasetwo","authors":"phasetwo","tags":["phase_two","open_source","authentication","authorization","keycloak","oidc_spa","keycloakify"]},"unlisted":false,"prevItem":{"title":"Why your startup should use Keycloak for SSO and User Management","permalink":"/blog/keycloak-for-startups-overview"},"nextItem":{"title":"Phase Two and Keycloakify, Making Keycloak Better Together","permalink":"/blog/phasetwo-keycloakify-partnership"}}')},2923:(e,n,t)=>{t.d(n,{Ay:()=>r,RM:()=>o});var i=t(74848),s=t(28453);const o=[];function a(e){const n={admonition:"admonition",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"It is bad practice to use your Admin user to sign in to an Application."})}),"\n",(0,i.jsx)(n.p,{children:"Since we do not want to use our Admin user for signing into the app we will build, we need to add a another non-admin user."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Open the Admin UI by clicking ",(0,i.jsx)(n.strong,{children:"Open Console"})," in the Phase Two Dashboard."]}),"\n",(0,i.jsxs)(n.li,{children:["Click ",(0,i.jsx)(n.strong,{children:"Users"})," in the menu."]}),"\n",(0,i.jsxs)(n.li,{children:["Click ",(0,i.jsx)(n.strong,{children:"Add user"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Fill out the information for Email, First name, and Last name. Click ",(0,i.jsx)(n.strong,{children:"Create"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["We will now set the password for this user manually. Click ",(0,i.jsx)(n.strong,{children:"Credentials"})," (tab) and click ",(0,i.jsx)(n.strong,{children:"Set Password"}),'. Provide a password for this user. For our use case, as a tutorial, you can leave "Temporary" set to "Off".']}),"\n",(0,i.jsxs)(n.li,{children:["Click ",(0,i.jsx)(n.strong,{children:"Save"})," and confirm the password by clicking ",(0,i.jsx)(n.strong,{children:"Save password"})]}),"\n"]})]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},12776:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/create_shared_deployment-a4fc0584f6318f037cf191e06c9703b8.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},30502:(e,n,t)=>{t.d(n,{Ay:()=>r,RM:()=>o});var i=t(74848),s=t(28453);const o=[{value:"OIDC Config",id:"oidc-config",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["We need to create a ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#con-oidc_server_administration_guide",children:"OpenID Connect"})," Client in Keycloak for the app to communicate with. Keycloak's ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#_oidc_clients",children:"docs"})," provide steps for how to create an OIDC client and all the various configurations that can be introduced. Follow the steps below to create a client and get the right information necessary for app configuration."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Open the Admin UI by clicking ",(0,i.jsx)(n.strong,{children:"Open Console"})," in the Phase Two Dashboard."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Clients"})," in the menu."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Create client"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Leave ",(0,i.jsx)(n.strong,{children:"Client type"})," set to ",(0,i.jsx)(n.strong,{children:"OpenID Connect"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Enter a ",(0,i.jsx)(n.strong,{children:"Client ID"}),". This ID is an alphanumeric string that is used in OIDC requests and in the Keycloak database to identify the client."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Supply a ",(0,i.jsx)(n.strong,{children:"Name"})," for the client."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Keycloak OIDC Create Client General Settings",src:t(35450).A+"",width:"3000",height:"2072"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Under the Capability Config section, leave the defaults as selected. This can be configured further later."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Client authentication to Off."}),"\n",(0,i.jsx)(n.li,{children:"Authorization to Off."}),"\n",(0,i.jsx)(n.li,{children:"Standard flow checked. Direct access grants checked. All other items unchecked."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Next"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Keycloak OIDC Create Client Capability Config ",src:t(30583).A+"",width:"3000",height:"2068"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Under Login settings we need to add a redirect URI and Web origin in order. Assuming you are using the example applicaiton:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Valid redirect URI"})," (allows redirect back to application)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:3000/*\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Web origins"})," (allows for Token auth call)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:3000\n"})}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:"URI and Origin Details"}),(0,i.jsxs)(n.p,{children:["The choice of ",(0,i.jsx)(n.code,{children:"localhost"})," is arbitrary. If you are using an example application running locally, this will apply. If you are using an app that you actually have deployed somewhere, then you will need to substitute the appropriate URI for that."]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Save"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Keycloak OIDC Create Login Settings",src:t(40623).A+"",width:"3000",height:"2074"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"oidc-config",children:"OIDC Config"}),"\n",(0,i.jsx)(n.p,{children:"We will need values to configure our application. To get these values follow the instructions below."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Clients"})," in the menu."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Find the Client you just created and click on it. In the top right click the ",(0,i.jsx)(n.strong,{children:"Action"})," dropdown and select ",(0,i.jsx)(n.strong,{children:"Download adapter config"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Select ",(0,i.jsx)(n.strong,{children:"Keycloak OIDC JSON"})," in the format option. The details section will populate with the details we will need."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Note the ",(0,i.jsx)(n.code,{children:"realm"}),", ",(0,i.jsx)(n.code,{children:"auth-server-url"}),", and ",(0,i.jsx)(n.code,{children:"resource"})," values."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Keycloak OIDC Create Client Adapter Config",src:t(90900).A+"",width:"3000",height:"2081"})}),"\n"]}),"\n"]})]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},30583:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/capability-config-995c6bc68516bc541a9372f1bce7ad86.png"},34724:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/deployments-e5cb24a81b832bb19e3adf754c133bf1.png"},35450:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/general-settings-0a3265fecd73272214fb1d3d9c4a57a7.png"},40623:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/login-settings-7706affb95f5f93f7490d7b46f9ec1f4.png"},57117:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/email_link-cefd0e50772e855bbaa5de46bda7f504.png"},63545:(e,n,t)=>{t.d(n,{Ay:()=>r,RM:()=>o});var i=t(74848),s=t(28453);const o=[];function a(e){const n={a:"a",admonition:"admonition",img:"img",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"If you already have a functioning Keycloak instance, you can skip to the next section."})}),"\n",(0,i.jsxs)(n.p,{children:['Rather than trying to set up a "from scratch" instance of Keycloak, we\'re going to short-circuit that process by leveraging a free ',(0,i.jsx)(n.a,{href:"https://phasetwo.io/",children:"Phase Two Starter"})," instance. The Starter provides a free hosted instance of Phase Two's enhanced Keycloak ready for light production use cases."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Visit the sign-up ",(0,i.jsx)(n.a,{href:"https://dash.phasetwo.io/",children:"page"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Enter an email, use a Github account, or use an existing Google account to register."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Phase Two Register",src:t(90865).A+"",width:"3000",height:"1763"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Follow the register steps. This will include a sign-in link being sent to your email. Use that for password-less login."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Phase Two Email Magic Link Register",src:t(57117).A+"",width:"3000",height:"857"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After creating an account, a ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ZTFlc-3pG1M",children:"realm"})," is automatically created for you with all of the Phase Two enhancements. You need to create a Deployment in the Shared Phase Two infrastructure in order to gain access to the realm. Without a deployment created, the Create Shared Deployment modal will automatically pop up."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Create a Shared Deployment by providing a region (pick something close to your existing infrastructure), a name for the deployment, and selecting the default organization that was created for you upon account creation. Hit "Confirm" when ready. Standby while our robots get to work generating your deployment. This can take a few seconds.'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Phase Two Create Shared Deployment",src:t(12776).A+"",width:"3000",height:"1541"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'After the deployment is created and active, you can access the Keycloak Admin console by clicking "Open Console" for that deployment. Open it now to see the console.'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Phase Two Open Console Keycloak Admin UI",src:t(34724).A+"",width:"3000",height:"1311"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"At this point, move on to the next step in the tutorial. We'll be coming back to the Admin Console when its time to start connecting our App to the Keycloak instance."})]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},66009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var i=t(1858),s=t(74848),o=t(28453),a=t(63545),r=t(30502),l=t(2923);const c={title:"Securing Keycloak with OIDC SPA and Phase Two",description:"OIDC SPA makes connecting your application to an OpenID provider extremely quick and easy.",slug:"keycloak-oidc-spa-phasetwo",authors:"phasetwo",tags:["phase_two","open_source","authentication","authorization","keycloak","oidc_spa","keycloakify"]},d=void 0,h={authorsImageUrls:[void 0]},p=[{value:"Setting up a Keycloak Instance",id:"setting-up-a-keycloak-instance",level:2},...a.RM,{value:"Setting up an OIDC Client",id:"setting-up-an-oidc-client",level:2},...r.RM,{value:"Adding a Non-Admin User",id:"adding-a-non-admin-user",level:2},...l.RM,{value:"Setting up a ReactJS Project",id:"setting-up-a-reactjs-project",level:2},{value:"Bonus",id:"bonus",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("img",{src:"/blog/oidcspa-logo.svg",style:{width:"150px",boxShadow:"none"},alt:"OIDC SPA Logo"}),"\n",(0,s.jsxs)(n.p,{children:["Our pal over at ",(0,s.jsx)(n.a,{href:"https://www.keycloakify.dev/",children:"Keycloakify"})," has been working on creating a simple OpenId Connect (OIDC) library called, ",(0,s.jsx)(n.a,{href:"https://www.oidc-spa.dev/",children:"OIDC Spa"}),". As with ",(0,s.jsx)(n.a,{href:"https://github.com/garronej",children:"Joseph"}),"'s usual approach to user friendliness, OIDC SPA simplifies a lot of the integration work than can come with adding an Authentication and Authorization layer to your application. Follow along as we show you how to integrate OIDC SPA with a Phase Two's free Keycloak instance."]}),"\n",(0,s.jsxs)(n.p,{children:["We're going to work through an example of how to add OIDC SPA to a React application. If you just want to skip to code, check out our ",(0,s.jsx)(n.a,{href:"https://github.com/p2-inc/examples/tree/main/frameworks/reactjs",children:"React example"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-a-keycloak-instance",children:"Setting up a Keycloak Instance"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Instructions"}),(0,s.jsx)(a.Ay,{})]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-an-oidc-client",children:"Setting up an OIDC Client"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Instructions"}),(0,s.jsx)(r.Ay,{})]}),"\n",(0,s.jsx)(n.h2,{id:"adding-a-non-admin-user",children:"Adding a Non-Admin User"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Instructions"}),(0,s.jsx)(l.Ay,{})]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-a-reactjs-project",children:"Setting up a ReactJS Project"}),"\n",(0,s.jsxs)(n.p,{children:["As this is a more interactive project, we're going to walk through a bit more integration. We've got a very basic starter template which you can find ",(0,s.jsx)(n.a,{href:"https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter",children:"here"}),". If you'd like to see more examples, check out the ",(0,s.jsx)(n.a,{href:"https://github.com/keycloakify/oidc-spa/tree/main/examples",children:"oidc-spa repo"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/p2-inc/examples/tree/main/frameworks/reactjs/oidc-spa-starter",children:"starter repo"})," and install the OIDC SPA library:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install oidc-spa\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Add an OIDC Provider in ",(0,s.jsx)(n.code,{children:"index.tsx"}),". We'll be using the params from the Keycloak instance we set up earlier (update ",(0,s.jsx)(n.code,{children:"issuerUri"})," and ",(0,s.jsx)(n.code,{children:"clientId"})," as needed):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { createReactOidc } from "oidc-spa/react";\n\nexport const { OidcProvider, useOidc, getOidc } = createReactOidc({\n  // NOTE: If you don\'t have the params right away see note below.\n  issuerUri: "https://app.phasetwo.io/auth/realms/p2examples",\n  clientId: "reactjs-example",\n  /**\n   * Vite:  `publicUrl: import.meta.env.BASE_URL`\n   * CRA:   `publicUrl: process.env.PUBLIC_URL`\n   * Other: `publicUrl: "/"` (Usually)\n   */\n  publicUrl: process.env.BASE_URL,\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Once that is added, we can render the App within the ",(0,s.jsx)(n.code,{children:"OidcProvider"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'ReactDOM.createRoot(document.getElementById("root")!).render(\n  <OidcProvider\n    // Optional\n    fallback={<>Checking authentication \u231b\ufe0f</>}\n  >\n    <App />\n  </OidcProvider>\n);\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Use the ",(0,s.jsx)(n.code,{children:"useOidc"})," hook to access the OIDC context from ",(0,s.jsx)(n.code,{children:"index.tsx"})," in the ",(0,s.jsx)(n.code,{children:"Auth.tsx"})," file. This will allow you to check if the user is logged in, log them in, log them out, and access the OIDC tokens:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useOidc } from "./index";\n\nconst Auth = () => {\n  const { isUserLoggedIn, login, logout, oidcTokens } = useOidc();\n  ...\n};\n\nexport default Auth;\n'})}),"\n",(0,s.jsx)(n.p,{children:"Looking at what comes back, we have a few main items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isUserLoggedIn"})," - A boolean value that tells you if the user is logged in."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"login"})," - A function that will log the user in."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"logout"})," - A function that will log the user out."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"oidcTokens"})," - An object that contains the OIDC tokens. From this we can grab the ",(0,s.jsx)(n.code,{children:"decodedIdToken"})," and to see information about the user. There are other tokens within this like ",(0,s.jsx)(n.code,{children:"accessToken"}),", ",(0,s.jsx)(n.code,{children:"refreshToken"}),", and ",(0,s.jsx)(n.code,{children:"idToken"}),", which can be used for various purposes."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"One of the nicest things that OIDC SPA does well is handling your token refresh for you. This is a common issue with OIDC libraries and OIDC SPA has a nice solution."})}),"\n",(0,s.jsx)(n.p,{children:"Let's move forward with building out this component and adding some logic to handle the user's authentication state. Some of the mark is purely for layout and styling, but the logic is what we're after:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"oidcTokens.decodedIdToken?.email as string"})," we type this as since the ",(0,s.jsx)(n.code,{children:"decodedIdToken"})," isn't defined. If you want to pretype the ",(0,s.jsx)(n.code,{children:"decodedIdToken"})," in the ",(0,s.jsx)(n.code,{children:"createReactOidc"})," function, do so by providing a ",(0,s.jsx)(n.code,{children:"decodedIdTokenSchema"})," key and optionally validate it with ",(0,s.jsx)(n.a,{href:"https://zod.dev/",children:"zod"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'let content;\n\nif (isUserLoggedIn) {\n  content = (\n    <div>\n      <div className="mb-2 text-p2blue-700 text-2xl">Authenticated</div>\n      <div className="mb-6 text-p2blue-700 text-md">\n        <div>{oidcTokens.decodedIdToken?.email as string}</div>\n        <div>{oidcTokens.decodedIdToken?.sub as string}</div>\n      </div>\n      <button\n        className="rounded-md bg-indigo-500 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"\n        onClick={() => logout({ redirectTo: "current page" })}\n      >\n        Log out\n      </button>\n      <Token />\n    </div>\n  );\n} else {\n  content = (\n    <div>\n      <div className="mb-6 text-p2blue-700 text-2xl">Not authenticated.</div>\n      <button\n        className="rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"\n        onClick={() => login({ doesCurrentHrefRequiresAuth: true })}\n      >\n        Log in\n      </button>\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <div className="text-xl pb-8 italic">Your current status is:</div>\n    {content}\n  </div>\n);\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Run the application:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Test the login and logout functionality. You should see the user's email and sub displayed when logged in. If you're using the Keycloak instance we set up earlier, you can use the non-admin user we created."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bonus",children:"Bonus"}),"\n",(0,s.jsxs)(n.p,{children:["A very common use case is security API calls. An example ",(0,s.jsx)(n.code,{children:"api.ts"})," file below shows how you would intercept all requests and append the ",(0,s.jsx)(n.code,{children:"accessToken"})," to the headers."]}),"\n",(0,s.jsxs)(n.p,{children:["This example is provided with Axios by ",(0,s.jsx)(n.a,{href:"https://docs.oidc-spa.dev/documentation/web-api",children:"Keycloakify"}),". We'll implement it in ",(0,s.jsx)(n.code,{children:"fetch"})," as an alternative."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { getOidc } from "oidc";\n\ntype Api = {\n  getTodos: () => Promise<{ id: number; title: string }[]>;\n  addTodo: (todo: { title: string }) => Promise<void>;\n};\n\nconst baseURL = import.meta.env.API_URL;\n\nconst fetchWithAuth = async (url: string, options: RequestInit = {}) => {\n  const oidc = await getOidc();\n\n  if (!oidc.isUserLoggedIn) {\n    throw new Error(\n      "We made a logic error: The user should be logged in at this point"\n    );\n  }\n\n  const headers = {\n    ...options.headers,\n    Authorization: `Bearer ${oidc.getTokens().accessToken}`,\n    "Content-Type": "application/json",\n  };\n\n  const response = await fetch(`${baseURL}${url}`, { ...options, headers });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const api: Api = {\n  getTodos: () => fetchWithAuth("/todo"),\n  addTodo: (todo) =>\n    fetchWithAuth("/todo", {\n      method: "POST",\n      body: JSON.stringify(todo),\n    }),\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We aren't setting this actual backend up, but you can see how you would use the ",(0,s.jsx)(n.code,{children:"api.ts"})," file to make authenticated requests."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"This only covers the most very basic installation and usage of this library. There are a lot of different ways you leverage the tool and we invite you to investigate further. Some of which are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Auto Logout (due to inactivity)"}),"\n",(0,s.jsx)(n.li,{children:"Error Management (when login fails)"}),"\n",(0,s.jsx)(n.li,{children:"Globally enforced authentication (every route requires authentication)"}),"\n",(0,s.jsx)(n.li,{children:"Usage with routing libraries"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We'd love to hear how you're using OIDC SPA in your applications. If you have any questions or need help, feel free to reach out to us at ",(0,s.jsx)(n.a,{href:"https://phasetwo.io/contact/",children:"Phase Two"}),". We're always happy to help."]}),"\n",(0,s.jsxs)(n.p,{children:["Phase Two's enhanced Keycloak provides many ways to quickly control and tweak the log in and user management experience. Our ",(0,s.jsx)(n.a,{href:"https://phasetwo.io/blog",children:"blog"})," has many use cases from ",(0,s.jsx)(n.a,{href:"https://phasetwo.io/blog/customizing-login-pages",children:"customizing login pages"}),", setting up ",(0,s.jsx)(n.a,{href:"https://phasetwo.io/blog/set-up-magic-links",children:"magic links"})," (passwordless sign in), and ",(0,s.jsx)(n.a,{href:"https://phasetwo.io/product/organizations",children:"Organization"})," workflows."]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},90865:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/register-c45850867ce85096a398bb0dfab9df4d.png"},90900:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/adapter-config-c561561514672a51754146ff56e6bbe3.png"}}]);